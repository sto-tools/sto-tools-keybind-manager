{"version":3,"file":"bundle.js","sources":["../src/js/constants.js","../src/js/eventBus.js","../src/js/data.js","../src/js/errors.js","../src/js/vertigo_data.js","../src/js/version.js","../src/js/main.js","../src/js/storage.js","../src/js/profiles.js","../src/js/keybinds.js","../src/js/aliases.js","../src/js/export.js","../src/js/modalManager.js","../src/js/ui.js","../src/js/commands.js","../src/js/fileexplorer.js","../src/js/app.js"],"sourcesContent":["/**\r\n * Application constants\r\n */\r\n\r\n// Current application version\r\nexport const APP_VERSION = '2025.06.20-preview-1';\r\n\r\n// Display version with 'v' prefix for UI\r\nexport const DISPLAY_VERSION = `v${APP_VERSION}`;\r\n","(function (global) {\r\n  const listeners = {};\r\n\r\n  function on(event, handler) {\r\n    if (!listeners[event]) {\r\n      listeners[event] = new Set();\r\n    }\r\n    listeners[event].add(handler);\r\n  }\r\n\r\n  function off(event, handler) {\r\n    if (listeners[event]) {\r\n      listeners[event].delete(handler);\r\n    }\r\n  }\r\n\r\n  function emit(event, detail) {\r\n    if (!listeners[event]) return;\r\n    for (const handler of listeners[event]) {\r\n      try {\r\n        handler(detail);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  function onDom(target, domEvent, busEvent, handler) {\r\n    if (typeof target === 'string') {\r\n      target = document.getElementById(target);\r\n    }\r\n    if (!target || !target.addEventListener) return () => {};\r\n    if (typeof busEvent === 'function') {\r\n      handler = busEvent;\r\n      busEvent = domEvent;\r\n    }\r\n    if (!busEvent) busEvent = domEvent;\r\n\r\n    const domHandler = (e) => emit(busEvent, e);\r\n    target.addEventListener(domEvent, domHandler);\r\n\r\n    if (handler) on(busEvent, handler);\r\n\r\n    return () => {\r\n      target.removeEventListener(domEvent, domHandler);\r\n      if (handler) off(busEvent, handler);\r\n    };\r\n  }\r\n\r\n  global.eventBus = { on, off, emit, onDom };\r\n})(typeof window !== 'undefined' ? window : this);\r\n","// STO Tools Keybind Manager - Data Layer\n// Contains all command definitions, templates, and default configurations\n\nconst STO_DATA = {\n    // Command categories and definitions\n    commands: {\n        targeting: {\n            name: \"Targeting\",\n            icon: \"fas fa-crosshairs\",\n            description: \"Target selection and management\",\n            commands: {\n                target: {\n                    name: \"Target by Name\",\n                    command: \"Target\",\n                    description: \"Target entity by name (requires quotes)\",\n                    syntax: \"Target \\\"EntityName\\\"\",\n                    icon: \"🎯\",\n                    customizable: true,\n                    parameters: {\n                        entityName: { type: \"text\", default: \"EntityName\", placeholder: \"Enter entity name\" }\n                    }\n                },\n                target_enemy_near: {\n                    name: \"Target Nearest Enemy\",\n                    command: \"Target_Enemy_Near\",\n                    description: \"Target the nearest enemy in view\",\n                    syntax: \"Target_Enemy_Near\",\n                    icon: \"🎯\"\n                },\n                target_friend_near: {\n                    name: \"Target Nearest Friend\",\n                    command: \"Target_Friend_Near\", \n                    description: \"Target the nearest friendly entity\",\n                    syntax: \"Target_Friend_Near\",\n                    icon: \"🤝\"\n                },\n                target_self: {\n                    name: \"Target Self\",\n                    command: \"Target_Self\",\n                    description: \"Target your own ship/character\",\n                    syntax: \"Target_Self\",\n                    icon: \"👤\"\n                },\n                target_clear: {\n                    name: \"Clear Target\",\n                    command: \"Target_Clear\",\n                    description: \"Remove current target lock\",\n                    syntax: \"Target_Clear\",\n                    icon: \"❌\"\n                },\n                target_teammate_1: {\n                    name: \"Target Teammate 1\",\n                    command: \"Target_Teammate 1\",\n                    description: \"Target first team member\",\n                    syntax: \"Target_Teammate 1\",\n                    icon: \"👥\"\n                },\n                target_teammate_2: {\n                    name: \"Target Teammate 2\", \n                    command: \"Target_Teammate 2\",\n                    description: \"Target second team member\",\n                    syntax: \"Target_Teammate 2\",\n                    icon: \"👥\"\n                },\n                target_teammate_3: {\n                    name: \"Target Teammate 3\",\n                    command: \"Target_Teammate 3\", \n                    description: \"Target third team member\",\n                    syntax: \"Target_Teammate 3\",\n                    icon: \"👥\"\n                },\n                target_teammate_4: {\n                    name: \"Target Teammate 4\",\n                    command: \"Target_Teammate 4\",\n                    description: \"Target fourth team member\",\n                    syntax: \"Target_Teammate 4\", \n                    icon: \"👥\"\n                }\n            }\n        },\n\n        combat: {\n            name: \"Combat\",\n            icon: \"fas fa-fire\",\n            description: \"Weapon firing and combat actions\",\n            commands: {\n                fire_all: {\n                    name: \"Fire All Weapons\",\n                    command: \"FireAll\",\n                    description: \"Fire all weapons\",\n                    syntax: \"FireAll\",\n                    environment: \"space\",\n                    icon: \"🔥\",\n                    warning: \"Not recommended on spam bars as it interferes with firing cycles\"\n                },\n                fire_phasers: {\n                    name: \"Fire Energy Weapons\",\n                    command: \"FirePhasers\",\n                    description: \"Fire all Energy Weapons\",\n                    syntax: \"FirePhasers\",\n                    environment: \"space\",\n                    icon: \"⚡\",\n                    warning: \"Not recommended on spam bars as it interferes with firing cycles\"\n                },\n                fire_torps: {\n                    name: \"Fire Torpedoes\",\n                    command: \"FireTorps\", \n                    description: \"Fire all Torpedos\",\n                    syntax: \"FireTorps\",\n                    environment: \"space\",\n                    icon: \"🚀\",\n                    warning: \"Not recommended on spam bars as it interferes with firing cycles\"\n                },\n                fire_mines: {\n                    name: \"Fire Mines\",\n                    command: \"FireMines\",\n                    description: \"Fire all Mines\",\n                    syntax: \"FireMines\",\n                    environment: \"space\",\n                    icon: \"💣\",\n                    warning: \"Not recommended on spam bars as it interferes with firing cycles\"\n                },\n                fire_phasers_torps: {\n                    name: \"Fire Phasers & Torpedoes\",\n                    command: \"FirePhasersTorps\",\n                    description: \"Fire phasers & torpedos\",\n                    syntax: \"FirePhasersTorps\",\n                    environment: \"space\",\n                    icon: \"💥\",\n                    warning: \"Not recommended on spam bars as it interferes with firing cycles\"\n                },\n                fire_projectiles: {\n                    name: \"Fire Projectiles\",\n                    command: \"FireProjectiles\",\n                    description: \"Fire torpedos & mines\",\n                    syntax: \"FireProjectiles\",\n                    environment: \"space\",\n                    icon: \"🎯\",\n                    warning: \"Not recommended on spam bars as it interferes with firing cycles\"\n                }\n            }\n        },\n\n        tray: {\n            name: \"Tray Execution\",\n            icon: \"fas fa-th\",\n            description: \"Execute abilities from action trays\",\n            commands: {\n                custom_tray: {\n                    name: \"Tray Execution\",\n                    command: \"+STOTrayExecByTray 0 0\",\n                    description: \"Execute specific tray slot\",\n                    syntax: \"+STOTrayExecByTray <tray> <slot>\",\n                    icon: \"⚡\",\n                    customizable: true,\n                    parameters: {\n                        tray: { type: \"number\", min: 0, max: 9, default: 0 },\n                        slot: { type: \"number\", min: 0, max: 9, default: 0 },\n                        command_type: { type: \"select\", options: [\"STOTrayExecByTray\", \"TrayExecByTray\"], default: \"STOTrayExecByTray\" }\n                    }\n                },\n                tray_with_backup: {\n                    name: \"Tray Execution with Backup\",\n                    command: \"TrayExecByTrayWithBackup 1 0 0 0 0\",\n                    description: \"Execute specific tray slot with backup ability\",\n                    syntax: \"TrayExecByTrayWithBackup <active> <tray> <slot> <backup_tray> <backup_slot>\",\n                    icon: \"⚡\",\n                    customizable: true,\n                    parameters: {\n                        active: { type: \"number\", min: 0, max: 1, default: 1 },\n                        tray: { type: \"number\", min: 0, max: 9, default: 0 },\n                        slot: { type: \"number\", min: 0, max: 9, default: 0 },\n                        backup_tray: { type: \"number\", min: 0, max: 9, default: 0 },\n                        backup_slot: { type: \"number\", min: 0, max: 9, default: 0 }\n                    }\n                },\n                tray_range: {\n                    name: \"Tray Range Execution\",\n                    command: \"+STOTrayExecByTray 0 0\",\n                    description: \"Execute a range of tray slots\",\n                    syntax: \"+STOTrayExecByTray <tray> <slot> $$ ... (range)\",\n                    icon: \"⚡\",\n                    customizable: true,\n                    parameters: {\n                        start_tray: { type: \"number\", min: 0, max: 9, default: 0 },\n                        start_slot: { type: \"number\", min: 0, max: 9, default: 0 },\n                        end_tray: { type: \"number\", min: 0, max: 9, default: 0 },\n                        end_slot: { type: \"number\", min: 0, max: 9, default: 0 },\n                        command_type: { type: \"select\", options: [\"STOTrayExecByTray\", \"TrayExecByTray\"], default: \"STOTrayExecByTray\" }\n                    }\n                },\n                tray_range_with_backup: {\n                    name: \"Tray Range with Backup\",\n                    command: \"TrayExecByTrayWithBackup 1 0 0 0 0\",\n                    description: \"Execute a range of tray slots with backup abilities\",\n                    syntax: \"TrayExecByTrayWithBackup <active> <tray> <slot> <backup_tray> <backup_slot> $$ ... (range)\",\n                    icon: \"⚡\",\n                    customizable: true,\n                    parameters: {\n                        active: { type: \"number\", min: 0, max: 1, default: 1 },\n                        start_tray: { type: \"number\", min: 0, max: 9, default: 0 },\n                        start_slot: { type: \"number\", min: 0, max: 9, default: 0 },\n                        end_tray: { type: \"number\", min: 0, max: 9, default: 0 },\n                        end_slot: { type: \"number\", min: 0, max: 9, default: 0 },\n                        backup_start_tray: { type: \"number\", min: 0, max: 9, default: 0 },\n                        backup_start_slot: { type: \"number\", min: 0, max: 9, default: 0 },\n                        backup_end_tray: { type: \"number\", min: 0, max: 9, default: 0 },\n                        backup_end_slot: { type: \"number\", min: 0, max: 9, default: 0 }\n                    }\n                },\n                whole_tray: {\n                    name: \"Whole Tray Execution\",\n                    command: \"+STOTrayExecByTray 0 0\",\n                    description: \"Execute all slots in a tray\",\n                    syntax: \"+STOTrayExecByTray <tray> <slot> $$ ... (all slots)\",\n                    icon: \"⚡\",\n                    customizable: true,\n                    parameters: {\n                        tray: { type: \"number\", min: 0, max: 9, default: 0 },\n                        command_type: { type: \"select\", options: [\"STOTrayExecByTray\", \"TrayExecByTray\"], default: \"STOTrayExecByTray\" }\n                    }\n                },\n                whole_tray_with_backup: {\n                    name: \"Whole Tray with Backup\",\n                    command: \"TrayExecByTrayWithBackup 1 0 0 0 0\",\n                    description: \"Execute all slots in a tray with backup tray\",\n                    syntax: \"TrayExecByTrayWithBackup <active> <tray> <slot> <backup_tray> <backup_slot> $$ ... (all slots)\",\n                    icon: \"⚡\",\n                    customizable: true,\n                    parameters: {\n                        active: { type: \"number\", min: 0, max: 1, default: 1 },\n                        tray: { type: \"number\", min: 0, max: 9, default: 0 },\n                        backup_tray: { type: \"number\", min: 0, max: 9, default: 0 }\n                    }\n                }\n            }\n        },\n\n        power: {\n            name: \"Shield Management\", \n            icon: \"fas fa-shield-alt\",\n            description: \"Shield power and distribution management\",\n            commands: {\n                distribute_shields: {\n                    name: \"Distribute Shields\",\n                    command: \"+power_exec Distribute_Shields\",\n                    description: \"Evenly distributes shields as if clicking in the middle of the ship and shields icon\",\n                    syntax: \"+power_exec Distribute_Shields\",\n                    environment: \"space\",\n                    icon: \"🛡️\",\n                    warning: \"Not recommended on spam bars as it interferes with firing cycles\"\n                },\n                reroute_shields_rear: {\n                    name: \"Reroute Shields Rear\",\n                    command: \"+power_exec reroute_shields_rear\",\n                    description: \"Route shield power to rear facing\",\n                    syntax: \"+power_exec reroute_shields_rear\",\n                    environment: \"space\",\n                    icon: \"🛡️\"\n                },\n                reroute_shields_left: {\n                    name: \"Reroute Shields Left\",\n                    command: \"+power_exec reroute_shields_left\",\n                    description: \"Route shield power to left side\",\n                    syntax: \"+power_exec reroute_shields_left\",\n                    environment: \"space\",\n                    icon: \"🛡️\"\n                },\n                reroute_shields_right: {\n                    name: \"Reroute Shields Right\",\n                    command: \"+power_exec reroute_shields_right\",\n                    description: \"Route shield power to right side\",\n                    syntax: \"+power_exec reroute_shields_right\",\n                    environment: \"space\",\n                    icon: \"🛡️\"\n                },\n                reroute_shields_forward: {\n                    name: \"Reroute Shields Forward\",\n                    command: \"+power_exec reroute_shields_forward\",\n                    description: \"Route shield power to forward facing\",\n                    syntax: \"+power_exec reroute_shields_forward\",\n                    environment: \"space\",\n                    icon: \"🛡️\"\n                }\n            }\n        },\n\n        movement: {\n            name: \"Movement\",\n            icon: \"fas fa-arrows-alt\",\n            description: \"Ship movement and navigation\",\n            commands: {\n                full_impulse: {\n                    name: \"Full Impulse\",\n                    command: \"+fullimpulse\",\n                    description: \"Engage full impulse drive\",\n                    syntax: \"+fullimpulse\",\n                    environment: \"space\",\n                    icon: \"🚀\"\n                },\n                reverse: {\n                    name: \"Reverse\",\n                    command: \"+reverse\",\n                    description: \"Reverse engines\",\n                    syntax: \"+reverse\",\n                    icon: \"⬅️\"\n                },\n                throttle_adjust: {\n                    name: \"Throttle Adjust\",\n                    command: \"ThrottleAdjust\",\n                    description: \"Increase or decrease the throttle by amount\",\n                    syntax: \"ThrottleAdjust <amount>\",\n                    icon: \"⚡\",\n                    customizable: true,\n                    parameters: {\n                        amount: { type: \"number\", min: -1, max: 1, default: 0.25, step: 0.05 }\n                    }\n                },\n                throttle_set: {\n                    name: \"Throttle Set\",\n                    command: \"ThrottleSet\",\n                    description: \"Set the throttle to a specific position (negative = reverse, 0 = stop)\",\n                    syntax: \"ThrottleSet <position>\",\n                    icon: \"🎛️\",\n                    customizable: true,\n                    parameters: {\n                        position: { type: \"number\", min: -1, max: 1, default: 1, step: 0.1 }\n                    }\n                },\n                throttle_toggle: {\n                    name: \"Throttle Toggle\",\n                    command: \"ThrottleToggle\",\n                    description: \"Alternates between full throttle and full stop\",\n                    syntax: \"ThrottleToggle\",\n                    icon: \"🔄\"\n                },\n                turn_left: {\n                    name: \"Turn Left\",\n                    command: \"+turnleft\",\n                    description: \"Turn ship left (continuous while held)\",\n                    syntax: \"+turnleft\",\n                    icon: \"↪️\"\n                },\n                turn_right: {\n                    name: \"Turn Right\",\n                    command: \"+turnright\",\n                    description: \"Turn ship right (continuous while held)\",\n                    syntax: \"+turnright\",\n                    icon: \"↩️\"\n                },\n                pitch_up: {\n                    name: \"Pitch Up\",\n                    command: \"+up\",\n                    description: \"Pitch ship nose up (space altitude change)\",\n                    syntax: \"+up\",\n                    icon: \"⬆️\"\n                },\n                pitch_down: {\n                    name: \"Pitch Down\", \n                    command: \"+down\",\n                    description: \"Pitch ship nose down (space altitude change)\",\n                    syntax: \"+down\",\n                    icon: \"⬇️\"\n                },\n                strafe_left: {\n                    name: \"Strafe Left\",\n                    command: \"+left\",\n                    description: \"Strafe ship left\",\n                    syntax: \"+left\",\n                    icon: \"⬅️\"\n                },\n                strafe_right: {\n                    name: \"Strafe Right\",\n                    command: \"+right\",\n                    description: \"Strafe ship right\",\n                    syntax: \"+right\",\n                    icon: \"➡️\"\n                },\n                forward: {\n                    name: \"Forward\",\n                    command: \"+forward\",\n                    description: \"Move forward\",\n                    syntax: \"+forward\",\n                    icon: \"⬆️\"\n                },\n                backward: {\n                    name: \"Backward\",\n                    command: \"+backward\",\n                    description: \"Move backward\",\n                    syntax: \"+backward\",\n                    icon: \"⬇️\"\n                },\n                auto_forward: {\n                    name: \"Auto Forward\",\n                    command: \"autoForward\",\n                    description: \"Character moves forward until given new movement commands\",\n                    syntax: \"autoForward\",\n                    environment: \"ground\",\n                    icon: \"🏃\"\n                },\n                follow: {\n                    name: \"Follow Target\",\n                    command: \"Follow\",\n                    description: \"Follow the targeted entity\",\n                    syntax: \"Follow\",\n                    icon: \"👥\"\n                },\n                follow_cancel: {\n                    name: \"Cancel Follow\",\n                    command: \"Follow_Cancel\",\n                    description: \"Stop following and forget about the target\",\n                    syntax: \"Follow_Cancel\",\n                    icon: \"❌\"\n                }\n            }\n        },\n\n        camera: {\n            name: \"Camera\",\n            icon: \"fas fa-video\",\n            description: \"Camera control and view management\",\n            commands: {\n                zoom_in: {\n                    name: \"Zoom In\",\n                    command: \"Camzoomin\",\n                    description: \"Zoom the camera in\",\n                    syntax: \"Camzoomin\",\n                    icon: \"🔍\"\n                },\n                zoom_out: {\n                    name: \"Zoom Out\",\n                    command: \"Camzoomout\",\n                    description: \"Zoom the camera out\",\n                    syntax: \"Camzoomout\",\n                    icon: \"🔎\"\n                },\n                zoom_in_small: {\n                    name: \"Zoom In Small\",\n                    command: \"Camzoominsmall\",\n                    description: \"Zoom the camera in slightly\",\n                    syntax: \"Camzoominsmall\",\n                    icon: \"🔍\"\n                },\n                zoom_out_small: {\n                    name: \"Zoom Out Small\",\n                    command: \"Camzoomoutsmall\",\n                    description: \"Zoom the camera out slightly\",\n                    syntax: \"Camzoomoutsmall\",\n                    icon: \"🔎\"\n                },\n                cam_distance: {\n                    name: \"Set Camera Distance\",\n                    command: \"camdist\",\n                    description: \"Sets the camera distance from the player\",\n                    syntax: \"camdist <distance>\",\n                    icon: \"📏\",\n                    customizable: true,\n                    parameters: {\n                        distance: { type: \"number\", min: 1, max: 500, default: 50 }\n                    }\n                },\n                cam_reset: {\n                    name: \"Reset Camera\",\n                    command: \"CamReset\",\n                    description: \"Reset the camera position to default\",\n                    syntax: \"CamReset\",\n                    icon: \"🔄\"\n                },\n                cam_target_lock: {\n                    name: \"Lock Camera to Target\",\n                    command: \"Camsetlocktotarget\",\n                    description: \"Lock or unlock the camera to the target\",\n                    syntax: \"Camsetlocktotarget\",\n                    icon: \"🎯\"\n                },\n                cam_cycle_distance: {\n                    name: \"Cycle Camera Distance\",\n                    command: \"camCycleDist\",\n                    description: \"Cycle the camera distance between several preset values\",\n                    syntax: \"camCycleDist\",\n                    icon: \"🔄\"\n                },\n                cam_mouse_look: {\n                    name: \"Mouse Look\",\n                    command: \"+camMouseLook\",\n                    description: \"Enable mouse look camera control\",\n                    syntax: \"+camMouseLook\",\n                    icon: \"🖱️\"\n                },\n                cam_turn_to_face: {\n                    name: \"Turn to Face Camera\",\n                    command: \"+camTurnToFace\",\n                    description: \"Turn ship to face camera direction\",\n                    syntax: \"+camTurnToFace\",\n                    icon: \"↪️\"\n                },\n                look_up: {\n                    name: \"Look Up\",\n                    command: \"lookUp\",\n                    description: \"Change point of view to look straight up\",\n                    syntax: \"lookUp\",\n                    icon: \"⬆️\"\n                },\n                look_down: {\n                    name: \"Look Down\",\n                    command: \"lookDown\",\n                    description: \"Change point of view to look straight down\",\n                    syntax: \"lookDown\",\n                    icon: \"⬇️\"\n                }\n            }\n        },\n\n        communication: {\n            name: \"Communication\",\n            icon: \"fas fa-comments\",\n            description: \"Chat and team communication\",\n            commands: {\n                team_message: {\n                    name: \"Team Message\",\n                    command: \"team\",\n                    description: \"Send message to team\",\n                    syntax: \"team message\",\n                    icon: \"💬\",\n                    customizable: true,\n                    parameters: {\n                        message: { type: \"text\", default: \"Message text here\" }\n                    }\n                },\n                local_message: {\n                    name: \"Local Message\",\n                    command: \"say\",\n                    description: \"Send message to local area\",\n                    syntax: \"say message\",\n                    icon: \"📢\",\n                    customizable: true,\n                    parameters: {\n                        message: { type: \"text\", default: \"Message text here\" }\n                    }\n                },\n                zone_message: {\n                    name: \"Zone Message\", \n                    command: \"zone\",\n                    description: \"Send message to zone\",\n                    syntax: \"zone message\",\n                    icon: \"📡\",\n                    customizable: true,\n                    parameters: {\n                        message: { type: \"text\", default: \"Message text here\" }\n                    }\n                }\n            }\n        },\n\n        system: {\n            name: \"System\",\n            icon: \"fas fa-cog\",\n            description: \"UI and system commands\",\n            commands: {\n                toggle_hud: {\n                    name: \"Toggle HUD\",\n                    command: \"+GenToggleHUD\",\n                    description: \"Toggle HUD visibility\",\n                    syntax: \"+GenToggleHUD\",\n                    icon: \"👁️\"\n                },\n                screenshot: {\n                    name: \"Screenshot\",\n                    command: \"screenshot\",\n                    description: \"Take a screenshot\",\n                    syntax: \"screenshot\",\n                    icon: \"📷\"\n                },\n                screenshot_jpg: {\n                    name: \"Screenshot JPG\",\n                    command: \"screenshot_jpg\",\n                    description: \"Save a screenshot as JPG\",\n                    syntax: \"screenshot_jpg\",\n                    icon: \"📷\"\n                },\n                autofire_toggle: {\n                    name: \"Toggle Autofire\",\n                    command: \"+GenToggleAutofire\",\n                    description: \"Toggle weapon autofire\",\n                    syntax: \"+GenToggleAutofire\",\n                    icon: \"🔁\"\n                },\n                bind_save_file: {\n                    name: \"Save Binds to File\",\n                    command: \"bind_save_file\",\n                    description: \"Save all your binds to a text file\",\n                    syntax: \"bind_save_file <filename>\",\n                    icon: \"💾\",\n                    customizable: true,\n                    parameters: {\n                        filename: { type: \"text\", default: \"my_binds.txt\" }\n                    }\n                },\n                bind_load_file: {\n                    name: \"Load Binds from File\",\n                    command: \"bind_load_file\",\n                    description: \"Load a bind file into the client\",\n                    syntax: \"bind_load_file <filename>\",\n                    icon: \"📁\",\n                    customizable: true,\n                    parameters: {\n                        filename: { type: \"text\", default: \"my_binds.txt\" }\n                    }\n                },\n                combat_log: {\n                    name: \"Toggle Combat Log\",\n                    command: \"CombatLog\",\n                    description: \"Turn combat log recording on/off (1=on, 0=off)\",\n                    syntax: \"CombatLog <1/0>\",\n                    icon: \"📊\",\n                    customizable: true,\n                    parameters: {\n                        state: { type: \"number\", min: 0, max: 1, default: 1 }\n                    }\n                },\n                missions: {\n                    name: \"Show/Hide Missions\",\n                    command: \"missions\",\n                    description: \"Show/hide the mission journal\",\n                    syntax: \"missions\",\n                    icon: \"📋\"\n                },\n                inventory: {\n                    name: \"Show/Hide Inventory\",\n                    command: \"Inventory\",\n                    description: \"Show/hide your inventory\",\n                    syntax: \"Inventory\",\n                    icon: \"🎒\"\n                },\n                map: {\n                    name: \"Show/Hide Map\",\n                    command: \"Map\",\n                    description: \"Show/hide the map window\",\n                    syntax: \"Map\",\n                    icon: \"🗺️\"\n                }\n            }\n        }\n    },\n\n    // Command templates for common scenarios\n    templates: {\n        space_combat: {\n            basic_attack: {\n                name: \"Basic Attack Sequence\",\n                description: \"Target enemy and fire all weapons\",\n                commands: [\n                    \"Target_Enemy_Near\",\n                    \"FireAll\"\n                ]\n            },\n            defensive_sequence: {\n                name: \"Defensive Sequence\", \n                description: \"Target self and activate defensive abilities\",\n                commands: [\n                    \"Target_Self\",\n                    \"+power_exec Distribute_Shields\"\n                ]\n            },\n            alpha_strike: {\n                name: \"Alpha Strike\",\n                description: \"Full offensive sequence with buffs\",\n                commands: [\n                    \"Target_Enemy_Near\",\n                    \"FireAll\"\n                ]\n            },\n            healing_sequence: {\n                name: \"Emergency Healing\",\n                description: \"Self-healing and damage control\",\n                commands: [\n                    \"Target_Self\",\n                    \"+power_exec Distribute_Shields\"\n                ]\n            }\n        },\n        ground_combat: {\n            basic_ground_attack: {\n                name: \"Basic Ground Attack\",\n                description: \"Target and attack sequence for ground combat\",\n                commands: [\n                    \"Target_Enemy_Near\",\n                    \"+STOTrayExecByTray 0 0\"\n                ]\n            }\n        }\n    },\n\n    // Default profiles\n    defaultProfiles: {\n        default_space: {\n            name: \"Default Space\",\n            description: \"Basic space combat configuration\",\n            currentEnvironment: \"space\",\n            builds: {\n                space: {\n                    keys: {\n                        Space: [\n                            {\n                                command: \"Target_Enemy_Near\",\n                                type: \"targeting\", \n                                icon: \"🎯\",\n                                text: \"Target nearest enemy\",\n                                id: \"cmd_1\"\n                            },\n                            {\n                                command: \"FireAll\", \n                                type: \"combat\",\n                                icon: \"🔥\",\n                                text: \"Fire all weapons\",\n                                id: \"cmd_2\"\n                            }\n                        ]\n                    },\n                    aliases: {\n                        AttackCall: {\n                            description: \"Call out attack target to team\",\n                            commands: 'team Attacking [$Target] - focus fire!'\n                        },\n                        TargetReport: {\n                            description: \"Report current target to team\",\n                            commands: 'team Current target: [$Target]'\n                        },\n                        HealCall: {\n                            description: \"Request healing for target\",\n                            commands: 'team Need healing on [$Target]!'\n                        }\n                    }\n                },\n                ground: {\n                    keys: {\n                        Space: [\n                            {\n                                command: \"Target_Enemy_Near\",\n                                type: \"targeting\",\n                                icon: \"🎯\", \n                                text: \"Target nearest enemy\",\n                                id: \"cmd_g1\"\n                            },\n                            {\n                                command: \"+STOTrayExecByTray 0 0\",\n                                type: \"tray\",\n                                icon: \"⚡\",\n                                text: \"Primary attack\",\n                                id: \"cmd_g2\"\n                            }\n                        ]\n                    },\n                    aliases: {}\n                }\n            }\n        },\n        tactical_space: {\n            name: \"Tactical Space\",\n            description: \"Aggressive DPS-focused space build\",\n            currentEnvironment: \"space\",\n            builds: {\n                space: {\n                    keys: {\n                        Space: [\n                            {\n                                command: \"Target_Enemy_Near\",\n                                type: \"targeting\", \n                                icon: \"🎯\",\n                                text: \"Target nearest enemy\",\n                                id: \"cmd_1\"\n                            },\n                            {\n                                command: \"+STOTrayExecByTray 0 0\",\n                                type: \"tray\",\n                                icon: \"⚡\", \n                                text: \"Execute Tray 1 Slot 1\",\n                                id: \"cmd_2\"\n                            },\n                            {\n                                command: \"FireAll\",\n                                type: \"combat\",\n                                icon: \"🔥\",\n                                text: \"Fire all weapons\", \n                                id: \"cmd_3\"\n                            },\n                            {\n                                command: \"+power_exec Distribute_Shields\",\n                                type: \"power\",\n                                icon: \"🛡️\",\n                                text: \"Distribute shields\",\n                                id: \"cmd_4\"\n                            }\n                        ],\n                        \"1\": [\n                            {\n                                command: \"+STOTrayExecByTray 1 0\",\n                                type: \"tray\",\n                                icon: \"⚡\",\n                                text: \"Execute Tray 2 Slot 1\",\n                                id: \"cmd_5\"\n                            }\n                        ],\n                        F1: [\n                            {\n                                command: \"Target_Self\",\n                                type: \"targeting\",\n                                icon: \"👤\", \n                                text: \"Target self\",\n                                id: \"cmd_6\"\n                            },\n                            {\n                                command: \"+STOTrayExecByTray 2 0\",\n                                type: \"tray\",\n                                icon: \"⚡\",\n                                text: \"Execute Tray 3 Slot 1\",\n                                id: \"cmd_7\"\n                            }\n                        ]\n                    },\n                    aliases: {}\n                },\n                ground: {\n                    keys: {\n                        Space: [\n                            {\n                                command: \"Target_Enemy_Near\",\n                                type: \"targeting\",\n                                icon: \"🎯\",\n                                text: \"Target nearest enemy\",\n                                id: \"cmd_g1\"\n                            },\n                            {\n                                command: \"+STOTrayExecByTray 0 0\",\n                                type: \"tray\",\n                                icon: \"⚡\",\n                                text: \"Primary attack\",\n                                id: \"cmd_g2\"\n                            }\n                        ],\n                        \"1\": [\n                            {\n                                command: \"+STOTrayExecByTray 0 1\",\n                                type: \"tray\",\n                                icon: \"⚡\",\n                                text: \"Secondary attack\",\n                                id: \"cmd_g3\"\n                            }\n                        ],\n                        F1: [\n                            {\n                                command: \"Target_Self\",\n                                type: \"targeting\",\n                                icon: \"👤\",\n                                text: \"Target self\",\n                                id: \"cmd_g4\"\n                            },\n                            {\n                                command: \"+STOTrayExecByTray 1 0\",\n                                type: \"tray\",\n                                icon: \"💊\",\n                                text: \"Heal self\",\n                                id: \"cmd_g5\"\n                            }\n                        ]\n                    },\n                    aliases: {}\n                }\n            }\n        }\n    },\n\n    // Comprehensive key definitions organized by category\n    keys: {\n        common: {\n            name: \"Common Keys\",\n            description: \"Most frequently used keys\",\n            keys: [\n                { key: \"Space\", description: \"Spacebar\" },\n                { key: \"1\", description: \"Number 1\" },\n                { key: \"2\", description: \"Number 2\" },\n                { key: \"3\", description: \"Number 3\" },\n                { key: \"4\", description: \"Number 4\" },\n                { key: \"5\", description: \"Number 5\" },\n                { key: \"F1\", description: \"Function Key 1\" },\n                { key: \"F2\", description: \"Function Key 2\" },\n                { key: \"F3\", description: \"Function Key 3\" },\n                { key: \"F4\", description: \"Function Key 4\" },\n                { key: \"Tab\", description: \"Tab\" },\n                { key: \"enter\", description: \"Main Enter Key\" },\n                { key: \"Shift\", description: \"Shift\" },\n                { key: \"Control\", description: \"Control\" },\n                { key: \"ALT\", description: \"Alt\" }\n            ]\n        },\n        letters: {\n            name: \"Letter Keys\",\n            description: \"A-Z keyboard letters\",\n            keys: [\n                { key: \"A\", description: \"Key A\" },\n                { key: \"B\", description: \"Key B\" },\n                { key: \"C\", description: \"Key C\" },\n                { key: \"D\", description: \"Key D\" },\n                { key: \"E\", description: \"Key E\" },\n                { key: \"F\", description: \"Key F\" },\n                { key: \"G\", description: \"Key G\" },\n                { key: \"H\", description: \"Key H\" },\n                { key: \"I\", description: \"Key I\" },\n                { key: \"J\", description: \"Key J\" },\n                { key: \"K\", description: \"Key K\" },\n                { key: \"L\", description: \"Key L\" },\n                { key: \"M\", description: \"Key M\" },\n                { key: \"N\", description: \"Key N\" },\n                { key: \"O\", description: \"Key O\" },\n                { key: \"P\", description: \"Key P\" },\n                { key: \"Q\", description: \"Key Q\" },\n                { key: \"R\", description: \"Key R\" },\n                { key: \"S\", description: \"Key S\" },\n                { key: \"T\", description: \"Key T\" },\n                { key: \"U\", description: \"Key U\" },\n                { key: \"V\", description: \"Key V\" },\n                { key: \"W\", description: \"Key W\" },\n                { key: \"X\", description: \"Key X\" },\n                { key: \"Y\", description: \"Key Y\" },\n                { key: \"Z\", description: \"Key Z\" }\n            ]\n        },\n        numbers: {\n            name: \"Number Keys\",\n            description: \"Number row and numpad\",\n            keys: [\n                { key: \"0\", description: \"Number 0\" },\n                { key: \"6\", description: \"Number 6\" },\n                { key: \"7\", description: \"Number 7\" },\n                { key: \"8\", description: \"Number 8\" },\n                { key: \"9\", description: \"Number 9\" },\n                { key: \"numpad0\", description: \"Numerical Keypad 0\" },\n                { key: \"numpad1\", description: \"Numerical Keypad 1\" },\n                { key: \"numpad2\", description: \"Numerical Keypad 2\" },\n                { key: \"numpad3\", description: \"Numerical Keypad 3\" },\n                { key: \"numpad4\", description: \"Numerical Keypad 4\" },\n                { key: \"numpad5\", description: \"Numerical Keypad 5\" },\n                { key: \"numpad6\", description: \"Numerical Keypad 6\" },\n                { key: \"numpad7\", description: \"Numerical Keypad 7\" },\n                { key: \"numpad8\", description: \"Numerical Keypad 8\" },\n                { key: \"numpad9\", description: \"Numerical Keypad 9\" },\n                { key: \"Decimal\", description: \"Numerical Keypad Decimal\" },\n                { key: \"Divide\", description: \"Numerical Keypad Divide\" },\n                { key: \"Multiply\", description: \"Multiply (*)\" },\n                { key: \"Subtract\", description: \"Subtract (-)\" },\n                { key: \"Add\", description: \"Add (+)\" },\n                { key: \"numpadenter\", description: \"Numerical Keypad Enter\" }\n            ]\n        },\n        function: {\n            name: \"Function Keys\",\n            description: \"F1-F24 function keys\",\n            keys: [\n                { key: \"F5\", description: \"Function Key 5\" },\n                { key: \"F6\", description: \"Function Key 6\" },\n                { key: \"F7\", description: \"Function Key 7\" },\n                { key: \"F8\", description: \"Function Key 8\" },\n                { key: \"F9\", description: \"Function Key 9\" },\n                { key: \"F10\", description: \"Function Key 10\" },\n                { key: \"F11\", description: \"Function Key 11\" },\n                { key: \"F12\", description: \"Function Key 12\" },\n                { key: \"F13\", description: \"Function Key 13\" },\n                { key: \"F14\", description: \"Function Key 14\" },\n                { key: \"F15\", description: \"Function Key 15\" },\n                { key: \"F16\", description: \"Function Key 16\" },\n                { key: \"F17\", description: \"Function Key 17\" },\n                { key: \"F18\", description: \"Function Key 18\" },\n                { key: \"F19\", description: \"Function Key 19\" },\n                { key: \"F20\", description: \"Function Key 20\" },\n                { key: \"F21\", description: \"Function Key 21\" },\n                { key: \"F22\", description: \"Function Key 22\" },\n                { key: \"F23\", description: \"Function Key 23\" },\n                { key: \"F24\", description: \"Function Key 24\" }\n            ]\n        },\n        arrows: {\n            name: \"Arrow & Navigation\",\n            description: \"Arrow keys and navigation\",\n            keys: [\n                { key: \"Up\", description: \"Arrow Key: Up\" },\n                { key: \"Down\", description: \"Arrow Key: Down\" },\n                { key: \"Left\", description: \"Arrow Key: Left\" },\n                { key: \"Right\", description: \"Arrow Key: Right\" },\n                { key: \"Home\", description: \"Home\" },\n                { key: \"End\", description: \"End\" },\n                { key: \"PageUp\", description: \"Page Up\" },\n                { key: \"PageDown\", description: \"Page Down\" },\n                { key: \"insert\", description: \"Insert\" },\n                { key: \"delete\", description: \"Delete\" }\n            ]\n        },\n        modifiers: {\n            name: \"Modifier Keys\",\n            description: \"Shift, Ctrl, Alt variations\",\n            keys: [\n                { key: \"LALT\", description: \"Alt (Left)\" },\n                { key: \"RALT\", description: \"Alt (Right)\" },\n                { key: \"LCTRL\", description: \"Control (Left)\" },\n                { key: \"RCTRL\", description: \"Control (Right)\" }\n            ]\n        },\n        symbols: {\n            name: \"Symbol Keys\",\n            description: \"Punctuation and symbols\",\n            keys: [\n                { key: \"[\", description: \"[\" },\n                { key: \"]\", description: \"]\" },\n                { key: \"\\\\\", description: \"\\\\\" },\n                { key: \",\", description: \"Comma (,)\" },\n                { key: \".\", description: \"Period (.)\" },\n                { key: \"/\", description: \"Divide (/)\" },\n                { key: \"`\", description: \"Tilda Key (~)\" }\n            ]\n        },\n        mouse: {\n            name: \"Mouse Controls\",\n            description: \"Mouse buttons and scroll\",\n            keys: [\n                { key: \"Lbutton\", description: \"Mouse Left Press\" },\n                { key: \"Rbutton\", description: \"Mouse Right Press\" },\n                { key: \"Middleclick\", description: \"Mouse Middle Click\" },\n                { key: \"Button1\", description: \"Mouse Button 1\" },\n                { key: \"Button2\", description: \"Mouse Button 2\" },\n                { key: \"Button3\", description: \"Mouse Button 3\" },\n                { key: \"Button4\", description: \"Mouse Button 4\" },\n                { key: \"Button5\", description: \"Mouse Button 5\" },\n                { key: \"Button6\", description: \"Mouse Button 6\" },\n                { key: \"Button7\", description: \"Mouse Button 7\" },\n                { key: \"Button8\", description: \"Mouse Button 8\" },\n                { key: \"Button9\", description: \"Mouse Button 9\" },\n                { key: \"Button10\", description: \"Mouse Button 10\" },\n                { key: \"Wheelplus\", description: \"Mouse Scroll Up\" },\n                { key: \"Wheelminus\", description: \"Mouse Scroll Down\" }\n            ]\n        },\n        gamepad: {\n            name: \"Xbox Controller\",\n            description: \"Xbox/Gamepad controls\",\n            keys: [\n                { key: \"Joy1\", description: \"XBOX Contr [Start]\" },\n                { key: \"Joy2\", description: \"XBOX Contr [Back]\" },\n                { key: \"Joy3\", description: \"XBOX Contr [L Thumb depress]\" },\n                { key: \"Joy4\", description: \"XBOX Contr [R Thumb depress]\" },\n                { key: \"Joy5\", description: \"XBOX Contr [Left Bumper]\" },\n                { key: \"Joy6\", description: \"XBOX Contr [Right Bumper]\" },\n                { key: \"Joy7\", description: \"XBOX Contr [Left Trigger]\" },\n                { key: \"Joy8\", description: \"XBOX Contr [Right Trigger]\" },\n                { key: \"Joy9\", description: \"XBOX Contr [A Button]\" },\n                { key: \"Joy10\", description: \"XBOX Contr [B Button]\" },\n                { key: \"Joy11\", description: \"XBOX Contr [X Button]\" },\n                { key: \"Joy12\", description: \"XBOX Contr [Y Button]\" },\n                { key: \"Joypad_up\", description: \"XBOX Contr [Pad up]\" },\n                { key: \"Joypad_down\", description: \"XBOX Contr [Pad down]\" },\n                { key: \"Joypad_left\", description: \"XBOX Contr [Pad left]\" },\n                { key: \"Joypad_right\", description: \"XBOX Contr [Pad right]\" },\n                { key: \"Lstick_up\", description: \"XBOX Contr [Left Stick up]\" },\n                { key: \"Lstick_down\", description: \"XBOX Contr [Left Stick down]\" },\n                { key: \"Lstick_left\", description: \"XBOX Contr [Left Stick left]\" },\n                { key: \"Lstick_right\", description: \"XBOX Contr [Left Stick right]\" },\n                { key: \"Rstick_up\", description: \"XBOX Contr [Right Stick up]\" },\n                { key: \"Rstick_down\", description: \"XBOX Contr [Right Stick down]\" },\n                { key: \"Rstick_left\", description: \"XBOX Contr [Right Stick left]\" },\n                { key: \"Rstick_right\", description: \"XBOX Contr [Right Stick right]\" }\n            ]\n        }\n    },\n\n    // Validation rules\n    validation: {\n        keyNamePattern: /^[a-zA-Z0-9_+\\-\\s]+$/,\n        aliasNamePattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n        maxCommandsPerKey: 20,\n        maxKeysPerProfile: 100\n    },\n\n    // Application settings\n    settings: {\n        version: \"1.0.0\",\n        autoSave: true,\n        maxUndoSteps: 50,\n        defaultMode: \"space\"\n    },\n\n    // STO Variables that can be used in commands\n    variables: {\n        target: {\n            variable: \"$Target\",\n            description: \"Replaced with the name of your current target\",\n                                    example: 'team Target [$Target]',\n            usableIn: [\"communication\", \"custom\", \"aliases\"],\n            notes: \"If your target's name is 'froggyMonster', this will output 'Target [froggyMonster]'\"\n        }\n    }\n};\n\n// Make available globally\nwindow.STO_DATA = STO_DATA;\n\n// Create flattened data structures for backward compatibility and testing\nwindow.COMMAND_CATEGORIES = STO_DATA.commands;\n\n// Flatten all commands into a single object\nwindow.COMMANDS = {};\nObject.entries(STO_DATA.commands).forEach(([categoryKey, category]) => {\n    Object.entries(category.commands).forEach(([commandKey, command]) => {\n        window.COMMANDS[commandKey] = {\n            ...command,\n            category: categoryKey,\n            key: commandKey\n        };\n    });\n});\n\n// Key layouts (if they exist in STO_DATA, otherwise create basic structure)\nwindow.KEY_LAYOUTS = STO_DATA.keyLayouts || {\n    qwerty: {\n        name: \"QWERTY\",\n        rows: [\n            [\n                { key: \"Escape\", display: \"Esc\" },\n                { key: \"F1\", display: \"F1\" },\n                { key: \"F2\", display: \"F2\" },\n                { key: \"F3\", display: \"F3\" },\n                { key: \"F4\", display: \"F4\" },\n                { key: \"F5\", display: \"F5\" },\n                { key: \"F6\", display: \"F6\" },\n                { key: \"F7\", display: \"F7\" },\n                { key: \"F8\", display: \"F8\" },\n                { key: \"F9\", display: \"F9\" },\n                { key: \"F10\", display: \"F10\" },\n                { key: \"F11\", display: \"F11\" },\n                { key: \"F12\", display: \"F12\" }\n            ],\n            [\n                { key: \"`\", display: \"`\" },\n                { key: \"1\", display: \"1\" },\n                { key: \"2\", display: \"2\" },\n                { key: \"3\", display: \"3\" },\n                { key: \"4\", display: \"4\" },\n                { key: \"5\", display: \"5\" },\n                { key: \"6\", display: \"6\" },\n                { key: \"7\", display: \"7\" },\n                { key: \"8\", display: \"8\" },\n                { key: \"9\", display: \"9\" },\n                { key: \"0\", display: \"0\" },\n                { key: \"-\", display: \"-\" },\n                { key: \"=\", display: \"=\" },\n                { key: \"Backspace\", display: \"Backspace\" }\n            ],\n            [\n                { key: \"Tab\", display: \"Tab\" },\n                { key: \"Q\", display: \"Q\" },\n                { key: \"W\", display: \"W\" },\n                { key: \"E\", display: \"E\" },\n                { key: \"R\", display: \"R\" },\n                { key: \"T\", display: \"T\" },\n                { key: \"Y\", display: \"Y\" },\n                { key: \"U\", display: \"U\" },\n                { key: \"I\", display: \"I\" },\n                { key: \"O\", display: \"O\" },\n                { key: \"P\", display: \"P\" },\n                { key: \"[\", display: \"[\" },\n                { key: \"]\", display: \"]\" },\n                { key: \"\\\\\", display: \"\\\\\" }\n            ],\n            [\n                { key: \"CapsLock\", display: \"Caps\" },\n                { key: \"A\", display: \"A\" },\n                { key: \"S\", display: \"S\" },\n                { key: \"D\", display: \"D\" },\n                { key: \"F\", display: \"F\" },\n                { key: \"G\", display: \"G\" },\n                { key: \"H\", display: \"H\" },\n                { key: \"J\", display: \"J\" },\n                { key: \"K\", display: \"K\" },\n                { key: \"L\", display: \"L\" },\n                { key: \";\", display: \";\" },\n                { key: \"'\", display: \"'\" },\n                { key: \"Enter\", display: \"Enter\" }\n            ],\n            [\n                { key: \"Shift\", display: \"Shift\" },\n                { key: \"Z\", display: \"Z\" },\n                { key: \"X\", display: \"X\" },\n                { key: \"C\", display: \"C\" },\n                { key: \"V\", display: \"V\" },\n                { key: \"B\", display: \"B\" },\n                { key: \"N\", display: \"N\" },\n                { key: \"M\", display: \"M\" },\n                { key: \",\", display: \",\" },\n                { key: \".\", display: \".\" },\n                { key: \"/\", display: \"/\" },\n                { key: \"Shift\", display: \"Shift\" }\n            ],\n            [\n                { key: \"Ctrl\", display: \"Ctrl\" },\n                { key: \"Alt\", display: \"Alt\" },\n                { key: \"Space\", display: \"Space\" },\n                { key: \"Alt\", display: \"Alt\" },\n                { key: \"Ctrl\", display: \"Ctrl\" }\n            ]\n        ]\n    }\n};\n\n// Default settings\nwindow.DEFAULT_SETTINGS = {\n    keyLayout: \"qwerty\",\n    autoSave: STO_DATA.settings?.autoSave || true,\n    showTooltips: true,\n    exportFormat: \"txt\",\n    maxUndoSteps: STO_DATA.settings?.maxUndoSteps || 50,\n    defaultMode: STO_DATA.settings?.defaultMode || \"space\"\n};\n\n// Sample profiles\nwindow.SAMPLE_PROFILES = Object.values(STO_DATA.defaultProfiles).map(profile => ({\n    id: profile.name.toLowerCase().replace(/\\s+/g, '_'),\n    name: profile.name,\n    description: profile.description,\n    currentEnvironment: profile.currentEnvironment || 'space',\n    builds: profile.builds || {\n        space: { keys: {} },\n        ground: { keys: {} }\n    },\n    // Maintain backward compatibility\n    mode: profile.currentEnvironment || 'space',\n    keybinds: profile.builds?.space?.keys || {},\n    aliases: profile.builds?.space?.aliases || {},\n    created: new Date().toISOString(),\n    modified: new Date().toISOString()\n}));\n\n// Sample aliases\nwindow.SAMPLE_ALIASES = {\n    attack_sequence: {\n        name: \"Attack Sequence\",\n        commands: [\"Target_Enemy_Near\", \"FireAll\"],\n        description: \"Target and attack nearest enemy\"\n    },\n    defensive_sequence: {\n        name: \"Defensive Sequence\", \n        commands: [\"Target_Self\", \"+power_exec Distribute_Shields\"],\n        description: \"Self-target and activate defensive abilities\"\n    },\n    heal_sequence: {\n        name: \"Healing Sequence\",\n        commands: [\"Target_Self\", \"+STOTrayExecByTray 3 0 $$ +STOTrayExecByTray 3 1\"],\n        description: \"Emergency healing and repair sequence\"\n    }\n};\n\n// Tray configuration\nwindow.TRAY_CONFIG = {\n    maxTrays: 10,\n    slotsPerTray: 10,\n    defaultTray: 0,\n    maxCommandsPerSlot: 1\n};\n\n// Utility functions for data access\nwindow.getCommandsByCategory = function(category) {\n    if (!category || !STO_DATA.commands[category]) {\n        return [];\n    }\n    return Object.values(STO_DATA.commands[category].commands);\n};\n","/**\r\n * Shared error classes for STO Tools Keybind Manager\r\n */\r\n\r\nclass STOError extends Error {\r\n    constructor(message, code = 'STO_ERROR') {\r\n        super(message);\r\n        this.name = 'STOError';\r\n        this.code = code;\r\n    }\r\n}\r\n\r\nclass VertigoError extends STOError {\r\n    constructor(message, code = 'VFX_ERROR') {\r\n        super(message, code);\r\n        this.name = 'VertigoError';\r\n    }\r\n}\r\n\r\nclass InvalidEnvironmentError extends VertigoError {\r\n    constructor(environment) {\r\n        super(`Invalid environment '${environment}'. Valid environments are: space, ground`, 'INVALID_ENVIRONMENT');\r\n        this.environment = environment;\r\n    }\r\n}\r\n\r\nclass InvalidEffectError extends VertigoError {\r\n    constructor(effectName, environment) {\r\n        super(`Invalid effect '${effectName}' for environment '${environment}'`, 'INVALID_EFFECT');\r\n        this.effectName = effectName;\r\n        this.environment = environment;\r\n    }\r\n}\r\n\r\nexport { STOError, VertigoError, InvalidEnvironmentError, InvalidEffectError };\r\n\r\nif (typeof window !== 'undefined') {\r\n    window.STOError = STOError;\r\n    window.VertigoError = VertigoError;\r\n    window.InvalidEnvironmentError = InvalidEnvironmentError;\r\n    window.InvalidEffectError = InvalidEffectError;\r\n}\r\n","// STO Tools Keybind Manager - Vertigo Effects Data\r\n// Visual effects data for disabling via dynFxSetFXExlusionList\r\n\r\n// Error classes are defined in errors.js and exposed globally\r\n\r\nexport const VFX_EFFECTS = {\r\n    space: [\r\n        { label: \"Advanced inhibiting turret shield bubble\", effect: \"Fx_Rep_Temporal_Ship_Chroniton_Stabilization_Proc\" },\r\n        { label: \"Approaching Agony\", effect: \"Cfx_Lockboxfx_Cb29_Ship_Agony_Field\" },\r\n        { label: \"Attack Pattern Alpha\", effect: \"Fx_Ship_Tac_Attackpatternalpha\" },\r\n        { label: \"Attack Pattern Beta\", effect: \"Fx_Ship_Tac_Attackpatternbeta\" },\r\n        { label: \"Attack Pattern Delta\", effect: \"Fx_Ship_Tac_Attackpatterndelta\" },\r\n        { label: \"Attack Pattern Omega\", effect: \"Fx_Ship_Tac_Attackpatternomega\" },\r\n        { label: \"Beacon of Kahless\", effect: \"Fx_Er_Bbs_Beacon_Of_Kahless_Flash\" },\r\n        { label: \"Boost Morale\", effect: \"Fx_Ship_Spec_Powers_Command_Boost_Morale_Bufffx,Cfx_Ship_Spec_Powers_Command_Boost_Morale_Activate\" },\r\n        { label: \"Brace for Impact\", effect: \"Fx_Bop_Braceforimpact,Cfx_Ship_Sci_Hazardemitter_Buff\" },\r\n        { label: \"Breath of the Dragon\", effect: \"Fx_Ship_Cp_T6_Hysperian_Dragonbreath\" },\r\n        { label: \"Call Emergency Artillery\", effect: \"Fx_Ships_Boffs_Cmd_Callartillery_Activate,Fx_Ships_Boffs_Cmd_Callartillery_Explosion\" },\r\n        { label: \"Competitive Engine Buff Effect\", effect: \"Fx_Ship_Mod_Haste_Buff_Gen\" },\r\n        { label: \"Co-opt Energy Weapons\", effect: \"Fx_Capt_Powers_Ship_Sci_Coopt_Energy_Wep_Aoe,Cfx_Capt_Powers_Ship_Sci_Coopt_Energy_Wep_Area\" },\r\n        { label: \"Concentrate Fire Power\", effect: \"Fx_Ships_Boff_Cmd_Confire_Activatefx,Cfx_Ships_Boff_Cmd_Confire_Mark\" },\r\n        { label: \"Cnidarian Jellyfish AoE\", effect: \"Cfx_Ship_Sp_T6_Jellyfish_Cnidarian_Defense_Aoe\" },\r\n        { label: \"Dark Matter Anomaly\", effect: \"Cfx_Ship_Console_Dark_Matter_Anamoly_Costumefx\" },\r\n        { label: \"Delphic Tear\", effect: \"Fx_Ships_Consoles_Cb21_Delphictear\" },\r\n        { label: \"Destabilising Resonance Beam\", effect: \"P_Er_Ship_Destabilizing_Resonance_Beam_Aoe_Particles\" },\r\n        { label: \"Elachi Walker Combat Pet (3 effects)\", effect: \"Soundfx_Elachiwalker_Footstep_Pet,Fx_Er_Tfo_Elachi_Walker_Combat_Pet_Deathfx,Soundfx_Elachiwalker_Petsummon\" },\r\n        { label: \"Electrified Anomalies Trait\", effect: \"Fx_Tp_Ship_T6_Risian_Science_Electrified_Anomalies_Arc_Foe,Fx_Tp_Ship_T6_Risian_Science_Electrified_Anomalies_Arc_Friend\" },\r\n        { label: \"Emergency Pwr to Shields\", effect: \"Fx_Ship_Eng_Emergencypowershields\" },\r\n        { label: \"Emergency Pwr to Wep\", effect: \"Fx_Ship_Eng_Emergencypowerweapons\" },\r\n        { label: \"Engineering Fleet III\", effect: \"Fx_Ship_Boff_Fleet_Capt_Engineering_Teambuff\" },\r\n        { label: \"Engineering Team\", effect: \"Cfx_Ship_Crewteam_Engineeringteam_Buff\" },\r\n        { label: \"EPS Power Transfer\", effect: \"Cfx_Ship_Eng_Epspowertransfer_Target\" },\r\n        { label: \"Focus Frenzy\", effect: \"Fx_Skilltree_Ship_Ffrenzy_Activatefx\" },\r\n        { label: \"Go Down Fighting\", effect: \"Fx_Bop_Godownfighting\" },\r\n        { label: \"Hangar Pet Rank Up\", effect: \"Fx_Ship_Levelup_Fighter_Rankup\" },\r\n        { label: \"Hazard Emitters\", effect: \"Cfx_Ship_Sci_Hazardemitter_Buff\" },\r\n        { label: \"Intel Fleet III\", effect: \"Fx_Ship_Boff_Fleet_Capt_Intel_Teambuff\" },\r\n        { label: \"Intel Team (uses 3 effects)\", effect: \"Cfx_Ship_Cruiser_Auras_Taunt,Cfx_Spc_Boffpowers_Intel_Intelteam_Buff,Fx_Ships_Intel_Lyinginwait\" },\r\n        { label: \"Kemocite on ship animation\", effect: \"C1_E_Ship_Xindi_Lockboxcb15_Kemocite_Weaponry_Bufffx\" },\r\n        { label: \"Kemocite HitFX ring\", effect: \"Fx_Ship_Xindi_Lockboxcb15_Kemocite_Weaponry_Aoe_Proc\" },\r\n        { label: \"Kentari Ferocity Weapons Glow\", effect: \"P_Trait_Powers_Ship_Lukari_Colony_Kentari_Ferocity_Weapons_Glow\" },\r\n        { label: \"Kobayashi Maru powerup silenced\", effect: \"Fx_Evr_Kmaru_Ship_Dev_Resupply_Drop_Powerup_Bufffx,Fx_Evr_Kmaru_Ship_Dev_Resupply_Drop_Powerup\" },\r\n        { label: \"Less Obvious Loot Drop Common\", effect: \"Cfx_Space_Loot_Drop_Common_Costumefx\" },\r\n        { label: \"Less Obvious Loot Drop Uncommon\", effect: \"Cfx_Space_Loot_Drop_Uncommon_Costumefx\" },\r\n        { label: \"Less Obvious Loot Drop Rare\", effect: \"Cfx_Space_Loot_Drop_Rare_Costumefx\" },\r\n        { label: \"Less Obvious Loot Drop Very Rare\", effect: \"Cfx_Space_Loot_Drop_Veryrare_Costumefx\" },\r\n        { label: \"Less Obvious Loot Drop Lock Box\", effect: \"Cfx_Space_Loot_Drop_Chancebox_Costumefx\" },\r\n        { label: \"Less Obvious Loot Drop Dilithium\", effect: \"Cfx_Space_Loot_Drop_Dilithium_Costumefx\" },\r\n        { label: \"Miraculous Repairs\", effect: \"Fx_Bop_Miracleworker\" },\r\n        { label: \"MW - Align Shield Frequencies\", effect: \"Fx_Spc_Boffpowers_Miracleworker_Alignshieldfrequencies_Hitfx\" },\r\n        { label: \"MW - Destabilize Warp Core\", effect: \"Fx_Spc_Boffpowers_Miracleworker_Destabilizewarpcore\" },\r\n        { label: \"MW - Exceed rated limits\", effect: \"Fx_Spc_Boffpowers_Miracleworker_Energyweaponsexceedratedlimits_Dot_Hitfx,Fx_Spc_Boffpowers_Miracleworker_Energyweaponsexceedratedlimits\" },\r\n        { label: \"MW - Fix em up (and other green glows)\", effect: \"Fx_Ship_Mod_Damage_Buff\" },\r\n        { label: \"MW - Mixed Armaments Synergy\", effect: \"Fx_Spc_Boffpowers_Miracleworker_Mixedarmamentssynergy\" },\r\n        { label: \"MW - Narrow Sensor Bands\", effect: \"Fx_Spc_Boffpowers_Miracleworker_Narrowsensorbands\" },\r\n        { label: \"MW - Null Pointer Flood\", effect: \"Fx_Spc_Boffpowers_Miracleworker_Nullpointerflood\" },\r\n        { label: \"MW - Reroute shilds to Hull containment\", effect: \"Fx_Spc_Boffpowers_Miracleworker_Rerouteshieldstohullcontainment,Cfx_Spc_Boffpowers_Miracleworker_Rerouteshieldstohullcontainment\" },\r\n        { label: \"Nadion Inversion\", effect: \"Fx_Bop_Nadioinversion\" },\r\n        { label: \"Nanoprobe Shield Generator (Dyson Rep)\", effect: \"Cfx_Rp_Dyson_Ship_Reactive_Shielding\" },\r\n        { label: \"Neutronic Eddies\", effect: \"Cfx_Ships_Cp_T6_Risian_Science_Neutronic_Edides_Costumefx\" },\r\n        { label: \"Overwhelm Emitters\", effect: \"Fx_Ships_Boff_Cmd_Owemitters_Activatefx\" },\r\n        { label: \"Photonic Officer\", effect: \"Fx_Bop_Photonicofficer_activate\" },\r\n        { label: \"PILOT - Clean Getaway\", effect: \"Fx_Spc_Boff_Pilot_Cleangetaway_Activate\" },\r\n        { label: \"PILOT - Coolant Ignition (mostly)\", effect: \"Fx_Spc_Boff_Pilot_Coolantinjection_Ignite,Fx_Spc_Boff_Pilot_Coolantinjection_Costumefx\" },\r\n        { label: \"PILOT - Deploy Countermeasures\", effect: \"Fx_Spc_Boff_Pilot_Deploycm\" },\r\n        { label: \"PILOT - Fly her apart\", effect: \"Cfx_Spc_Boff_Pilot_Flyapart_Dot\" },\r\n        { label: \"PILOT - Form Up (mostly)\", effect: \"Fx_Spc_Boff_Pilot_Formup_Teleport,Fx_Spc_Boff_Pilot_Formup_Buff_Wepbuff\" },\r\n        { label: \"PILOT - hold Together\", effect: \"Cfx_Spc_Boff_Pilot_Holdtogether\" },\r\n        { label: \"PILOT - Lambda\", effect: \"Fx_Ship_Mod_Damage_Buff,Fx_Spc_Boff_Pilot_Aplambda_Bufffx,Fx_Spc_Boff_Pilot_Aplambda\" },\r\n        { label: \"PILOT - Lock Trajectory\", effect: \"Fx_Spc_Boff_Pilot_Flares_Switch,Cfx_Spc_Boff_Pilot_Locktrajectory\" },\r\n        { label: \"PILOT - Pilot Team\", effect: \"Cfx_Spc_Boff_Pilot_Pilotteam_Buff\" },\r\n        { label: \"PILOT - Reroute Reserves to Weapons\", effect: \"Fx_Spc_Boff_Pilot_Reroute_Wepbuff,Fx_Spc_Boff_Pilot_Reroute_Activate\" },\r\n        { label: \"PILOT - Subspace Boom\", effect: \"Cfx_Spc_Boff_Pilot_Ssboom_Costumefx_Neverdie,Fx_Spc_Boff_Pilot_Ssboom_Boom\" },\r\n        { label: \"Plasma Storm\", effect: \"Cfx_Ship_Cp_Cb27_Generate_Plasma_Storm_Costumefx\" },\r\n        { label: \"Rally Point Marker\", effect: \"Cfx_Ships_Boff_Cmd_Rallypoint_Marker\" },\r\n        { label: \"Reverse Shield Polarity\", effect: \"Cfx_Ship_Eng_Reverseshieldpolarity_Buff\" },\r\n        { label: \"Scattering Field\", effect: \"Cfx_Ship_Sci_Dampeningfield_Aoe,Cfx_Ship_Sci_Dampeningfield_Shield_Buff\" },\r\n        { label: \"Science Team\", effect: \"Cfx_Ship_Crewteam_Scienceteam_Buff\" },\r\n        { label: \"Science Fleet III\", effect: \"Fx_Ship_Boff_Fleet_Capt_Science_Teambuff\" },\r\n        { label: \"Soliton Wave Generator (uses 4 effects)\", effect: \"Cfx_Ship_Risa_Loot_Soliton_Wave_Suckfx_Target,Cfx_Ship_Risa_Loot_Soliton_Wave_Suckfx,Cfx_Ship_Risa_Loot_Soliton_Wave_Out,Cfx_Ship_Risa_Loot_Soliton_Wave_In\" },\r\n        { label: \"Spore Infused Anomalies\", effect: \"Fx_Trait_Powers_Ship_T6_Somerville_Sia_Blast\" },\r\n        { label: \"Subspace Vortex Teleport Effect\", effect: \"Fx_Ship_Xindi_Lockboxcb15_Subspace_Vortex_Teleport\" },\r\n        { label: \"Suppression Barrage\", effect: \"Cfx_Ships_Boff_Cmd_Sbarrage_Buff\" },\r\n        { label: \"Surgical Strikes\", effect: \"Fx_Spc_Boffpowers_Int_Sstrikes_Buff\" },\r\n        { label: \"Tactical Fleet III\", effect: \"Fx_Ship_Boff_Fleet_Capt_Tactical_Teambuff\" },\r\n        { label: \"Tactical Initiative\", effect: \"Fx_Bop_Tacticalinitiative\" },\r\n        { label: \"Tactical Team\", effect: \"Cfx_Ship_Crewteam_Tacticalteam_Buff\" },\r\n        { label: \"Target Rich Environment\", effect: \"Fx_Ship_Trait_Cb20_Targetrichenvironment\" },\r\n        { label: \"Temporal Anchor\", effect: \"Cfx_Ship_Trait_Temporal_Anchor_Costumefx\" },\r\n        { label: \"Temporal Vortex Probe\", effect: \"C1_Eventreward_Fcd_Temporal_Vortex_Costumefx,Fx_Eventreward_Fcd_Temporal_Vortex_Blast\" },\r\n        { label: \"Timeline Collapse (5 effects!)\", effect: \"Cfx_Ship_Temp_Tcollapse_Costume,Fx_Ship_Temp_Tcollapse_Hitfx,Fx_Ship_Temp_Tcollapse_Explode,Fx_Ship_Temp_Tcollapse_Beamhitfx,Fx_Ship_Temp_Tcollapse\" },\r\n        { label: \"V'Ger Torpedo (Volatile Digital Transformation)\", effect: \"Fx_Ship_Torpedo_Plasma_Vger_Anniv_Explode,Cfx_Ship_Torpedo_Vger_Disintegrate_In_Tintable\" },\r\n        { label: \"Viral Impulse Burst\", effect: \"Fx_Spc_Boffpowers_int_Viralimpulse\" },\r\n        { label: \"Vulcan Jelly Fish Eject Red Matter\", effect: \"Cfx_ship_jellyfish_eject_red_matter_costumefx\" },\r\n        { label: \"Vulnerability Assessment Sweep\", effect: \"Fx_Capt_Powers_Ship_Tac_Vulnerability_Assessment_Sweep\" }\r\n    ],\r\n    ground: [\r\n        { label: \"Agony Field Generator\", effect: \"Fx_Ground_Lockboxfx_Cb29_Agony_Field_Generator\" },\r\n        { label: \"Anti-time ground\", effect: \"Cfx_Rep_Temp_Char_Kit_Sci_Antitime_Entanglement_Field_Costumefx\" },\r\n        { label: \"Ball Lightning\", effect: \"Cfx_Char_Kit_Univ_Sum_Ball_Lightning_Costumefx\" },\r\n        { label: \"Chaos Blaze\", effect: \"Cfx_Char_Chaos_Blaze_Aoe\" },\r\n        { label: \"Conussive Tachyon Emission\", effect: \"fx_Char_Delta_Rep_Cte_Aoe\" },\r\n        { label: \"Disco Ball (Party Bomb)\", effect: \"Cfx_Char_Device_Partybomb\" },\r\n        { label: \"Dot-7 Drone Support Field\", effect: \"Cfx_Er_Bbs_char_Dot7_Drone_support_Field\" },\r\n        { label: \"Eng Proficiency (Character Glow)\", effect: \"Cfx_Ground_Kit_Eng_Engineeringproficiency\" },\r\n        { label: \"Ever Watchful\", effect: \"Cfx_Ground_Kit_Tac_Overwatch_Bufffx,Fx_Ground_Kit_Tac_Overwatch_Activatefx\" },\r\n        { label: \"Herald AP Beam Projector ground weapon\", effect: \"Fx_Char_Icoenergy_Rifle_Energyblast,Fx_Char_Icoenergy_Assault_Beam_Lockbox\" },\r\n        { label: \"Lava Floor\", effect: \"Cfx_Char_Kit_Univ_Sum_The_Floor_Is_Lava_Costumefx,Cfx_Char_Kit_Univ_Sum_The_Floor_Is_Lava_Geyser\" },\r\n        { label: \"Less Obvious Loot Drop Common\", effect: \"Cfx_Gnd_Loot_Drop_Common_Costumefx\" },\r\n        { label: \"Less Obvious Loot Drop Uncommon\", effect: \"Cfx_Gnd_Loot_Drop_Uncommon_Costumefx\" },\r\n        { label: \"Less Obvious Loot Drop Rare\", effect: \"Cfx_Gnd_Loot_Drop_Rare_Costumefx\" },\r\n        { label: \"Less Obvious Loot Drop Very Rare\", effect: \"Cfx_Gnd_Loot_Drop_Veryrare_Costumefx\" },\r\n        { label: \"Less Obvious Loot Drop Lock Box\", effect: \"Cfx_Gnd_Loot_Drop_Chancebox_Costumefx\" },\r\n        { label: \"Less Obvious Loot Drop Dilithium\", effect: \"Cfx_Gnd_Loot_Drop_Dilithium_Costumefx\" },\r\n        { label: \"Motivation (Tac Kit Module)\", effect: \"Cfx_Ground_Kit_Tac_Motivation_Buff,Fx_Ground_Kit_Tac_Motivation\" },\r\n        { label: \"Orbital Devastation\", effect: \"Fx_Char_Voth_Orbitalstrike_Chasebeam\" },\r\n        { label: \"Pahvan Crystal Prism noisy tether\", effect: \"Cfx_Er_Tfo_Pahvan_Crystal_Prism_Tether_Beam\" },\r\n        { label: \"Rally Cry\", effect: \"Fx_Ground_Kit_Tac_Rallycry\" },\r\n        { label: \"Red Riker Gun Sound effect\", effect: \"Cfx_Ep_Winterevent_Redriker_Sniper_Chargefx\" },\r\n        { label: \"Scientific Aptitude (character glow)\", effect: \"Cfx_Ground_Kit_Sci_Scientificaptitude\" },\r\n        { label: \"Solar Gateway\", effect: \"Fx_Char_Ico_Capt_Portal,Fx_Char_Ico_Capt_Portal_Sunbeam\" },\r\n        { label: \"Smoke Grenade\", effect: \"Fx_Char_Grenade_smoke_costume,Fx_Char_Grenade_Smoke_Explode\" },\r\n        { label: \"Sompek Energy Rebounder\", effect: \"Fx_Env_Gnd_Qadhos_Arena_Phaserhazard_Cylinder_Turret\" },\r\n        { label: \"Strike Team III (character red glow)\", effect: \"Cfx_Ground_Kit_Tac_Striketeam\" },\r\n        { label: \"Symphony of Lightning Char Glow\", effect: \"Fx_Er_Featured_Char_Kuumaarke_Wristgun_Tir_bufffx\" },\r\n        { label: \"Symphony of Lightning Drone AoE\", effect: \"Cfx_Er_Featured_Char_Kuumaarke_Set_Symphony_Of_Lightning_Drone_Aoe\" },\r\n        { label: \"Symphony of Lightning STRIKE\", effect: \"Fx_Er_Featured_Char_Kuumaarke_Set_Symphony_Of_Lightning_Strike\" },\r\n        { label: \"Trajectory Bending\", effect: \"Cfx_Char_Xindi_Cb15_Tac_Kit_Trajectory_Bending\" },\r\n        { label: \"Visual Dampening Field\", effect: \"Cfx_Char_Trait_Mirror_Vdfield\" }\r\n    ]\r\n};\r\n\r\n// Vertigo management class\r\nexport default class VertigoManager {\r\n    constructor() {\r\n        this.selectedEffects = {\r\n            space: new Set(),\r\n            ground: new Set()\r\n        };\r\n        this.showPlayerSay = false;\r\n    }\r\n\r\n    // Generate the alias command for the given environment\r\n    generateAlias(environment) {\r\n        if (!this.selectedEffects[environment]) {\r\n            throw new InvalidEnvironmentError(environment);\r\n        }\r\n        \r\n        const effects = Array.from(this.selectedEffects[environment]);\r\n        if (effects.length === 0) return '';\r\n\r\n        let aliasName = `dynFxSetFXExlusionList_${environment.charAt(0).toUpperCase() + environment.slice(1)}`;\r\n        let command = `alias ${aliasName} <& dynFxSetFXExlusionList ${effects.join(',')}`;\r\n        \r\n        if (this.showPlayerSay) {\r\n            command += ' $$ PlayerSay VFX Supression Loaded';\r\n        }\r\n        \r\n        command += ' &>';\r\n        return command;\r\n    }\r\n\r\n    // Get selected effects for an environment\r\n    getSelectedEffects(environment) {\r\n        if (!this.selectedEffects[environment]) {\r\n            throw new InvalidEnvironmentError(environment);\r\n        }\r\n        return Array.from(this.selectedEffects[environment]);\r\n    }\r\n\r\n    // Toggle an effect\r\n    toggleEffect(environment, effectName) {\r\n        if (!this.selectedEffects[environment]) {\r\n            throw new InvalidEnvironmentError(environment);\r\n        }\r\n        \r\n        if (!effectName) {\r\n            throw new InvalidEffectError(effectName, environment);\r\n        }\r\n        \r\n        if (this.selectedEffects[environment].has(effectName)) {\r\n            this.selectedEffects[environment].delete(effectName);\r\n        } else {\r\n            this.selectedEffects[environment].add(effectName);\r\n        }\r\n    }\r\n\r\n    // Clear all selected effects\r\n    clearAllEffects() {\r\n        this.selectedEffects.space.clear();\r\n        this.selectedEffects.ground.clear();\r\n    }\r\n\r\n    // Set all effects for an environment\r\n    selectAllEffects(environment) {\r\n        if (!VFX_EFFECTS[environment]) {\r\n            throw new InvalidEnvironmentError(environment);\r\n        }\r\n        \r\n        if (!this.selectedEffects[environment]) {\r\n            throw new InvalidEnvironmentError(environment);\r\n        }\r\n        \r\n        VFX_EFFECTS[environment].forEach(effect => {\r\n            this.selectedEffects[environment].add(effect.effect);\r\n        });\r\n    }\r\n\r\n    // Get effect count for an environment\r\n    getEffectCount(environment) {\r\n        if (!this.selectedEffects[environment]) {\r\n            throw new InvalidEnvironmentError(environment);\r\n        }\r\n        return this.selectedEffects[environment].size;\r\n    }\r\n\r\n    // Check if effect is selected\r\n    isEffectSelected(environment, effectName) {\r\n        if (!this.selectedEffects[environment]) {\r\n            throw new InvalidEnvironmentError(environment);\r\n        }\r\n        return this.selectedEffects[environment].has(effectName);\r\n    }\r\n\r\n    // Save state to current profile\r\n    saveState(profile) {\r\n        if (!profile.vertigoSettings) {\r\n            profile.vertigoSettings = {};\r\n        }\r\n        \r\n        profile.vertigoSettings = {\r\n            selectedEffects: {\r\n                space: Array.from(this.selectedEffects.space),\r\n                ground: Array.from(this.selectedEffects.ground)\r\n            },\r\n            showPlayerSay: this.showPlayerSay\r\n        };\r\n    }\r\n\r\n    // Load state from current profile\r\n    loadState(profile) {\r\n        if (profile && profile.vertigoSettings) {\r\n            const settings = profile.vertigoSettings;\r\n            \r\n            // Restore selected effects\r\n            this.selectedEffects.space = new Set(settings.selectedEffects?.space || []);\r\n            this.selectedEffects.ground = new Set(settings.selectedEffects?.ground || []);\r\n            \r\n            // Restore PlayerSay setting\r\n            this.showPlayerSay = settings.showPlayerSay || false;\r\n        } else {\r\n            // Reset to defaults if no saved state\r\n            this.selectedEffects.space.clear();\r\n            this.selectedEffects.ground.clear();\r\n            this.showPlayerSay = false;\r\n        }\r\n    }\r\n}\r\n\r\n// Global vertigo manager instance\r\n","import { DISPLAY_VERSION } from \"./constants.js\";\r\n/**\r\n * Version display management\r\n */\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Update version in header\r\n    const appVersionElement = document.getElementById('appVersion');\r\n    if (appVersionElement) {\r\n        appVersionElement.textContent = DISPLAY_VERSION;\r\n    }\r\n\r\n    // Update version in about modal\r\n    const aboutVersionElement = document.getElementById('aboutVersion');\r\n    if (aboutVersionElement) {\r\n        aboutVersionElement.textContent = DISPLAY_VERSION;\r\n    }\r\n});\r\n","import './constants.js';\r\nimport './eventBus.js';\r\nimport './data.js';\r\nimport './errors.js';\r\nimport STOStorage from './storage.js';\r\nimport STOProfileManager from './profiles.js';\r\nimport STOKeybindFileManager from './keybinds.js';\r\nimport STOAliasManager from './aliases.js';\r\nimport STOExportManager from './export.js';\r\nimport STOModalManager from './modalManager.js';\r\nimport STOUIManager from './ui.js';\r\nimport STOCommandManager from './commands.js';\r\nimport STOFileExplorer from './fileexplorer.js';\r\nimport VertigoManager, { VFX_EFFECTS } from './vertigo_data.js';\r\nimport STOToolsKeybindManager from './app.js';\r\nimport './version.js';\r\n\r\nconst stoStorage = new STOStorage();\r\nconst stoProfiles = new STOProfileManager();\r\nconst stoKeybinds = new STOKeybindFileManager();\r\nconst stoAliases = new STOAliasManager();\r\nconst stoExport = new STOExportManager();\r\nconst modalManager = new STOModalManager();\r\nconst stoUI = new STOUIManager();\r\nconst stoCommands = new STOCommandManager();\r\nconst stoFileExplorer = new STOFileExplorer();\r\nconst vertigoManager = new VertigoManager();\r\nObject.assign(window, {\r\n  stoStorage,\r\n  stoProfiles,\r\n  stoKeybinds,\r\n  stoAliases,\r\n  stoExport,\r\n  modalManager,\r\n  stoUI,\r\n  stoCommands,\r\n  stoFileExplorer,\r\n  vertigoManager,\r\n  VFX_EFFECTS,\r\n  VERTIGO_EFFECTS: VFX_EFFECTS\r\n});\r\n\r\nconst app = new STOToolsKeybindManager();\r\nwindow.app = app;\r\n\r\neventBus.on('sto-app-ready', () => {\r\n  stoProfiles.init();\r\n  stoKeybinds.init();\r\n  stoAliases.init();\r\n  stoExport.init();\r\n  stoFileExplorer.init();\r\n});\r\n","// STO Tools Keybind Manager - Storage Layer\r\n// Handles localStorage persistence and data management\r\n\r\nexport default class STOStorage {\r\n    constructor() {\r\n        this.storageKey = 'sto_keybind_manager';\r\n        this.backupKey = 'sto_keybind_manager_backup';\r\n        this.settingsKey = 'sto_keybind_settings';\r\n        this.version = '1.0.0';\r\n        \r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        // Check if we need to migrate old data\r\n        this.migrateData();\r\n        \r\n        // Ensure we have basic structure\r\n        this.ensureStorageStructure();\r\n    }\r\n\r\n    // Get all data from storage\r\n    getAllData() {\r\n        try {\r\n            const data = localStorage.getItem(this.storageKey);\r\n            const resetFlag = localStorage.getItem('sto_app_reset');\r\n            \r\n            if (!data) {\r\n                // If reset flag exists, return empty structure instead of default data\r\n                if (resetFlag) {\r\n                    localStorage.removeItem('sto_app_reset');\r\n                    return this.getEmptyData();\r\n                }\r\n                return this.getDefaultData();\r\n            }\r\n            \r\n            const parsed = JSON.parse(data);\r\n            \r\n            // Validate data structure\r\n            if (!this.isValidDataStructure(parsed)) {\r\n                return this.getDefaultData();\r\n            }\r\n            \r\n            return parsed;\r\n        } catch (error) {\r\n            console.error('Error loading data from storage:', error);\r\n            return this.getDefaultData();\r\n        }\r\n    }\r\n\r\n    // Save all data to storage\r\n    saveAllData(data) {\r\n        try {\r\n            // Create backup of current data\r\n            this.createBackup();\r\n            \r\n            // Add metadata\r\n            const dataWithMeta = {\r\n                ...data,\r\n                version: this.version,\r\n                lastModified: new Date().toISOString(),\r\n                lastBackup: new Date().toISOString()\r\n            };\r\n            \r\n            localStorage.setItem(this.storageKey, JSON.stringify(dataWithMeta));\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error saving data to storage:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Get specific profile\r\n    getProfile(profileId) {\r\n        const data = this.getAllData();\r\n        return data.profiles[profileId] || null;\r\n    }\r\n\r\n    // Save specific profile\r\n    saveProfile(profileId, profile) {\r\n        const data = this.getAllData();\r\n        data.profiles[profileId] = {\r\n            ...profile,\r\n            lastModified: new Date().toISOString()\r\n        };\r\n        return this.saveAllData(data);\r\n    }\r\n\r\n    // Delete profile\r\n    deleteProfile(profileId) {\r\n        const data = this.getAllData();\r\n        if (data.profiles[profileId]) {\r\n            delete data.profiles[profileId];\r\n            \r\n            // If this was the current profile, switch to first available\r\n            if (data.currentProfile === profileId) {\r\n                const remainingProfiles = Object.keys(data.profiles);\r\n                data.currentProfile = remainingProfiles.length > 0 ? remainingProfiles[0] : null;\r\n            }\r\n            \r\n            return this.saveAllData(data);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Get application settings\r\n    getSettings() {\r\n        try {\r\n            const settings = localStorage.getItem(this.settingsKey);\r\n            return settings ? JSON.parse(settings) : this.getDefaultSettings();\r\n        } catch (error) {\r\n            console.error('Error loading settings:', error);\r\n            return this.getDefaultSettings();\r\n        }\r\n    }\r\n\r\n    // Save application settings\r\n    saveSettings(settings) {\r\n        try {\r\n            localStorage.setItem(this.settingsKey, JSON.stringify(settings));\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error saving settings:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Create backup of current data\r\n    createBackup() {\r\n        try {\r\n            const currentData = localStorage.getItem(this.storageKey);\r\n            if (currentData) {\r\n                const backup = {\r\n                    data: currentData,\r\n                    timestamp: new Date().toISOString(),\r\n                    version: this.version\r\n                };\r\n                localStorage.setItem(this.backupKey, JSON.stringify(backup));\r\n            }\r\n        } catch (error) {\r\n            console.error('Error creating backup:', error);\r\n        }\r\n    }\r\n\r\n    // Restore from backup\r\n    restoreFromBackup() {\r\n        try {\r\n            const backup = localStorage.getItem(this.backupKey);\r\n            if (backup) {\r\n                const parsed = JSON.parse(backup);\r\n                localStorage.setItem(this.storageKey, parsed.data);\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            console.error('Error restoring from backup:', error);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Export data as JSON string\r\n    exportData() {\r\n        const data = this.getAllData();\r\n        return JSON.stringify(data, null, 2);\r\n    }\r\n\r\n    // Import data from JSON string\r\n    importData(jsonString) {\r\n        try {\r\n            const data = JSON.parse(jsonString);\r\n            \r\n            if (!this.isValidDataStructure(data)) {\r\n                // Invalid data structure is an expected validation result, not an error\r\n                return false;\r\n            }\r\n            \r\n            return this.saveAllData(data);\r\n        } catch (error) {\r\n            // Only log if it's not an expected JSON parse error from tests\r\n            if (!(error instanceof SyntaxError && jsonString.includes('invalid'))) {\r\n                console.error('Error importing data:', error);\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Clear all data (reset application)\r\n    clearAllData() {\r\n        try {\r\n            localStorage.removeItem(this.storageKey);\r\n            localStorage.removeItem(this.backupKey);\r\n            localStorage.removeItem(this.settingsKey);\r\n            \r\n            // Set reset flag to prevent loading default data on next startup\r\n            localStorage.setItem('sto_app_reset', 'true');\r\n            \r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error clearing data:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Get storage usage info\r\n    getStorageInfo() {\r\n        try {\r\n            const dataSize = localStorage.getItem(this.storageKey)?.length || 0;\r\n            const backupSize = localStorage.getItem(this.backupKey)?.length || 0;\r\n            const settingsSize = localStorage.getItem(this.settingsKey)?.length || 0;\r\n            \r\n            return {\r\n                totalSize: dataSize + backupSize + settingsSize,\r\n                dataSize,\r\n                backupSize,\r\n                settingsSize,\r\n                available: this.getAvailableStorage()\r\n            };\r\n        } catch (error) {\r\n            console.error('Error getting storage info:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Private methods\r\n\r\n    getDefaultData() {\r\n        return {\r\n            version: this.version,\r\n            created: new Date().toISOString(),\r\n            lastModified: new Date().toISOString(),\r\n            currentProfile: 'default_space',\r\n            profiles: {\r\n                default_space: { ...STO_DATA.defaultProfiles.default_space },\r\n                tactical_space: { ...STO_DATA.defaultProfiles.tactical_space }\r\n            },\r\n            globalAliases: {},\r\n            settings: this.getDefaultSettings()\r\n        };\r\n    }\r\n\r\n    getEmptyData() {\r\n        return {\r\n            version: this.version,\r\n            created: new Date().toISOString(),\r\n            lastModified: new Date().toISOString(),\r\n            currentProfile: null,\r\n            profiles: {},\r\n            globalAliases: {},\r\n            settings: this.getDefaultSettings()\r\n        };\r\n    }\r\n\r\n    getDefaultSettings() {\r\n        return {\r\n            theme: 'default',\r\n            autoSave: true,\r\n            showTooltips: true,\r\n            confirmDeletes: true,\r\n            maxUndoSteps: 50,\r\n            defaultMode: 'space',\r\n            compactView: false\r\n        };\r\n    }\r\n\r\n    isValidDataStructure(data) {\r\n        if (!data || typeof data !== 'object') return false;\r\n        \r\n        // Check required properties\r\n        const required = ['profiles', 'currentProfile'];\r\n        for (const prop of required) {\r\n            if (!(prop in data)) return false;\r\n        }\r\n        \r\n        // Check profiles structure\r\n        if (typeof data.profiles !== 'object') return false;\r\n        \r\n        // Validate each profile\r\n        for (const [profileId, profile] of Object.entries(data.profiles)) {\r\n            if (!this.isValidProfile(profile)) {\r\n                // Invalid profile structure is an expected validation result, not something to log\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    isValidProfile(profile) {\r\n        if (!profile || typeof profile !== 'object') return false;\r\n        \r\n        // New format with builds structure\r\n        if (profile.builds) {\r\n            if (!profile.name || typeof profile.builds !== 'object') return false;\r\n            \r\n            // Check if at least one build exists\r\n            const builds = profile.builds;\r\n            if (!builds.space && !builds.ground) return false;\r\n            \r\n            // Validate build structure\r\n            for (const [env, build] of Object.entries(builds)) {\r\n                if (env === 'space' || env === 'ground') {\r\n                    if (!build || typeof build !== 'object') return false;\r\n                    if (!build.keys || typeof build.keys !== 'object') return false;\r\n                }\r\n            }\r\n            \r\n            return true;\r\n        }\r\n        \r\n        // Old format - maintain backward compatibility\r\n        const required = ['name', 'mode', 'keys'];\r\n        for (const prop of required) {\r\n            if (!(prop in profile)) return false;\r\n        }\r\n        \r\n        if (typeof profile.keys !== 'object') return false;\r\n        \r\n        return true;\r\n    }\r\n\r\n    ensureStorageStructure() {\r\n        const data = this.getAllData();\r\n        \r\n        // Ensure all required properties exist\r\n        if (!data.globalAliases) data.globalAliases = {};\r\n        if (!data.settings) data.settings = this.getDefaultSettings();\r\n        \r\n        // Only ensure we have at least one profile if this isn't a post-reset state\r\n        if (Object.keys(data.profiles).length === 0 && data.currentProfile !== null) {\r\n            data.profiles = {\r\n                default_space: { ...STO_DATA.defaultProfiles.default_space }\r\n            };\r\n            data.currentProfile = 'default_space';\r\n        }\r\n        \r\n        // Ensure current profile exists (if we have profiles)\r\n        if (Object.keys(data.profiles).length > 0 && !data.profiles[data.currentProfile]) {\r\n            data.currentProfile = Object.keys(data.profiles)[0];\r\n        }\r\n        \r\n        this.saveAllData(data);\r\n    }\r\n\r\n    migrateData() {\r\n        // Handle data migration for future versions\r\n        const data = this.getAllData();\r\n        \r\n        if (data.version !== this.version) {\r\n            console.log(`Migrating data from ${data.version} to ${this.version}`);\r\n            \r\n            // Add migration logic here for future versions\r\n            \r\n            data.version = this.version;\r\n            this.saveAllData(data);\r\n        }\r\n    }\r\n\r\n    getAvailableStorage() {\r\n        try {\r\n            // Test available localStorage space\r\n            let testKey = 'storage_test';\r\n            let testData = '0';\r\n            let testSize = 0;\r\n            \r\n            // Binary search for max storage\r\n            let low = 0;\r\n            let high = 10 * 1024 * 1024; // 10MB max test\r\n            \r\n            while (low <= high) {\r\n                let mid = Math.floor((low + high) / 2);\r\n                testData = '0'.repeat(mid);\r\n                \r\n                try {\r\n                    localStorage.setItem(testKey, testData);\r\n                    localStorage.removeItem(testKey);\r\n                    testSize = mid;\r\n                    low = mid + 1;\r\n                } catch (e) {\r\n                    high = mid - 1;\r\n                }\r\n            }\r\n            \r\n            return testSize;\r\n        } catch (error) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // Load default/demo data explicitly\r\n    loadDefaultData() {\r\n        const defaultData = this.getDefaultData();\r\n        return this.saveAllData(defaultData);\r\n    }\r\n}\r\n\r\n// Global storage instance\r\n","// STO Tools Keybind Manager - Profile Management\r\n// Handles profile creation, editing, and management operations\r\n\r\nexport default class STOProfileManager {\r\n    constructor() {\r\n        this.currentModal = null;\r\n        // Don't initialize immediately - wait for app to be ready\r\n    }\r\n\r\n    init() {\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    setupEventListeners() {\r\n        // Profile dropdown change\r\n        const profileSelect = document.getElementById('profileSelect');\r\n        if (profileSelect) {\r\n            profileSelect.addEventListener('change', (e) => {\r\n                app.switchProfile(e.target.value);\r\n            });\r\n        }\r\n\r\n        // Profile action buttons\r\n        eventBus.onDom('newProfileBtn', 'click', 'profile-new', () => {\r\n            this.showNewProfileModal();\r\n        });\r\n\r\n        eventBus.onDom('cloneProfileBtn', 'click', 'profile-clone', () => {\r\n            this.showCloneProfileModal();\r\n        });\r\n\r\n        eventBus.onDom('renameProfileBtn', 'click', 'profile-rename', () => {\r\n            this.showRenameProfileModal();\r\n        });\r\n\r\n        eventBus.onDom('deleteProfileBtn', 'click', 'profile-delete', () => {\r\n            this.confirmDeleteProfile();\r\n        });\r\n\r\n        // Profile modal save button\r\n        eventBus.onDom('saveProfileBtn', 'click', 'profile-save', () => {\r\n            this.handleProfileSave();\r\n        });\r\n\r\n        // Settings dropdown\r\n        eventBus.onDom('settingsBtn', 'click', 'settings-menu', (e) => {\r\n            e.stopPropagation();\r\n            this.toggleSettingsMenu();\r\n        });\r\n\r\n        // Keybinds dropdown\r\n        eventBus.onDom('keybindsBtn', 'click', 'keybinds-menu', (e) => {\r\n            e.stopPropagation();\r\n            this.toggleKeybindsMenu();\r\n        });\r\n\r\n        // Aliases dropdown  \r\n        eventBus.onDom('aliasesBtn', 'click', 'aliases-menu', (e) => {\r\n            e.stopPropagation();\r\n            this.toggleAliasesMenu();\r\n        });\r\n\r\n        eventBus.onDom('importKeybindsBtn', 'click', 'keybinds-import', () => {\r\n            this.importKeybinds();\r\n            this.closeKeybindsMenu();\r\n        });\r\n\r\n        eventBus.onDom('exportKeybindsBtn', 'click', 'keybinds-export', () => {\r\n            this.exportKeybinds();\r\n            this.closeKeybindsMenu();\r\n        });\r\n\r\n        eventBus.onDom('importAliasesBtn', 'click', 'aliases-import', () => {\r\n            this.importAliases();\r\n            this.closeAliasesMenu();\r\n        });\r\n\r\n        eventBus.onDom('exportAliasesBtn', 'click', 'aliases-export', () => {\r\n            this.exportAliases();\r\n            this.closeAliasesMenu();\r\n        });\r\n\r\n        eventBus.onDom('loadDefaultDataBtn', 'click', 'load-default-data', () => {\r\n            this.loadDefaultData();\r\n            this.closeSettingsMenu();\r\n        });\r\n\r\n        eventBus.onDom('resetAppBtn', 'click', 'reset-app', () => {\r\n            this.confirmResetApp();\r\n            this.closeSettingsMenu();\r\n        });\r\n\r\n        eventBus.onDom('aboutBtn', 'click', 'about-open', () => {\r\n            modalManager.show('aboutModal');\r\n        });\r\n\r\n        eventBus.onDom('themeToggleBtn', 'click', 'theme-toggle', () => {\r\n            app.toggleTheme();\r\n            this.closeSettingsMenu();\r\n        });\r\n\r\n        // Close settings menu when clicking outside\r\n        document.addEventListener('click', () => {\r\n            this.closeSettingsMenu();\r\n            this.closeKeybindsMenu();\r\n            this.closeAliasesMenu();\r\n        });\r\n    }\r\n\r\n    // Profile Modal Management\r\n    showNewProfileModal() {\r\n        const modal = document.getElementById('profileModal');\r\n        const title = document.getElementById('profileModalTitle');\r\n        const nameInput = document.getElementById('profileName');\r\n        const descInput = document.getElementById('profileDescription');\r\n\r\n        if (title) title.textContent = 'New Profile';\r\n        if (nameInput) {\r\n            nameInput.value = '';\r\n            nameInput.placeholder = 'Enter profile name';\r\n        }\r\n        if (descInput) {\r\n            descInput.value = '';\r\n        }\r\n\r\n        this.currentModal = 'new';\r\n        modalManager.show('profileModal');\r\n    }\r\n\r\n    showCloneProfileModal() {\r\n        const currentProfile = app.getCurrentProfile();\r\n        if (!currentProfile) {\r\n            stoUI.showToast('No profile selected to clone', 'warning');\r\n            return;\r\n        }\r\n\r\n        const modal = document.getElementById('profileModal');\r\n        const title = document.getElementById('profileModalTitle');\r\n        const nameInput = document.getElementById('profileName');\r\n        const descInput = document.getElementById('profileDescription');\r\n\r\n        if (title) title.textContent = 'Clone Profile';\r\n        if (nameInput) {\r\n            nameInput.value = `${currentProfile.name} Copy`;\r\n            nameInput.placeholder = 'Enter new profile name';\r\n        }\r\n        if (descInput) {\r\n            descInput.value = `Copy of ${currentProfile.name}`;\r\n        }\r\n\r\n        this.currentModal = 'clone';\r\n        modalManager.show('profileModal');\r\n    }\r\n\r\n    showRenameProfileModal() {\r\n        const currentProfile = app.getCurrentProfile();\r\n        if (!currentProfile) {\r\n            stoUI.showToast('No profile selected to rename', 'warning');\r\n            return;\r\n        }\r\n\r\n        const modal = document.getElementById('profileModal');\r\n        const title = document.getElementById('profileModalTitle');\r\n        const nameInput = document.getElementById('profileName');\r\n        const descInput = document.getElementById('profileDescription');\r\n\r\n        if (title) title.textContent = 'Rename Profile';\r\n        if (nameInput) {\r\n            nameInput.value = currentProfile.name;\r\n            nameInput.placeholder = 'Enter profile name';\r\n        }\r\n        if (descInput) {\r\n            descInput.value = currentProfile.description || '';\r\n        }\r\n\r\n        this.currentModal = 'rename';\r\n        modalManager.show('profileModal');\r\n    }\r\n\r\n    handleProfileSave() {\r\n        const nameInput = document.getElementById('profileName');\r\n        const descInput = document.getElementById('profileDescription');\r\n\r\n        if (!nameInput) return;\r\n\r\n        const name = nameInput.value.trim();\r\n        const description = descInput?.value.trim() || '';\r\n\r\n        if (!name) {\r\n            stoUI.showToast('Profile name is required', 'error');\r\n            nameInput.focus();\r\n            return;\r\n        }\r\n\r\n        if (name.length > 50) {\r\n            stoUI.showToast('Profile name is too long (max 50 characters)', 'error');\r\n            nameInput.focus();\r\n            return;\r\n        }\r\n\r\n        // Check for duplicate names (except when renaming current profile)\r\n        const data = stoStorage.getAllData();\r\n        const existingProfile = Object.values(data.profiles).find(p => \r\n            p.name.toLowerCase() === name.toLowerCase() && \r\n            (this.currentModal !== 'rename' || p.name !== app.getCurrentProfile()?.name)\r\n        );\r\n\r\n        if (existingProfile) {\r\n            stoUI.showToast('A profile with this name already exists', 'error');\r\n            nameInput.focus();\r\n            return;\r\n        }\r\n\r\n        try {\r\n            switch (this.currentModal) {\r\n                case 'new':\r\n                    this.createNewProfile(name, description);\r\n                    break;\r\n                case 'clone':\r\n                    this.cloneCurrentProfile(name, description);\r\n                    break;\r\n                case 'rename':\r\n                    this.renameCurrentProfile(name, description);\r\n                    break;\r\n            }\r\n\r\n            modalManager.hide('profileModal');\r\n            this.currentModal = null;\r\n        } catch (error) {\r\n            stoUI.showToast('Failed to save profile: ' + error.message, 'error');\r\n        }\r\n    }\r\n\r\n    createNewProfile(name, description) {\r\n        const profileId = app.generateProfileId(name);\r\n        const profile = {\r\n            name,\r\n            description,\r\n            mode: 'space',\r\n            keys: {},\r\n            aliases: {},\r\n            created: new Date().toISOString(),\r\n            lastModified: new Date().toISOString()\r\n        };\r\n\r\n        if (stoStorage.saveProfile(profileId, profile)) {\r\n            app.switchProfile(profileId);\r\n            app.renderProfiles();\r\n            stoUI.showToast(`Profile \"${name}\" created`, 'success');\r\n        } else {\r\n            throw new Error('Failed to save profile');\r\n        }\r\n    }\r\n\r\n    cloneCurrentProfile(name, description) {\r\n        const currentProfile = app.getCurrentProfile();\r\n        if (!currentProfile) {\r\n            throw new Error('No profile to clone');\r\n        }\r\n\r\n        const profileId = app.generateProfileId(name);\r\n        const clonedProfile = {\r\n            ...JSON.parse(JSON.stringify(currentProfile)), // Deep clone\r\n            name,\r\n            description,\r\n            created: new Date().toISOString(),\r\n            lastModified: new Date().toISOString()\r\n        };\r\n\r\n        if (stoStorage.saveProfile(profileId, clonedProfile)) {\r\n            app.switchProfile(profileId);\r\n            app.renderProfiles();\r\n            stoUI.showToast(`Profile \"${name}\" created from \"${currentProfile.name}\"`, 'success');\r\n        } else {\r\n            throw new Error('Failed to save cloned profile');\r\n        }\r\n    }\r\n\r\n    renameCurrentProfile(name, description) {\r\n        const currentProfile = app.getCurrentProfile();\r\n        if (!currentProfile) {\r\n            throw new Error('No profile to rename');\r\n        }\r\n\r\n        const oldName = currentProfile.name;\r\n        currentProfile.name = name;\r\n        currentProfile.description = description;\r\n        currentProfile.lastModified = new Date().toISOString();\r\n\r\n        if (stoStorage.saveProfile(app.currentProfile, currentProfile)) {\r\n            app.renderProfiles();\r\n            app.setModified(true);\r\n            stoUI.showToast(`Profile renamed from \"${oldName}\" to \"${name}\"`, 'success');\r\n        } else {\r\n            throw new Error('Failed to save renamed profile');\r\n        }\r\n    }\r\n\r\n    async confirmDeleteProfile() {\r\n        const currentProfile = app.getCurrentProfile();\r\n        if (!currentProfile) {\r\n            stoUI.showToast('No profile selected to delete', 'warning');\r\n            return;\r\n        }\r\n\r\n        const data = stoStorage.getAllData();\r\n        const profileCount = Object.keys(data.profiles).length;\r\n\r\n        if (profileCount <= 1) {\r\n            stoUI.showToast('Cannot delete the last profile', 'warning');\r\n            return;\r\n        }\r\n\r\n        const confirmed = await stoUI.confirm(\r\n            `Are you sure you want to delete the profile \"${currentProfile.name}\"?\\n\\nThis action cannot be undone.`,\r\n            'Delete Profile',\r\n            'danger'\r\n        );\r\n\r\n        if (confirmed) {\r\n            this.deleteCurrentProfile();\r\n        }\r\n    }\r\n\r\n    deleteCurrentProfile() {\r\n        const currentProfile = app.getCurrentProfile();\r\n        if (!currentProfile) return;\r\n\r\n        const profileName = currentProfile.name;\r\n        \r\n        if (app.deleteProfile(app.currentProfile)) {\r\n            stoUI.showToast(`Profile \"${profileName}\" deleted`, 'success');\r\n        } else {\r\n            stoUI.showToast('Failed to delete profile', 'error');\r\n        }\r\n    }\r\n\r\n    // Settings Menu Management\r\n    toggleSettingsMenu() {\r\n        const settingsBtn = document.getElementById('settingsBtn');\r\n        if (settingsBtn) {\r\n            const dropdown = settingsBtn.closest('.dropdown');\r\n        if (dropdown) {\r\n            dropdown.classList.toggle('active');\r\n            }\r\n        }\r\n    }\r\n\r\n    closeSettingsMenu() {\r\n        const settingsBtn = document.getElementById('settingsBtn');\r\n        if (settingsBtn) {\r\n            const dropdown = settingsBtn.closest('.dropdown');\r\n        if (dropdown) {\r\n            dropdown.classList.remove('active');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Keybinds Menu Management\r\n    toggleKeybindsMenu() {\r\n        // Close other dropdowns first\r\n        this.closeSettingsMenu();\r\n        this.closeAliasesMenu();\r\n        \r\n        const keybindsBtn = document.getElementById('keybindsBtn');\r\n        if (keybindsBtn) {\r\n            const dropdown = keybindsBtn.closest('.dropdown');\r\n            if (dropdown) {\r\n                dropdown.classList.toggle('active');\r\n            }\r\n        }\r\n    }\r\n\r\n    closeKeybindsMenu() {\r\n        const keybindsBtn = document.getElementById('keybindsBtn');\r\n        if (keybindsBtn) {\r\n            const dropdown = keybindsBtn.closest('.dropdown');\r\n            if (dropdown) {\r\n                dropdown.classList.remove('active');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Aliases Menu Management\r\n    toggleAliasesMenu() {\r\n        // Close other dropdowns first\r\n        this.closeSettingsMenu();\r\n        this.closeKeybindsMenu();\r\n        \r\n        const aliasesBtn = document.getElementById('aliasesBtn');\r\n        if (aliasesBtn) {\r\n            const dropdown = aliasesBtn.closest('.dropdown');\r\n            if (dropdown) {\r\n                dropdown.classList.toggle('active');\r\n            }\r\n        }\r\n    }\r\n\r\n    closeAliasesMenu() {\r\n        const aliasesBtn = document.getElementById('aliasesBtn');\r\n        if (aliasesBtn) {\r\n            const dropdown = aliasesBtn.closest('.dropdown');\r\n            if (dropdown) {\r\n                dropdown.classList.remove('active');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Import/Export Operations\r\n    importKeybinds() {\r\n        const input = document.getElementById('fileInput');\r\n        if (input) {\r\n            input.accept = '.txt';\r\n            input.onchange = (e) => {\r\n                const file = e.target.files[0];\r\n                if (file) {\r\n                    const reader = new FileReader();\r\n                    reader.onload = (e) => {\r\n                        try {\r\n                            stoKeybinds.importKeybindFile(e.target.result);\r\n                        } catch (error) {\r\n                            stoUI.showToast('Failed to import keybind file: ' + error.message, 'error');\r\n                        }\r\n                    };\r\n                    reader.readAsText(file);\r\n                }\r\n                // Reset file input\r\n                e.target.value = '';\r\n            };\r\n            input.click();\r\n        }\r\n    }\r\n\r\n    exportKeybinds() {\r\n        const profile = app.getCurrentProfile();\r\n        if (!profile) {\r\n            stoUI.showToast('No profile selected to export', 'warning');\r\n            return;\r\n        }\r\n\r\n        if (!profile.keys || Object.keys(profile.keys).length === 0) {\r\n            stoUI.showToast('No keybinds to export', 'warning');\r\n            return;\r\n        }\r\n\r\n        stoExport.exportSTOKeybindFile(profile);\r\n    }\r\n\r\n    importAliases() {\r\n        const input = document.createElement('input');\r\n        input.type = 'file';\r\n        input.accept = '.txt';\r\n        input.onchange = (e) => {\r\n            const file = e.target.files[0];\r\n            if (file) {\r\n                const reader = new FileReader();\r\n                reader.onload = (e) => {\r\n                    try {\r\n                        const content = e.target.result;\r\n                        stoKeybinds.importAliasFile(content);\r\n                        \r\n                        // Refresh alias manager if open\r\n                        if (window.stoAliases && typeof window.stoAliases.renderAliasList === 'function') {\r\n                            window.stoAliases.renderAliasList();\r\n                        }\r\n                    } catch (error) {\r\n                        stoUI.showToast('Failed to import aliases: ' + error.message, 'error');\r\n                    }\r\n                };\r\n                reader.readAsText(file);\r\n            }\r\n        };\r\n        input.click();\r\n    }\r\n\r\n    exportAliases() {\r\n        const profile = app.getCurrentProfile();\r\n        if (!profile) {\r\n            stoUI.showToast('No profile selected to export', 'warning');\r\n            return;\r\n        }\r\n\r\n        if (!profile.aliases || Object.keys(profile.aliases).length === 0) {\r\n            stoUI.showToast('No aliases to export', 'warning');\r\n            return;\r\n        }\r\n\r\n        stoExport.exportAliases(profile);\r\n    }\r\n\r\n    async confirmResetApp() {\r\n        const confirmed = await stoUI.confirm(\r\n            'Are you sure you want to reset the application?\\n\\nThis will delete all profiles, keybinds, and settings. This action cannot be undone.',\r\n            'Reset Application',\r\n            'danger'\r\n        );\r\n\r\n        if (confirmed) {\r\n            this.resetApplication();\r\n        }\r\n    }\r\n\r\n    resetApplication() {\r\n        try {\r\n            // Clear all data\r\n            stoStorage.clearAllData();\r\n            \r\n            // Reinitialize app with empty data instead of reloading\r\n            app.currentProfile = null;\r\n            app.selectedKey = null;\r\n            app.setModified(false);\r\n            \r\n            // Re-render UI with empty state\r\n            app.renderProfiles();\r\n            app.renderKeyGrid();\r\n            app.renderCommandChain();\r\n            app.updateProfileInfo();\r\n            \r\n            stoUI.showToast('Application reset successfully. All data cleared.', 'success');\r\n        } catch (error) {\r\n            stoUI.showToast('Failed to reset application: ' + error.message, 'error');\r\n        }\r\n    }\r\n\r\n    // Load default/demo data\r\n    loadDefaultData() {\r\n        try {\r\n            if (stoStorage.loadDefaultData()) {\r\n                // Reinitialize app with default data\r\n                const data = stoStorage.getAllData();\r\n                app.currentProfile = data.currentProfile;\r\n                app.selectedKey = null;\r\n                app.setModified(false);\r\n                \r\n                // Re-render UI with default data\r\n                app.renderProfiles();\r\n                app.renderKeyGrid();\r\n                app.renderCommandChain();\r\n                app.updateProfileInfo();\r\n                \r\n                stoUI.showToast('Default demo data loaded successfully', 'success');\r\n            } else {\r\n                stoUI.showToast('Failed to load default data', 'error');\r\n            }\r\n        } catch (error) {\r\n            stoUI.showToast('Failed to load default data: ' + error.message, 'error');\r\n        }\r\n    }\r\n\r\n    // Profile Statistics and Analysis\r\n    getProfileAnalysis(profile) {\r\n        const analysis = {\r\n            keyCount: Object.keys(profile.keys).length,\r\n            commandCount: 0,\r\n            aliasCount: Object.keys(profile.aliases || {}).length,\r\n            commandTypes: {},\r\n            keyTypes: {\r\n                function: 0,\r\n                number: 0,\r\n                letter: 0,\r\n                special: 0,\r\n                modifier: 0\r\n            },\r\n            complexity: 'Simple',\r\n            recommendations: []\r\n        };\r\n\r\n        // Analyze keys and commands\r\n        Object.entries(profile.keys).forEach(([key, commands]) => {\r\n            analysis.commandCount += commands.length;\r\n\r\n            // Categorize key types\r\n            if (/^F\\d+$/.test(key)) {\r\n                analysis.keyTypes.function++;\r\n            } else if (/^\\d+$/.test(key)) {\r\n                analysis.keyTypes.number++;\r\n            } else if (/^[A-Z]$/.test(key)) {\r\n                analysis.keyTypes.letter++;\r\n            } else if (key.includes('+')) {\r\n                analysis.keyTypes.modifier++;\r\n            } else {\r\n                analysis.keyTypes.special++;\r\n            }\r\n\r\n            // Count command types\r\n            commands.forEach(command => {\r\n                analysis.commandTypes[command.type] = (analysis.commandTypes[command.type] || 0) + 1;\r\n            });\r\n        });\r\n\r\n        // Determine complexity\r\n        if (analysis.commandCount > 50) {\r\n            analysis.complexity = 'Complex';\r\n        } else if (analysis.commandCount > 20) {\r\n            analysis.complexity = 'Moderate';\r\n        }\r\n\r\n        // Generate recommendations\r\n        this.generateRecommendations(analysis, profile);\r\n\r\n        return analysis;\r\n    }\r\n\r\n    generateRecommendations(analysis, profile) {\r\n        const recommendations = [];\r\n\r\n        // Check for basic combat setup\r\n        if (!analysis.commandTypes.targeting && !analysis.commandTypes.combat) {\r\n            recommendations.push({\r\n                type: 'setup',\r\n                title: 'Add Basic Combat Commands',\r\n                description: 'Consider adding targeting and firing commands for basic combat functionality.',\r\n                priority: 'high'\r\n            });\r\n        }\r\n\r\n        // Check for defensive abilities\r\n        if (!analysis.commandTypes.power) {\r\n            recommendations.push({\r\n                type: 'defensive',\r\n                title: 'Add Defensive Abilities',\r\n                description: 'Add shield management commands like shield distribution and shield routing.',\r\n                priority: 'medium'\r\n            });\r\n        }\r\n\r\n        // Check for key efficiency\r\n        if (analysis.keyTypes.modifier < 3 && analysis.keyCount > 10) {\r\n            recommendations.push({\r\n                type: 'efficiency',\r\n                title: 'Use Modifier Keys',\r\n                description: 'Consider using Ctrl+, Alt+, and Shift+ combinations to access more commands efficiently.',\r\n                priority: 'low'\r\n            });\r\n        }\r\n\r\n        // Check for aliases\r\n        if (analysis.aliasCount === 0 && analysis.commandCount > 15) {\r\n            recommendations.push({\r\n                type: 'organization',\r\n                title: 'Create Command Aliases',\r\n                description: 'Use aliases to group related commands and simplify complex sequences.',\r\n                priority: 'medium'\r\n            });\r\n        }\r\n\r\n        // Check for space vs ground mode appropriateness\r\n        const spaceCommands = ['FireAll', 'target_nearest_enemy', '+fullimpulse'];\r\n        const hasSpaceCommands = Object.values(profile.keys).some(commands =>\r\n            commands.some(cmd => spaceCommands.some(sc => cmd.command.includes(sc)))\r\n        );\r\n\r\n        if (profile.mode === 'ground' && hasSpaceCommands) {\r\n            recommendations.push({\r\n                type: 'mode',\r\n                title: 'Check Profile Mode',\r\n                description: 'This profile contains space combat commands but is set to ground mode.',\r\n                priority: 'medium'\r\n            });\r\n        }\r\n\r\n        analysis.recommendations = recommendations;\r\n    }\r\n\r\n    // Profile Templates\r\n    getProfileTemplates() {\r\n        return {\r\n            basic_space: {\r\n                name: 'Basic Space Combat',\r\n                description: 'Essential space combat keybinds for new players',\r\n                mode: 'space',\r\n                keys: {\r\n                    'Space': [\r\n                        { command: 'target_nearest_enemy', type: 'targeting', icon: '🎯', text: 'Target nearest enemy' },\r\n                        { command: 'FireAll', type: 'combat', icon: '🔥', text: 'Fire all weapons' }\r\n                    ],\r\n                    'Tab': [\r\n                        { command: 'target_nearest_friend', type: 'targeting', icon: '🤝', text: 'Target nearest friend' }\r\n                    ],\r\n                    'F1': [\r\n                        { command: 'target_self', type: 'targeting', icon: '👤', text: 'Target self' },\r\n                        { command: '+power_exec Distribute_Shields', type: 'power', icon: '🛡️', text: 'Distribute shields' }\r\n                    ]\r\n                },\r\n                aliases: {}\r\n            },\r\n            \r\n            advanced_tactical: {\r\n                name: 'Advanced Tactical',\r\n                description: 'Comprehensive DPS-focused space build',\r\n                mode: 'space',\r\n                keys: {\r\n                    'Space': [\r\n                        { command: 'target_nearest_enemy', type: 'targeting', icon: '🎯', text: 'Target nearest enemy' },\r\n                        { command: '+STOTrayExecByTray 0 0', type: 'tray', icon: '⚡', text: 'Execute Tray 1 Slot 1' },\r\n                        { command: 'FireAll', type: 'combat', icon: '🔥', text: 'Fire all weapons' }\r\n                    ],\r\n                    '1': [\r\n                        { command: '+STOTrayExecByTray 1 0', type: 'tray', icon: '⚡', text: 'Execute Tray 2 Slot 1' }\r\n                    ],\r\n                    '2': [\r\n                        { command: '+STOTrayExecByTray 1 1', type: 'tray', icon: '⚡', text: 'Execute Tray 2 Slot 2' }\r\n                    ],\r\n                    'F1': [\r\n                        { command: 'target_self', type: 'targeting', icon: '👤', text: 'Target self' },\r\n                    ],\r\n                    'F2': [\r\n                        { command: 'target_self', type: 'targeting', icon: '👤', text: 'Target self' },\r\n                    ]\r\n                },\r\n                aliases: {\r\n                    'AlphaStrike': {\r\n                        name: 'AlphaStrike',\r\n                        commands: 'target_nearest_enemy $$ +STOTrayExecByTray 0 0 $$ +STOTrayExecByTray 0 1',\r\n                        description: 'Full alpha strike sequence'\r\n                    }\r\n                }\r\n            },\r\n\r\n            ground_combat: {\r\n                name: 'Ground Combat',\r\n                description: 'Ground combat and away team keybinds',\r\n                mode: 'ground',\r\n                keys: {\r\n                    'Space': [\r\n                        { command: 'target_nearest_enemy', type: 'targeting', icon: '🎯', text: 'Target nearest enemy' },\r\n                        { command: '+STOTrayExecByTray 0 0', type: 'tray', icon: '⚡', text: 'Primary attack' }\r\n                    ],\r\n                    '1': [\r\n                        { command: '+STOTrayExecByTray 0 1', type: 'tray', icon: '⚡', text: 'Secondary attack' }\r\n                    ],\r\n                    '2': [\r\n                        { command: '+STOTrayExecByTray 0 2', type: 'tray', icon: '⚡', text: 'Kit ability 1' }\r\n                    ],\r\n                    'F1': [\r\n                        { command: 'target_self', type: 'targeting', icon: '👤', text: 'Target self' },\r\n                        { command: '+STOTrayExecByTray 1 0', type: 'tray', icon: '💊', text: 'Heal self' }\r\n                    ]\r\n                },\r\n                aliases: {}\r\n            }\r\n        };\r\n    }\r\n\r\n    createProfileFromTemplate(templateId) {\r\n        const templates = this.getProfileTemplates();\r\n        const template = templates[templateId];\r\n        \r\n        if (!template) {\r\n            stoUI.showToast('Template not found', 'error');\r\n            return;\r\n        }\r\n\r\n        // Generate unique profile name\r\n        let profileName = template.name;\r\n        let counter = 1;\r\n        const data = stoStorage.getAllData();\r\n        \r\n        while (Object.values(data.profiles).some(p => p.name === profileName)) {\r\n            profileName = `${template.name} ${counter}`;\r\n            counter++;\r\n        }\r\n\r\n        // Create profile\r\n        const profileId = app.generateProfileId(profileName);\r\n        const profile = {\r\n            ...template,\r\n            name: profileName,\r\n            created: new Date().toISOString(),\r\n            lastModified: new Date().toISOString()\r\n        };\r\n\r\n        // Add IDs to commands\r\n        Object.values(profile.keys).forEach(commands => {\r\n            commands.forEach(command => {\r\n                command.id = app.generateCommandId();\r\n            });\r\n        });\r\n\r\n        if (stoStorage.saveProfile(profileId, profile)) {\r\n            app.switchProfile(profileId);\r\n            app.renderProfiles();\r\n            stoUI.showToast(`Profile \"${profileName}\" created from template`, 'success');\r\n        } else {\r\n            stoUI.showToast('Failed to create profile from template', 'error');\r\n        }\r\n    }\r\n\r\n    // Profile Export/Import\r\n    exportProfile(profileId) {\r\n        const profile = stoStorage.getProfile(profileId);\r\n        if (!profile) {\r\n            stoUI.showToast('Profile not found', 'error');\r\n            return;\r\n        }\r\n\r\n        const exportData = {\r\n            version: '1.0.0',\r\n            exported: new Date().toISOString(),\r\n            profile: profile\r\n        };\r\n\r\n        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = `${profile.name.replace(/[^a-zA-Z0-9]/g, '_')}_profile.json`;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n\r\n        stoUI.showToast(`Profile \"${profile.name}\" exported`, 'success');\r\n    }\r\n\r\n    async importProfile(jsonData) {\r\n        try {\r\n            const data = JSON.parse(jsonData);\r\n            \r\n            if (!data.profile) {\r\n                throw new Error('Invalid profile file format');\r\n            }\r\n\r\n            const profile = data.profile;\r\n            \r\n            // Generate unique profile name\r\n            let profileName = profile.name;\r\n            let counter = 1;\r\n            const existingData = stoStorage.getAllData();\r\n            \r\n            while (Object.values(existingData.profiles).some(p => p.name === profileName)) {\r\n                profileName = `${profile.name} (${counter})`;\r\n                counter++;\r\n            }\r\n\r\n            profile.name = profileName;\r\n            profile.imported = new Date().toISOString();\r\n            profile.lastModified = new Date().toISOString();\r\n\r\n            const profileId = app.generateProfileId(profileName);\r\n            \r\n            if (stoStorage.saveProfile(profileId, profile)) {\r\n                app.renderProfiles();\r\n                stoUI.showToast(`Profile \"${profileName}\" imported successfully`, 'success');\r\n                return true;\r\n            } else {\r\n                throw new Error('Failed to save imported profile');\r\n            }\r\n        } catch (error) {\r\n            stoUI.showToast('Failed to import profile: ' + error.message, 'error');\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n// Global profile manager instance\r\n","// STO Tools Keybind Manager - Keybind Operations\r\n// Handles keybind parsing, validation, and file operations\r\n\r\nexport default class STOKeybindFileManager {\r\n    constructor() {\r\n        this.keybindPatterns = {\r\n            // Standard keybind format: Key \"command1 $$ command2\" or Key \"command\" \"optional\"\r\n            standard: /^([a-zA-Z0-9_+\\-\\s\\[\\]]+)\\s+\"([^\"]*)\"(?:\\s+\"([^\"]*)\")?$/,\r\n            // Bind command format: /bind Key command or /bind Key \"command\"\r\n            bind: /^\\/bind\\s+([a-zA-Z0-9_+\\-\\s\\[\\]]+)\\s+(.+)$/,\r\n            // Alias format: alias AliasName \"command sequence\" or alias AliasName <& command sequence &>\r\n            alias: /^alias\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s+(?:\"([^\"]+)\"|<&\\s+(.+?)\\s+&>)$/,\r\n            // Comment lines (both # and ; style comments)\r\n            comment: /^[#;].*$/\r\n        };\r\n        \r\n        this.validKeys = this.generateValidKeys();\r\n        // Don't initialize immediately - wait for app to be ready\r\n    }\r\n\r\n    init() {\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    // Generate list of valid STO keys\r\n    generateValidKeys() {\r\n        const keys = new Set();\r\n        \r\n        // Function keys\r\n        for (let i = 1; i <= 12; i++) {\r\n            keys.add(`F${i}`);\r\n        }\r\n        \r\n        // Number keys\r\n        for (let i = 0; i <= 9; i++) {\r\n            keys.add(i.toString());\r\n        }\r\n        \r\n        // Letter keys\r\n        for (let i = 65; i <= 90; i++) {\r\n            keys.add(String.fromCharCode(i));\r\n        }\r\n        \r\n        // Special keys\r\n        const specialKeys = [\r\n            'Space', 'Tab', 'Enter', 'Escape', 'Backspace', 'Delete',\r\n            'Insert', 'Home', 'End', 'PageUp', 'PageDown',\r\n            'Up', 'Down', 'Left', 'Right',\r\n            'NumPad0', 'NumPad1', 'NumPad2', 'NumPad3', 'NumPad4',\r\n            'NumPad5', 'NumPad6', 'NumPad7', 'NumPad8', 'NumPad9',\r\n            'NumPadEnter', 'NumPadPlus', 'NumPadMinus', 'NumPadMultiply', 'NumPadDivide',\r\n            // Lowercase numpad variants (for compatibility)\r\n            'numpad0', 'numpad1', 'numpad2', 'numpad3', 'numpad4',\r\n            'numpad5', 'numpad6', 'numpad7', 'numpad8', 'numpad9',\r\n            'divide', 'multiply', // STO-style names for numpad math keys\r\n            // Mouse buttons\r\n            'Button4', 'Button5', 'Button6', 'Button7', 'Button8',\r\n            'Lbutton', 'Rbutton', 'Mbutton', 'Leftdrag', 'Rightdrag', 'Middleclick',\r\n            'Mousechord', 'Wheelplus', 'Wheelminus',\r\n            'Semicolon', 'Equals', 'Comma', 'Minus', 'Period', 'Slash',\r\n            'Grave', 'LeftBracket', 'Backslash', 'RightBracket', 'Quote',\r\n            // Bracket characters (for STO keybinds like Control+[)\r\n            '[', ']'\r\n        ];\r\n        \r\n        specialKeys.forEach(key => keys.add(key));\r\n        \r\n        // Modifier combinations\r\n        const modifiers = ['Ctrl', 'Alt', 'Shift', 'Control']; // Include both Ctrl and Control\r\n        const baseKeys = Array.from(keys); // Capture base keys before adding modifiers\r\n        \r\n        modifiers.forEach(modifier => {\r\n            baseKeys.forEach(key => {\r\n                keys.add(`${modifier}+${key}`);\r\n            });\r\n        });\r\n        \r\n\r\n        \r\n        // Double modifier combinations\r\n        keys.add('Ctrl+Alt');\r\n        keys.add('Ctrl+Shift');\r\n        keys.add('Alt+Shift');\r\n        keys.add('Control+Alt');\r\n        keys.add('Control+Shift');\r\n        \r\n        baseKeys.forEach(key => {\r\n            keys.add(`Ctrl+Alt+${key}`);\r\n            keys.add(`Ctrl+Shift+${key}`);\r\n            keys.add(`Alt+Shift+${key}`);\r\n            keys.add(`Control+Alt+${key}`);\r\n            keys.add(`Control+Shift+${key}`);\r\n        });\r\n        \r\n        return Array.from(keys).sort();\r\n    }\r\n\r\n    // Parse keybind file content\r\n    parseKeybindFile(content) {\r\n        const lines = content.split('\\n');\r\n        const result = {\r\n            keybinds: {},\r\n            aliases: {},\r\n            comments: [],\r\n            errors: []\r\n        };\r\n        \r\n        lines.forEach((line, index) => {\r\n            const trimmed = line.trim();\r\n            if (!trimmed) return;\r\n            \r\n            try {\r\n                if (this.keybindPatterns.comment.test(trimmed)) {\r\n                    result.comments.push({\r\n                        line: index + 1,\r\n                        content: trimmed\r\n                    });\r\n                } else if (this.keybindPatterns.alias.test(trimmed)) {\r\n                    const match = trimmed.match(this.keybindPatterns.alias);\r\n                    if (match) {\r\n                        const [, aliasName, quotedCommands, bracketCommands] = match;\r\n                        // Use whichever format was matched (quoted or bracket syntax)\r\n                        const commands = quotedCommands || bracketCommands;\r\n                        result.aliases[aliasName] = {\r\n                            name: aliasName,\r\n                            commands: commands,\r\n                            line: index + 1\r\n                        };\r\n                    }\r\n                } else if (this.keybindPatterns.standard.test(trimmed)) {\r\n                    const match = trimmed.match(this.keybindPatterns.standard);\r\n                    if (match) {\r\n                        const [, key, commandString, optionalParam] = match;\r\n                        const commands = this.parseCommandString(commandString);\r\n                        \r\n                        result.keybinds[key] = {\r\n                            key: key,\r\n                            commands: commands,\r\n                            line: index + 1,\r\n                            raw: commandString,\r\n                            // Store optional parameter if present (for completeness, though we ignore it)\r\n                            optionalParam: optionalParam || null\r\n                        };\r\n                    }\r\n                } else if (this.keybindPatterns.bind.test(trimmed)) {\r\n                    const match = trimmed.match(this.keybindPatterns.bind);\r\n                    if (match) {\r\n                        const [, key, commandString] = match;\r\n                        // Remove quotes if present\r\n                        const cleanCommandString = commandString.replace(/^\"(.*)\"$/, '$1');\r\n                        const commands = this.parseCommandString(cleanCommandString);\r\n                        \r\n                        result.keybinds[key] = {\r\n                            key: key,\r\n                            commands: commands,\r\n                            line: index + 1,\r\n                            raw: cleanCommandString\r\n                        };\r\n                    }\r\n                } else {\r\n                    result.errors.push({\r\n                        line: index + 1,\r\n                        content: trimmed,\r\n                        error: 'Invalid keybind format'\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                result.errors.push({\r\n                    line: index + 1,\r\n                    content: trimmed,\r\n                    error: error.message\r\n                });\r\n            }\r\n        });\r\n        \r\n        return result;\r\n    }\r\n\r\n    // Generate mirrored command string for stable execution order\r\n    generateMirroredCommandString(commands) {\r\n        if (!commands || commands.length <= 1) {\r\n            return commands.map(cmd => cmd.command || cmd).join(' $$ ');\r\n        }\r\n        \r\n        // Extract command strings\r\n        const commandStrings = commands.map(cmd => cmd.command || cmd);\r\n        \r\n        // Create mirrored pattern: original + reverse(without last element)\r\n        // This ensures Phase 1 (left-to-right) and Phase 2 (right-to-left) execute in same order\r\n        // Pattern: [A, B, C] -> [A, B, C, B, A] (palindrome-like structure)\r\n        const reversed = [...commandStrings].reverse();\r\n        const reversedWithoutLast = reversed.slice(1); // Remove first element of reverse (which is last of original)\r\n        const mirrored = [...commandStrings, ...reversedWithoutLast];\r\n        \r\n        return mirrored.join(' $$ ');\r\n    }\r\n\r\n    // Detect if a command string uses mirroring pattern and extract original commands\r\n    detectAndUnmirrorCommands(commandString) {\r\n        if (!commandString || typeof commandString !== 'string') {\r\n            return { isMirrored: false, originalCommands: [] };\r\n        }\r\n\r\n        const commands = commandString.split(' $$ ').map(cmd => cmd.trim()).filter(cmd => cmd);\r\n        \r\n        // Single command or empty - not mirrored\r\n        if (commands.length <= 1) {\r\n            return { isMirrored: false, originalCommands: commands };\r\n        }\r\n\r\n        // Check if this follows the mirroring pattern: [A, B, C, B, A]\r\n        // For mirrored commands, length should be odd and >= 3\r\n        if (commands.length < 3 || commands.length % 2 === 0) {\r\n            return { isMirrored: false, originalCommands: commands };\r\n        }\r\n\r\n        const midIndex = Math.floor(commands.length / 2);\r\n        const firstHalf = commands.slice(0, midIndex + 1); // Include middle element\r\n        const secondHalf = commands.slice(midIndex + 1); // After middle element\r\n        \r\n        // Check if second half is reverse of first half (without the middle element)\r\n        const expectedReverse = firstHalf.slice(0, -1).reverse(); // Remove middle, then reverse\r\n        \r\n        if (secondHalf.length === expectedReverse.length && \r\n            secondHalf.every((cmd, index) => cmd === expectedReverse[index])) {\r\n            return { \r\n                isMirrored: true, \r\n                originalCommands: firstHalf \r\n            };\r\n        }\r\n\r\n        return { isMirrored: false, originalCommands: commands };\r\n    }\r\n\r\n    // Parse command string into individual commands\r\n    parseCommandString(commandString) {\r\n        const commands = commandString.split('$$').map(cmd => cmd.trim());\r\n        \r\n        return commands.map((command, index) => {\r\n            const commandObj = {\r\n                command: command,\r\n                type: window.stoCommands ? window.stoCommands.detectCommandType(command) : 'custom',\r\n                icon: window.stoCommands ? window.stoCommands.getCommandIcon(command) : '⚙️',\r\n                text: window.stoCommands ? window.stoCommands.getCommandText(command) : command,\r\n                id: `imported_${Date.now()}_${index}`\r\n            };\r\n            \r\n            // Try to extract parameters for known command types\r\n            if (command.includes('+STOTrayExecByTray')) {\r\n                const match = command.match(/\\+STOTrayExecByTray\\s+(\\d+)\\s+(\\d+)/);\r\n                if (match) {\r\n                    commandObj.parameters = {\r\n                        tray: parseInt(match[1]),\r\n                        slot: parseInt(match[2])\r\n                    };\r\n                    commandObj.text = `Execute Tray ${parseInt(match[1]) + 1} Slot ${parseInt(match[2]) + 1}`;\r\n                }\r\n            } else if (command.includes('\"')) {\r\n                // Extract quoted parameters (for communication commands)\r\n                const match = command.match(/^(\\w+)\\s+\"([^\"]+)\"$/);\r\n                if (match) {\r\n                    commandObj.parameters = {\r\n                        message: match[2]\r\n                    };\r\n                    commandObj.text = `${commandObj.text}: ${match[2]}`;\r\n                }\r\n            }\r\n            \r\n            return commandObj;\r\n        });\r\n    }\r\n\r\n    // Import keybind file content\r\n    importKeybindFile(content) {\r\n        // Get the actual profile from storage to work with the real structure\r\n        const actualProfile = stoStorage.getProfile(app.currentProfile)\r\n        if (!actualProfile) {\r\n            stoUI.showToast('No profile selected for import', 'warning')\r\n            return { success: false, error: 'No active profile' }\r\n        }\r\n\r\n        try {\r\n            const parsed = this.parseKeybindFile(content)\r\n            \r\n            // Only import keybinds, ignore aliases (they have separate import)\r\n            const keyCount = Object.keys(parsed.keybinds).length\r\n            \r\n            if (keyCount === 0) {\r\n                stoUI.showToast('No keybinds found in file', 'warning')\r\n                return { success: false, error: 'No keybinds found' }\r\n            }\r\n\r\n            // Ensure builds structure exists\r\n            if (!actualProfile.builds) {\r\n                actualProfile.builds = {\r\n                    space: { keys: {} },\r\n                    ground: { keys: {} }\r\n                }\r\n            }\r\n\r\n            // Ensure current environment build exists\r\n            if (!actualProfile.builds[app.currentEnvironment]) {\r\n                actualProfile.builds[app.currentEnvironment] = { keys: {} }\r\n            }\r\n\r\n            // Get reference to the current build's keys\r\n            const buildKeys = actualProfile.builds[app.currentEnvironment].keys\r\n\r\n            // Merge keybinds into the actual build structure\r\n            Object.entries(parsed.keybinds).forEach(([key, keybindData]) => {\r\n                // Detect if commands are mirrored and extract original commands\r\n                const commandString = keybindData.commands.map(cmd => cmd.command).join(' $$ ');\r\n                const mirrorInfo = this.detectAndUnmirrorCommands(commandString);\r\n                \r\n                if (mirrorInfo.isMirrored) {\r\n                    // Store original commands with stabilization flag\r\n                    buildKeys[key] = this.parseCommandString(mirrorInfo.originalCommands.join(' $$ '));\r\n                    // Store metadata about stabilization at profile level (scoped by environment)\r\n                    const env = app.currentEnvironment;\r\n                    if (!actualProfile.keybindMetadata) {\r\n                        actualProfile.keybindMetadata = {};\r\n                    }\r\n                    if (!actualProfile.keybindMetadata[env]) {\r\n                        actualProfile.keybindMetadata[env] = {};\r\n                    }\r\n                    actualProfile.keybindMetadata[env][key] = {\r\n                        stabilizeExecutionOrder: true\r\n                    };\r\n                } else {\r\n                    // Store commands as-is\r\n                    buildKeys[key] = keybindData.commands;\r\n                }\r\n            })\r\n\r\n            // Save the modified profile directly\r\n            stoStorage.saveProfile(app.currentProfile, actualProfile)\r\n            app.setModified(true)\r\n\r\n            // Refresh key grid\r\n            app.renderKeyGrid()\r\n\r\n            const message = `Import completed: ${keyCount} keybinds`\r\n            if (Object.keys(parsed.aliases).length > 0) {\r\n                stoUI.showToast(message + ` (${Object.keys(parsed.aliases).length} aliases ignored - use Import Aliases)`, 'success')\r\n            } else {\r\n                stoUI.showToast(message, 'success')\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                imported: {\r\n                    keys: keyCount\r\n                },\r\n                errors: parsed.errors\r\n            }\r\n        } catch (error) {\r\n            stoUI.showToast('Import failed: ' + error.message, 'error')\r\n            return { success: false, error: error.message }\r\n        }\r\n    }\r\n\r\n    // Separate Alias Import\r\n    importAliasFile(content) {\r\n        const profile = app.getCurrentProfile()\r\n        if (!profile) {\r\n            stoUI.showToast('No profile selected for import', 'warning')\r\n            return { success: false, error: 'No active profile' }\r\n        }\r\n\r\n        try {\r\n            const parsed = this.parseKeybindFile(content)\r\n            \r\n            // Only import aliases, ignore keybinds\r\n            const aliasCount = Object.keys(parsed.aliases).length\r\n            \r\n            if (aliasCount === 0) {\r\n                stoUI.showToast('No aliases found in file', 'warning')\r\n                return { success: false, error: 'No aliases found' }\r\n            }\r\n\r\n            // Get the actual profile from storage (aliases are profile-level, not build-specific)\r\n            const actualProfile = stoStorage.getProfile(app.currentProfile)\r\n            if (!actualProfile) {\r\n                stoUI.showToast('Failed to get profile for import', 'error')\r\n                return { success: false, error: 'Profile not found' }\r\n            }\r\n\r\n            // Ensure aliases structure exists at profile level\r\n            if (!actualProfile.aliases) {\r\n                actualProfile.aliases = {}\r\n            }\r\n\r\n            // Merge aliases into profile (profile-level, not build-specific)\r\n            Object.entries(parsed.aliases).forEach(([name, aliasData]) => {\r\n                actualProfile.aliases[name] = {\r\n                    commands: aliasData.commands,\r\n                    description: aliasData.description || ''\r\n                }\r\n            })\r\n\r\n            // Update storage and UI\r\n            stoStorage.saveProfile(app.currentProfile, actualProfile)\r\n            app.setModified(true)\r\n\r\n            // Refresh alias manager if open\r\n            if (window.stoAliases && typeof window.stoAliases.updateCommandLibrary === 'function') {\r\n                window.stoAliases.updateCommandLibrary()\r\n            }\r\n\r\n            const message = `Import completed: ${aliasCount} aliases`\r\n            stoUI.showToast(message, 'success')\r\n        \r\n        return {\r\n            success: true,\r\n                imported: {\r\n                    aliases: aliasCount\r\n                },\r\n            errors: parsed.errors\r\n            }\r\n        } catch (error) {\r\n            stoUI.showToast('Import failed: ' + error.message, 'error')\r\n            return { success: false, error: error.message }\r\n        }\r\n    }\r\n\r\n    // Export profile to keybind file format\r\n    exportProfile(profile) {\r\n        let output = '';\r\n        \r\n        // Header\r\n        output += `# ${profile.name} - ${profile.mode} mode\\n`;\r\n        output += `# Generated by STO Tools Keybind Manager\\n`;\r\n        output += `# ${new Date().toLocaleString()}\\n\\n`;\r\n        \r\n        // Export keybinds only (aliases exported separately)\r\n        output += `# Keybind Commands\\n`;\r\n        const sortedKeys = Object.keys(profile.keys).sort(this.compareKeys.bind(this));\r\n        \r\n        sortedKeys.forEach(key => {\r\n            const commands = profile.keys[key];\r\n            if (commands && commands.length > 0) {\r\n                let commandString;\r\n                \r\n                // Check if this key should use stabilized execution order\r\n                let shouldStabilize = false;\r\n                if (profile.keybindMetadata) {\r\n                    const env = profile.mode || 'space';\r\n                    if (profile.keybindMetadata[env] && profile.keybindMetadata[env][key]) {\r\n                        shouldStabilize = !!profile.keybindMetadata[env][key].stabilizeExecutionOrder;\r\n                    } else if (profile.keybindMetadata[key]) {\r\n                        // Legacy flat structure\r\n                        shouldStabilize = !!profile.keybindMetadata[key].stabilizeExecutionOrder;\r\n                    }\r\n                }\r\n                \r\n                if (shouldStabilize && commands.length > 1) {\r\n                    commandString = this.generateMirroredCommandString(commands);\r\n                } else {\r\n                    commandString = commands.map(cmd => cmd.command).join(' $$ ');\r\n                }\r\n                \r\n                // Export with optional parameter format for compatibility (empty second parameter)\r\n                output += `${key} \"${commandString}\" \"\"\\n`;\r\n            } else {\r\n                // Export empty keybinds with the two-parameter format\r\n                output += `${key} \"\" \"\"\\n`;\r\n            }\r\n        });\r\n        \r\n        return output;\r\n    }\r\n\r\n    // Key comparison for sorting\r\n    compareKeys(a, b) {\r\n        // Function keys first\r\n        const aIsF = a.match(/^F(\\d+)$/);\r\n        const bIsF = b.match(/^F(\\d+)$/);\r\n        \r\n        if (aIsF && bIsF) {\r\n            return parseInt(aIsF[1]) - parseInt(bIsF[1]);\r\n        }\r\n        if (aIsF && !bIsF) return -1;\r\n        if (!aIsF && bIsF) return 1;\r\n        \r\n        // Numbers next\r\n        const aIsNum = /^\\d+$/.test(a);\r\n        const bIsNum = /^\\d+$/.test(b);\r\n        \r\n        if (aIsNum && bIsNum) {\r\n            return parseInt(a) - parseInt(b);\r\n        }\r\n        if (aIsNum && !bIsNum) return -1;\r\n        if (!aIsNum && bIsNum) return 1;\r\n        \r\n        // Letters\r\n        const aIsLetter = /^[A-Z]$/.test(a);\r\n        const bIsLetter = /^[A-Z]$/.test(b);\r\n        \r\n        if (aIsLetter && bIsLetter) {\r\n            return a.localeCompare(b);\r\n        }\r\n        if (aIsLetter && !bIsLetter) return -1;\r\n        if (!aIsLetter && bIsLetter) return 1;\r\n        \r\n        // Special keys\r\n        const specialOrder = ['Space', 'Tab', 'Enter', 'Escape'];\r\n        const aSpecial = specialOrder.indexOf(a);\r\n        const bSpecial = specialOrder.indexOf(b);\r\n        \r\n        if (aSpecial !== -1 && bSpecial !== -1) {\r\n            return aSpecial - bSpecial;\r\n        }\r\n        if (aSpecial !== -1 && bSpecial === -1) return -1;\r\n        if (aSpecial === -1 && bSpecial !== -1) return 1;\r\n        \r\n        // Default alphabetical\r\n        return a.localeCompare(b);\r\n    }\r\n\r\n    // Validation methods\r\n    isValidKey(key) {\r\n        // Handle null, undefined, or non-string values\r\n        if (!key || typeof key !== 'string') {\r\n            return false;\r\n        }\r\n        \r\n        // Case-insensitive validation since STO keybinds are case insensitive\r\n        return this.validKeys.some(validKey => validKey.toLowerCase() === key.toLowerCase());\r\n    }\r\n\r\n    isValidAliasName(name) {\r\n        return STO_DATA.validation.aliasNamePattern.test(name);\r\n    }\r\n\r\n    validateKeybind(key, commands) {\r\n        const errors = [];\r\n        \r\n        // Validate key\r\n        if (!this.isValidKey(key)) {\r\n            errors.push(`Invalid key name: ${key}`);\r\n        }\r\n        \r\n        // Validate commands\r\n        if (!commands || commands.length === 0) {\r\n            errors.push('At least one command is required');\r\n        } else {\r\n            commands.forEach((command, index) => {\r\n                if (!command.command || command.command.trim().length === 0) {\r\n                    errors.push(`Command ${index + 1} is empty`);\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Check command count limit\r\n        if (commands && commands.length > STO_DATA.validation.maxCommandsPerKey) {\r\n            errors.push(`Too many commands (max ${STO_DATA.validation.maxCommandsPerKey})`);\r\n        }\r\n        \r\n        return {\r\n            valid: errors.length === 0,\r\n            errors\r\n        };\r\n    }\r\n\r\n    // Key suggestion and filtering\r\n    suggestKeys(filter = '') {\r\n        const filterLower = filter.toLowerCase();\r\n        \r\n        return this.validKeys.filter(key => \r\n            key.toLowerCase().includes(filterLower)\r\n        ).slice(0, 20); // Limit suggestions\r\n    }\r\n\r\n    getCommonKeys() {\r\n        return [\r\n            'Space', 'Tab', 'Enter',\r\n            'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8',\r\n            '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',\r\n            'Ctrl+1', 'Ctrl+2', 'Ctrl+3', 'Ctrl+4',\r\n            'Alt+1', 'Alt+2', 'Alt+3', 'Alt+4',\r\n            'Shift+1', 'Shift+2', 'Shift+3', 'Shift+4'\r\n        ];\r\n    }\r\n\r\n    // Event listeners\r\n    setupEventListeners() {\r\n        // Note: File input handling is done directly in profiles.js\r\n        // No global event delegation needed for file input\r\n    }\r\n\r\n    handleKeybindFileImport(event) {\r\n        const file = event.target.files[0];\r\n        if (!file) return;\r\n        \r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            try {\r\n                this.importKeybindFile(e.target.result);\r\n            } catch (error) {\r\n                stoUI.showToast('Failed to import keybind file: ' + error.message, 'error');\r\n            }\r\n        };\r\n        reader.readAsText(file);\r\n        \r\n        // Reset file input\r\n        event.target.value = '';\r\n    }\r\n\r\n    // Utility methods\r\n    generateKeybindId() {\r\n        return 'keybind_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\r\n    }\r\n\r\n    cloneKeybind(keybind) {\r\n        return JSON.parse(JSON.stringify(keybind));\r\n    }\r\n\r\n    // Statistics\r\n    getProfileStats(profile) {\r\n        const stats = {\r\n            totalKeys: Object.keys(profile.keys).length,\r\n            totalCommands: 0,\r\n            totalAliases: Object.keys(profile.aliases || {}).length,\r\n            commandTypes: {},\r\n            mostUsedCommands: {}\r\n        };\r\n        \r\n        Object.values(profile.keys).forEach(commands => {\r\n            stats.totalCommands += commands.length;\r\n            \r\n            commands.forEach(command => {\r\n                // Count by type\r\n                stats.commandTypes[command.type] = (stats.commandTypes[command.type] || 0) + 1;\r\n                \r\n                // Count by command\r\n                stats.mostUsedCommands[command.command] = (stats.mostUsedCommands[command.command] || 0) + 1;\r\n            });\r\n        });\r\n        \r\n        return stats;\r\n    }\r\n}\r\n\r\n// Global keybind manager instance\r\n","// STO Tools Keybind Manager - Alias Management\r\n// Handles command alias creation, editing, and management\r\n\r\nexport default class STOAliasManager {\r\n    constructor() {\r\n        this.currentAlias = null;\r\n        // Don't initialize immediately - wait for app to be ready\r\n    }\r\n\r\n    init() {\r\n        this.setupEventListeners();\r\n        // Update command library to show existing aliases on initialization\r\n        this.updateCommandLibrary();\r\n    }\r\n\r\n    setupEventListeners() {\r\n        // Alias manager button\r\n        eventBus.onDom('addAliasBtn', 'click', 'alias-manager-open', () => {\r\n            this.showAliasManager();\r\n        });\r\n\r\n        // New alias button\r\n        eventBus.onDom('newAliasBtn', 'click', 'alias-new', () => {\r\n            this.showEditAliasModal();\r\n        });\r\n\r\n        // Save alias button\r\n        eventBus.onDom('saveAliasBtn', 'click', 'alias-save', () => {\r\n            this.saveAlias();\r\n        });\r\n\r\n        // Alias input changes for live preview\r\n        document.addEventListener('input', (e) => {\r\n            if (['aliasName', 'aliasCommands', 'aliasDescription'].includes(e.target.id)) {\r\n                this.updateAliasPreview();\r\n            }\r\n        });\r\n\r\n        // Insert $Target variable button in alias editor\r\n        document.addEventListener('click', (e) => {\r\n            if (e.target.classList.contains('insert-target-btn') || e.target.closest('.insert-target-btn')) {\r\n                e.preventDefault();\r\n                const button = e.target.classList.contains('insert-target-btn') ? e.target : e.target.closest('.insert-target-btn');\r\n                const textareaContainer = button.closest('.textarea-with-button');\r\n                const textarea = textareaContainer ? textareaContainer.querySelector('textarea') : null;\r\n                \r\n                if (textarea) {\r\n                    this.insertTargetVariable(textarea);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Alias Manager Modal\r\n    showAliasManager() {\r\n        this.renderAliasList();\r\n        modalManager.show('aliasManagerModal');\r\n    }\r\n\r\n    renderAliasList() {\r\n        const container = document.getElementById('aliasList');\r\n        if (!container) return;\r\n\r\n        const profile = app.getCurrentProfile();\r\n        if (!profile || !profile.aliases) {\r\n            container.innerHTML = `\r\n                <div class=\"empty-state\">\r\n                    <i class=\"fas fa-mask\"></i>\r\n                    <h4>No Aliases</h4>\r\n                    <p>Create command aliases to simplify complex command sequences.</p>\r\n                </div>\r\n            `;\r\n            return;\r\n        }\r\n\r\n        const aliases = Object.entries(profile.aliases);\r\n        \r\n        if (aliases.length === 0) {\r\n            container.innerHTML = `\r\n                <div class=\"empty-state\">\r\n                    <i class=\"fas fa-mask\"></i>\r\n                    <h4>No Aliases</h4>\r\n                    <p>Create command aliases to simplify complex command sequences.</p>\r\n                </div>\r\n            `;\r\n            return;\r\n        }\r\n\r\n        container.innerHTML = `\r\n            <div class=\"alias-grid\">\r\n                ${aliases.map(([name, alias]) => this.createAliasCard(name, alias)).join('')}\r\n            </div>\r\n        `;\r\n\r\n        // Add event listeners to alias cards\r\n        container.querySelectorAll('.alias-card').forEach(card => {\r\n            const aliasName = card.dataset.alias;\r\n            \r\n            card.querySelector('.edit-alias-btn')?.addEventListener('click', () => {\r\n                this.editAlias(aliasName);\r\n            });\r\n            \r\n            card.querySelector('.delete-alias-btn')?.addEventListener('click', () => {\r\n                this.confirmDeleteAlias(aliasName);\r\n            });\r\n            \r\n            card.querySelector('.use-alias-btn')?.addEventListener('click', () => {\r\n                this.useAlias(aliasName);\r\n            });\r\n        });\r\n    }\r\n\r\n    createAliasCard(name, alias) {\r\n        const commandPreview = alias.commands.length > 60 \r\n            ? alias.commands.substring(0, 60) + '...' \r\n            : alias.commands;\r\n\r\n        return `\r\n            <div class=\"alias-card\" data-alias=\"${name}\">\r\n                <div class=\"alias-header\">\r\n                    <h4>${name}</h4>\r\n                    <div class=\"alias-actions\">\r\n                        <button class=\"btn btn-small-icon edit-alias-btn\" title=\"Edit Alias\">\r\n                            <i class=\"fas fa-edit\"></i>\r\n                        </button>\r\n                        <button class=\"btn btn-small-icon use-alias-btn\" title=\"Add to Current Key\">\r\n                            <i class=\"fas fa-plus\"></i>\r\n                        </button>\r\n                        <button class=\"btn btn-small-icon btn-danger delete-alias-btn\" title=\"Delete Alias\">\r\n                            <i class=\"fas fa-trash\"></i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div class=\"alias-description\">\r\n                    ${alias.description || 'No description'}\r\n                </div>\r\n                <div class=\"alias-commands\">\r\n                    <code>${commandPreview}</code>\r\n                </div>\r\n                <div class=\"alias-usage\">\r\n                    Usage: <code>${name}</code>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    // Edit Alias Modal\r\n    showEditAliasModal(aliasName = null) {\r\n        const title = document.getElementById('editAliasTitle');\r\n        const nameInput = document.getElementById('aliasName');\r\n        const descInput = document.getElementById('aliasDescription');\r\n        const commandsInput = document.getElementById('aliasCommands');\r\n\r\n        if (aliasName) {\r\n            // Editing existing alias\r\n            const profile = app.getCurrentProfile();\r\n            const alias = profile.aliases[aliasName];\r\n            \r\n            if (title) title.textContent = 'Edit Alias';\r\n            if (nameInput) {\r\n                nameInput.value = aliasName;\r\n                nameInput.disabled = true; // Can't change alias name\r\n            }\r\n            if (descInput) descInput.value = alias.description || '';\r\n            if (commandsInput) commandsInput.value = alias.commands;\r\n            \r\n            this.currentAlias = aliasName;\r\n        } else {\r\n            // Creating new alias\r\n            if (title) title.textContent = 'New Alias';\r\n            if (nameInput) {\r\n                nameInput.value = '';\r\n                nameInput.disabled = false;\r\n            }\r\n            if (descInput) descInput.value = '';\r\n            if (commandsInput) commandsInput.value = '';\r\n            \r\n            this.currentAlias = null;\r\n        }\r\n\r\n        this.updateAliasPreview();\r\n        modalManager.hide('aliasManagerModal');\r\n        modalManager.show('editAliasModal');\r\n    }\r\n\r\n    editAlias(aliasName) {\r\n        this.showEditAliasModal(aliasName);\r\n    }\r\n\r\n    async confirmDeleteAlias(aliasName) {\r\n        const confirmed = await stoUI.confirm(\r\n            `Are you sure you want to delete the alias \"${aliasName}\"?`,\r\n            'Delete Alias',\r\n            'danger'\r\n        );\r\n\r\n        if (confirmed) {\r\n            this.deleteAlias(aliasName);\r\n        }\r\n    }\r\n\r\n    deleteAlias(aliasName) {\r\n        const profile = app.getCurrentProfile();\r\n        if (profile && profile.aliases && profile.aliases[aliasName]) {\r\n            delete profile.aliases[aliasName];\r\n            app.saveProfile();\r\n            app.setModified(true);\r\n            \r\n            this.renderAliasList();\r\n            this.updateCommandLibrary();\r\n            \r\n            stoUI.showToast(`Alias \"${aliasName}\" deleted`, 'success');\r\n        }\r\n    }\r\n\r\n    useAlias(aliasName) {\r\n        if (!app.selectedKey) {\r\n            stoUI.showToast('Please select a key first', 'warning');\r\n            return;\r\n        }\r\n\r\n        const command = {\r\n            command: aliasName,\r\n            type: 'alias',\r\n            icon: '🎭',\r\n            text: `Alias: ${aliasName}`,\r\n            id: app.generateCommandId()\r\n        };\r\n\r\n        app.addCommand(app.selectedKey, command);\r\n        modalManager.hide('aliasManagerModal');\r\n        stoUI.showToast(`Alias \"${aliasName}\" added to ${app.selectedKey}`, 'success');\r\n    }\r\n\r\n    // Save Alias\r\n    saveAlias() {\r\n        const nameInput = document.getElementById('aliasName');\r\n        const descInput = document.getElementById('aliasDescription');\r\n        const commandsInput = document.getElementById('aliasCommands');\r\n\r\n        if (!nameInput || !commandsInput) return;\r\n\r\n        const name = nameInput.value.trim();\r\n        const description = descInput?.value.trim() || '';\r\n        const commands = commandsInput.value.trim();\r\n\r\n        // Validation\r\n        const validation = this.validateAlias(name, commands);\r\n        if (!validation.valid) {\r\n            stoUI.showToast(validation.error, 'error');\r\n            return;\r\n        }\r\n\r\n        const profile = app.getCurrentProfile();\r\n        if (!profile) {\r\n            stoUI.showToast('No active profile', 'error');\r\n            return;\r\n        }\r\n\r\n        // Initialize aliases object if it doesn't exist\r\n        if (!profile.aliases) {\r\n            profile.aliases = {};\r\n        }\r\n\r\n        // Check for duplicate names (only when creating new alias)\r\n        if (!this.currentAlias && profile.aliases[name]) {\r\n            stoUI.showToast('An alias with this name already exists', 'error');\r\n            nameInput.focus();\r\n            return;\r\n        }\r\n\r\n        // Save alias\r\n        profile.aliases[name] = {\r\n            name: name,\r\n            description: description,\r\n            commands: commands,\r\n            created: this.currentAlias ? profile.aliases[name]?.created : new Date().toISOString(),\r\n            lastModified: new Date().toISOString()\r\n        };\r\n\r\n        app.saveProfile();\r\n        app.setModified(true);\r\n\r\n        // Update UI\r\n        this.updateCommandLibrary();\r\n        \r\n        const action = this.currentAlias ? 'updated' : 'created';\r\n        stoUI.showToast(`Alias \"${name}\" ${action}`, 'success');\r\n        \r\n        modalManager.hide('editAliasModal');\r\n        this.showAliasManager();\r\n    }\r\n\r\n    validateAlias(name, commands) {\r\n        // Validate name\r\n        if (!name) {\r\n            return { valid: false, error: 'Alias name is required' };\r\n        }\r\n\r\n        if (!STO_DATA.validation.aliasNamePattern.test(name)) {\r\n            return { valid: false, error: 'Invalid alias name. Use only letters, numbers, and underscores. Must start with a letter.' };\r\n        }\r\n\r\n        if (name.length > 30) {\r\n            return { valid: false, error: 'Alias name is too long (max 30 characters)' };\r\n        }\r\n\r\n        // Check for reserved names\r\n        const reservedNames = ['alias', 'bind', 'unbind', 'bind_load_file', 'bind_save_file'];\r\n        if (reservedNames.includes(name.toLowerCase())) {\r\n            return { valid: false, error: 'This is a reserved command name' };\r\n        }\r\n\r\n        // Validate commands\r\n        if (!commands) {\r\n            return { valid: false, error: 'Commands are required' };\r\n        }\r\n\r\n        if (commands.length > 500) {\r\n            return { valid: false, error: 'Command sequence is too long (max 500 characters)' };\r\n        }\r\n\r\n        // Check for circular references (only if app is available)\r\n        if (typeof app !== 'undefined' && app.getCurrentProfile) {\r\n            const profile = app.getCurrentProfile();\r\n            if (profile && profile.aliases) {\r\n                const aliasNames = Object.keys(profile.aliases);\r\n                if (aliasNames.some(aliasName => commands.includes(aliasName) && aliasName !== name)) {\r\n                    // This is a simplified check - a more thorough check would trace the full dependency graph\r\n                    return { valid: false, error: 'Potential circular reference detected' };\r\n                }\r\n            }\r\n        }\r\n\r\n        return { valid: true };\r\n    }\r\n\r\n    updateAliasPreview() {\r\n        const preview = document.getElementById('aliasPreview');\r\n        const nameInput = document.getElementById('aliasName');\r\n        const commandsInput = document.getElementById('aliasCommands');\r\n\r\n        if (!preview || !nameInput || !commandsInput) return;\r\n\r\n        const name = nameInput.value.trim() || 'AliasName';\r\n        const commands = commandsInput.value.trim() || 'command sequence';\r\n\r\n        preview.textContent = `alias ${name} <& ${commands} &>`;\r\n    }\r\n\r\n    // Command Library Integration\r\n    updateCommandLibrary() {\r\n        const profile = app.getCurrentProfile();\r\n        if (!profile || !profile.aliases) return;\r\n\r\n        // Find or create aliases category in command library\r\n        const categories = document.getElementById('commandCategories');\r\n        if (!categories) return;\r\n\r\n        // Remove existing alias categories\r\n        const existingAliasCategory = categories.querySelector('[data-category=\"aliases\"]');\r\n        if (existingAliasCategory) {\r\n            existingAliasCategory.remove();\r\n        }\r\n        const existingVertigoCategory = categories.querySelector('[data-category=\"vertigo-aliases\"]');\r\n        if (existingVertigoCategory) {\r\n            existingVertigoCategory.remove();\r\n        }\r\n\r\n        // Separate regular aliases from VFX aliases\r\n        const allAliases = Object.entries(profile.aliases);\r\n        const regularAliases = allAliases.filter(([name, alias]) => \r\n            !name.startsWith('dynFxSetFXExlusionList_')\r\n        );\r\n        const vertigoAliases = allAliases.filter(([name, alias]) => \r\n            name.startsWith('dynFxSetFXExlusionList_')\r\n        );\r\n\r\n        // Add regular aliases category if there are regular aliases\r\n        if (regularAliases.length > 0) {\r\n            const aliasCategory = this.createAliasCategoryElement(regularAliases, 'aliases', 'Command Aliases', 'fas fa-mask');\r\n            categories.appendChild(aliasCategory);\r\n        }\r\n\r\n        // Add VFX aliases category if there are VERTIGO aliases\r\n        if (vertigoAliases.length > 0) {\r\n            const vertigoCategory = this.createAliasCategoryElement(vertigoAliases, 'vertigo-aliases', 'VFX Aliases', 'fas fa-eye-slash');\r\n            categories.appendChild(vertigoCategory);\r\n        }\r\n    }\r\n\r\n    createAliasCategoryElement(aliases, categoryType = 'aliases', title = 'Command Aliases', iconClass = 'fas fa-mask') {\r\n        const element = document.createElement('div');\r\n        element.className = 'category';\r\n        element.dataset.category = categoryType;\r\n        \r\n        // Check if category should be collapsed (similar to main command library)\r\n        const storageKey = `commandCategory_${categoryType}_collapsed`;\r\n        const isCollapsed = localStorage.getItem(storageKey) === 'true';\r\n        \r\n        // Choose appropriate icon and styling for different alias types\r\n        const isVertigo = categoryType === 'vertigo-aliases';\r\n        const itemIcon = isVertigo ? '👁️' : '🎭';\r\n        const itemClass = isVertigo ? 'command-item vertigo-alias-item' : 'command-item alias-item';\r\n        \r\n        element.innerHTML = `\r\n            <h4 class=\"${isCollapsed ? 'collapsed' : ''}\" data-category=\"${categoryType}\">\r\n                <i class=\"fas fa-chevron-right category-chevron\"></i>\r\n                <i class=\"${iconClass}\"></i> \r\n                ${title}\r\n                <span class=\"command-count\">(${aliases.length})</span>\r\n            </h4>\r\n            <div class=\"category-commands ${isCollapsed ? 'collapsed' : ''}\">\r\n                ${aliases.map(([name, alias]) => `\r\n                    <div class=\"${itemClass}\" data-alias=\"${name}\" title=\"${alias.description || alias.commands}\">\r\n                        ${itemIcon} ${name}\r\n                    </div>\r\n                `).join('')}\r\n            </div>\r\n        `;\r\n        \r\n        // Add click handler for category header\r\n        const header = element.querySelector('h4');\r\n        header.addEventListener('click', () => {\r\n            this.toggleAliasCategory(categoryType, element);\r\n        });\r\n        \r\n        // Add click handlers for aliases\r\n        element.addEventListener('click', (e) => {\r\n            if (e.target.classList.contains('alias-item') || e.target.classList.contains('vertigo-alias-item')) {\r\n                const aliasName = e.target.dataset.alias;\r\n                this.addAliasToKey(aliasName);\r\n            }\r\n        });\r\n        \r\n        return element;\r\n    }\r\n\r\n    toggleAliasCategory(categoryType, element) {\r\n        const header = element.querySelector('h4');\r\n        const commands = element.querySelector('.category-commands');\r\n        const chevron = header.querySelector('.category-chevron');\r\n        \r\n        const isCollapsed = commands.classList.contains('collapsed');\r\n        const storageKey = `commandCategory_${categoryType}_collapsed`;\r\n        \r\n        if (isCollapsed) {\r\n            commands.classList.remove('collapsed');\r\n            header.classList.remove('collapsed');\r\n            chevron.style.transform = 'rotate(90deg)';\r\n            localStorage.setItem(storageKey, 'false');\r\n        } else {\r\n            commands.classList.add('collapsed');\r\n            header.classList.add('collapsed');\r\n            chevron.style.transform = 'rotate(0deg)';\r\n            localStorage.setItem(storageKey, 'true');\r\n        }\r\n    }\r\n\r\n    addAliasToKey(aliasName) {\r\n        if (!app.selectedKey) {\r\n            stoUI.showToast('Please select a key first', 'warning');\r\n            return;\r\n        }\r\n\r\n        const profile = app.getCurrentProfile();\r\n        const alias = profile.aliases[aliasName];\r\n        \r\n        if (!alias) {\r\n            stoUI.showToast('Alias not found', 'error');\r\n            return;\r\n        }\r\n\r\n        const command = {\r\n            command: aliasName,\r\n            type: 'alias',\r\n            icon: '🎭',\r\n            text: `Alias: ${aliasName}`,\r\n            description: alias.description,\r\n            id: app.generateCommandId()\r\n        };\r\n\r\n        app.addCommand(app.selectedKey, command);\r\n    }\r\n\r\n    // Alias Templates\r\n    getAliasTemplates() {\r\n        return {\r\n            space_combat: {\r\n                name: 'Space Combat',\r\n                description: 'Aliases for space combat scenarios',\r\n                templates: {\r\n                    'AttackRun': {\r\n                        name: 'AttackRun',\r\n                        description: 'Full attack sequence with targeting',\r\n                        commands: 'target_nearest_enemy $$ +STOTrayExecByTray 0 0 $$ +STOTrayExecByTray 0 1'\r\n                    },\r\n                    'DefensiveMode': {\r\n                        name: 'DefensiveMode',\r\n                        description: 'Defensive abilities and shield management',\r\n                        commands: 'target_self $$ +power_exec Distribute_Shields $$ +STOTrayExecByTray 2 0 $$ +STOTrayExecByTray 2 1'\r\n                    },\r\n                    'HealSelf': {\r\n                        name: 'HealSelf',\r\n                        description: 'Self-healing sequence',\r\n                        commands: 'target_self $$ +STOTrayExecByTray 3 0 $$ +STOTrayExecByTray 3 1'\r\n                    }\r\n                }\r\n            },\r\n            ground_combat: {\r\n                name: 'Ground Combat',\r\n                description: 'Aliases for ground combat scenarios',\r\n                templates: {\r\n                    'GroundAttack': {\r\n                        name: 'GroundAttack',\r\n                        description: 'Basic ground combat sequence',\r\n                        commands: 'target_nearest_enemy $$ +STOTrayExecByTray 0 0 $$ +STOTrayExecByTray 0 1'\r\n                    },\r\n                    'GroundHeal': {\r\n                        name: 'GroundHeal',\r\n                        description: 'Ground healing sequence',\r\n                        commands: 'target_self $$ +STOTrayExecByTray 1 0 $$ +STOTrayExecByTray 1 1'\r\n                    }\r\n                }\r\n            },\r\n            communication: {\r\n                name: 'Communication',\r\n                description: 'Aliases for team communication',\r\n                templates: {\r\n                    'TeamReady': {\r\n                        name: 'TeamReady',\r\n                        description: 'Announce ready status to team',\r\n                        commands: 'team Ready!'\r\n                    },\r\n                    'NeedHealing': {\r\n                        name: 'NeedHealing',\r\n                        description: 'Request healing from team',\r\n                        commands: 'team Need healing!'\r\n                    },\r\n                    'Incoming': {\r\n                        name: 'Incoming',\r\n                        description: 'Warn team of incoming enemies',\r\n                        commands: 'team Incoming enemies!'\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    createAliasFromTemplate(category, templateId) {\r\n        const templates = this.getAliasTemplates();\r\n        const template = templates[category]?.templates?.[templateId];\r\n        \r\n        if (!template) {\r\n            stoUI.showToast('Template not found', 'error');\r\n            return;\r\n        }\r\n\r\n        // Check if alias already exists\r\n        const profile = app.getCurrentProfile();\r\n        if (profile.aliases && profile.aliases[template.name]) {\r\n            stoUI.showToast(`Alias \"${template.name}\" already exists`, 'warning');\r\n            return;\r\n        }\r\n\r\n        // Create alias\r\n        if (!profile.aliases) {\r\n            profile.aliases = {};\r\n        }\r\n\r\n        profile.aliases[template.name] = {\r\n            ...template,\r\n            created: new Date().toISOString(),\r\n            lastModified: new Date().toISOString()\r\n        };\r\n\r\n        app.saveProfile();\r\n        app.setModified(true);\r\n        \r\n        this.updateCommandLibrary();\r\n        this.renderAliasList();\r\n        \r\n        stoUI.showToast(`Alias \"${template.name}\" created from template`, 'success');\r\n    }\r\n\r\n    // Utility Methods\r\n\r\n    getAliasUsage(aliasName) {\r\n        const profile = app.getCurrentProfile();\r\n        if (!profile) return [];\r\n\r\n        const usage = [];\r\n        \r\n        // Check in keybinds\r\n        Object.entries(profile.keys).forEach(([key, commands]) => {\r\n            commands.forEach((command, index) => {\r\n                if (command.command === aliasName || command.command.includes(aliasName)) {\r\n                    usage.push({\r\n                        type: 'keybind',\r\n                        key: key,\r\n                        position: index + 1,\r\n                        context: `Key \"${key}\", command ${index + 1}`\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Check in other aliases\r\n        Object.entries(profile.aliases || {}).forEach(([name, alias]) => {\r\n            if (name !== aliasName && alias.commands.includes(aliasName)) {\r\n                usage.push({\r\n                    type: 'alias',\r\n                    alias: name,\r\n                    context: `Alias \"${name}\"`\r\n                });\r\n            }\r\n        });\r\n\r\n        return usage;\r\n    }\r\n\r\n    insertTargetVariable(textarea) {\r\n        const targetVar = '$Target';\r\n        const cursorPosition = textarea.selectionStart;\r\n        const value = textarea.value;\r\n        const newValue = value.slice(0, cursorPosition) + targetVar + value.slice(cursorPosition);\r\n        textarea.value = newValue;\r\n        textarea.setSelectionRange(cursorPosition + targetVar.length, cursorPosition + targetVar.length);\r\n        textarea.focus();\r\n        \r\n        // Trigger input event to update preview\r\n        textarea.dispatchEvent(new Event('input', { bubbles: true }));\r\n    }\r\n}\r\n\r\n// Global alias manager instance\r\n","// STO Tools Keybind Manager - Export Functionality\r\n// Handles exporting keybinds and profiles in various formats\r\n\r\nexport default class STOExportManager {\r\n    constructor() {\r\n        this.exportFormats = {\r\n            sto_keybind: 'STO Keybind File (.txt)',\r\n            json_profile: 'JSON Profile (.json)',\r\n            json_project: 'Complete Project (.json)',\r\n            csv_data: 'CSV Data (.csv)',\r\n            html_report: 'HTML Report (.html)'\r\n        };\r\n        \r\n        // Don't initialize immediately - wait for app to be ready\r\n    }\r\n\r\n    init() {\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    setupEventListeners() {\r\n        // Main export button\r\n        eventBus.onDom('exportKeybindsBtn', 'click', 'exportKeybinds', () => {\r\n            this.showExportOptions();\r\n        });\r\n\r\n        // Copy command preview\r\n        eventBus.onDom('copyPreviewBtn', 'click', 'copyPreview', () => {\r\n            this.copyCommandPreview();\r\n        });\r\n    }\r\n\r\n    // Export Options Dialog\r\n    async showExportOptions() {\r\n        const profile = app.getCurrentProfile();\r\n        if (!profile) {\r\n            stoUI.showToast('No profile selected to export', 'warning');\r\n            return;\r\n        }\r\n\r\n        // For now, directly export as STO keybind file\r\n        // TODO: Add export options modal for different formats\r\n        this.exportSTOKeybindFile(profile);\r\n    }\r\n\r\n    // STO Keybind File Export\r\n    exportSTOKeybindFile(profile) {\r\n        try {\r\n            const content = this.generateSTOKeybindFile(profile);\r\n            this.downloadFile(content, this.generateFileName(profile, 'txt'), 'text/plain');\r\n            \r\n            stoUI.showToast('Keybind file exported successfully', 'success');\r\n        } catch (error) {\r\n            stoUI.showToast('Failed to export keybind file: ' + error.message, 'error');\r\n        }\r\n    }\r\n\r\n    generateSTOKeybindFile(profile, options = {}) {\r\n        let content = '';\r\n        \r\n        // Header with metadata\r\n        content += this.generateFileHeader(profile);\r\n        \r\n        // Export keybinds only (aliases are exported separately)\r\n        // Pass the profile and environment (if available) to the keybind section for per-key metadata access\r\n        content += this.generateKeybindSection(\r\n            profile.keys,\r\n            {\r\n                ...options,\r\n                profile,\r\n                // Support both explicit environment option or fallback to profile.mode/current environment string\r\n                environment: options.environment || profile.mode || 'space'\r\n            }\r\n        );\r\n        \r\n        // Footer with usage instructions\r\n        content += this.generateFileFooter();\r\n        \r\n        return content;\r\n    }\r\n\r\n    generateFileHeader(profile) {\r\n        const timestamp = new Date().toLocaleString();\r\n        \r\n        // Calculate stats locally if stoKeybinds is not available\r\n        let stats;\r\n        if (typeof stoKeybinds !== 'undefined' && stoKeybinds.getProfileStats) {\r\n            stats = stoKeybinds.getProfileStats(profile);\r\n        } else {\r\n            // Calculate stats locally\r\n            stats = {\r\n                totalKeys: Object.keys(profile.keys || {}).length,\r\n                totalCommands: 0\r\n            };\r\n            \r\n            Object.values(profile.keys || {}).forEach(commands => {\r\n                stats.totalCommands += commands.length;\r\n            });\r\n        }\r\n        \r\n        return `; ================================================================\r\n; ${profile.name} - STO Keybind Configuration\r\n; ================================================================\r\n; Mode: ${profile.mode.toUpperCase()}\r\n; Generated: ${timestamp}\r\n; Created by: STO Tools Keybind Manager v${STO_DATA.settings.version}\r\n;\r\n; Keybind Statistics:\r\n; - Keys bound: ${stats.totalKeys}\r\n; - Total commands: ${stats.totalCommands}\r\n;\r\n; Note: Aliases are exported separately\r\n; To use this file in Star Trek Online:\r\n; 1. Save this file to your STO Live folder\r\n; 2. In game, type: /bind_load_file ${this.generateFileName(profile, 'txt')}\r\n; ================================================================\r\n\r\n`;\r\n    }\r\n\r\n    generateAliasSection(aliases) {\r\n        if (!aliases || Object.keys(aliases).length === 0) {\r\n            return '';\r\n        }\r\n\r\n        let content = `; Command Aliases\r\n; ================================================================\r\n; Aliases allow you to create custom commands that execute\r\n; multiple commands in sequence. Use them in keybinds like any\r\n; other command.\r\n; ================================================================\r\n\r\n`;\r\n\r\n        // Sort aliases alphabetically\r\n        const sortedAliases = Object.entries(aliases).sort(([a], [b]) => a.localeCompare(b));\r\n        \r\n        sortedAliases.forEach(([name, alias]) => {\r\n            if (alias.description) {\r\n                content += `; ${alias.description}\\n`;\r\n            }\r\n            content += `alias ${name} <& ${alias.commands} &>\\n\\n`;\r\n        });\r\n\r\n        return content;\r\n    }\r\n\r\n    generateKeybindSection(keys, options = {}) {\r\n        if (!keys || Object.keys(keys).length === 0) {\r\n            return '; No keybinds defined\\n\\n';\r\n        }\r\n\r\n        let content = `; Keybind Commands\r\n; ================================================================\r\n; Each line binds a key to one or more commands.\r\n; Multiple commands are separated by $$`;\r\n        \r\n        if (options.stabilizeExecutionOrder) {\r\n            content += `\r\n; EXECUTION ORDER STABILIZATION: ON\r\n; Commands are mirrored to ensure consistent execution order\r\n; Phase 1: left-to-right, Phase 2: right-to-left`;\r\n        }\r\n        \r\n        content += `\r\n; ================================================================\r\n\r\n`;\r\n\r\n        // Sort keys using the keybind manager's sorting logic if available, otherwise use local sorting\r\n        let sortedKeys;\r\n        if (typeof stoKeybinds !== 'undefined' && stoKeybinds.compareKeys) {\r\n            sortedKeys = Object.keys(keys).sort(stoKeybinds.compareKeys.bind(stoKeybinds));\r\n        } else {\r\n            // Local key sorting implementation\r\n            sortedKeys = Object.keys(keys).sort(this.compareKeys.bind(this));\r\n        }\r\n        \r\n        // Group keys by type for better organization\r\n        const keyGroups = this.groupKeysByType(sortedKeys, keys);\r\n        \r\n        Object.entries(keyGroups).forEach(([groupName, groupKeys]) => {\r\n            if (groupKeys.length === 0) return;\r\n            \r\n            content += `; ${groupName}\\n`;\r\n            content += `; ${'-'.repeat(groupName.length)}\\n`;\r\n            \r\n            groupKeys.forEach(key => {\r\n                const commands = keys[key];\r\n                if (commands && commands.length > 0) {\r\n                    let commandString;\r\n                    \r\n                    // Global stabilization (legacy – kept for backward-compatibility/tests)\r\n                    const globalStabilize = options.stabilizeExecutionOrder;\r\n\r\n                    // Environment-scoped per-key stabilization\r\n                    let perKeyStabilize = false;\r\n\r\n                    if (options.profile && options.profile.keybindMetadata) {\r\n                        if (options.environment && options.profile.keybindMetadata[options.environment]) {\r\n                            // New structure: keybindMetadata -> environment -> key\r\n                            const envMeta = options.profile.keybindMetadata[options.environment];\r\n                            perKeyStabilize = !!(envMeta && envMeta[key] && envMeta[key].stabilizeExecutionOrder);\r\n                        } else {\r\n                            // Legacy flat structure (no environment nesting)\r\n                            perKeyStabilize = !!(options.profile.keybindMetadata[key] && \r\n                                                 options.profile.keybindMetadata[key].stabilizeExecutionOrder);\r\n                        }\r\n                    }\r\n\r\n                    const shouldStabilize = globalStabilize || perKeyStabilize;\r\n                    \r\n                    if (shouldStabilize && commands.length > 1) {\r\n                        // Use mirroring for stabilized execution order\r\n                        commandString = stoKeybinds ? stoKeybinds.generateMirroredCommandString(commands) \r\n                                                    : commands.map(cmd => cmd.command).join(' $$ ');\r\n                    } else {\r\n                        commandString = commands.map(cmd => cmd.command).join(' $$ ');\r\n                    }\r\n                    content += `${key} \"${commandString}\"\\n`;\r\n                }\r\n            });\r\n            \r\n            content += '\\n';\r\n        });\r\n\r\n        return content;\r\n    }\r\n\r\n    // Local key comparison for sorting (fallback when stoKeybinds is not available)\r\n    compareKeys(a, b) {\r\n        // Function keys first\r\n        const aIsF = a.match(/^F(\\d+)$/);\r\n        const bIsF = b.match(/^F(\\d+)$/);\r\n        \r\n        if (aIsF && bIsF) {\r\n            return parseInt(aIsF[1]) - parseInt(bIsF[1]);\r\n        }\r\n        if (aIsF && !bIsF) return -1;\r\n        if (!aIsF && bIsF) return 1;\r\n        \r\n        // Numbers next\r\n        const aIsNum = /^\\d+$/.test(a);\r\n        const bIsNum = /^\\d+$/.test(b);\r\n        \r\n        if (aIsNum && bIsNum) {\r\n            return parseInt(a) - parseInt(b);\r\n        }\r\n        if (aIsNum && !bIsNum) return -1;\r\n        if (!aIsNum && bIsNum) return 1;\r\n        \r\n        // Letters\r\n        const aIsLetter = /^[A-Z]$/.test(a);\r\n        const bIsLetter = /^[A-Z]$/.test(b);\r\n        \r\n        if (aIsLetter && bIsLetter) {\r\n            return a.localeCompare(b);\r\n        }\r\n        if (aIsLetter && !bIsLetter) return -1;\r\n        if (!aIsLetter && bIsLetter) return 1;\r\n        \r\n        // Special keys\r\n        const specialOrder = ['Space', 'Tab', 'Enter', 'Escape'];\r\n        const aSpecial = specialOrder.indexOf(a);\r\n        const bSpecial = specialOrder.indexOf(b);\r\n        \r\n        if (aSpecial !== -1 && bSpecial !== -1) {\r\n            return aSpecial - bSpecial;\r\n        }\r\n        if (aSpecial !== -1 && bSpecial === -1) return -1;\r\n        if (aSpecial === -1 && bSpecial !== -1) return 1;\r\n        \r\n        // Default alphabetical\r\n        return a.localeCompare(b);\r\n    }\r\n\r\n    groupKeysByType(sortedKeys, keys) {\r\n        const groups = {\r\n            'Function Keys': [],\r\n            'Number Keys': [],\r\n            'Letter Keys': [],\r\n            'Special Keys': [],\r\n            'Modifier Combinations': []\r\n        };\r\n\r\n        sortedKeys.forEach(key => {\r\n            if (/^F\\d+$/.test(key)) {\r\n                groups['Function Keys'].push(key);\r\n            } else if (/^\\d+$/.test(key)) {\r\n                groups['Number Keys'].push(key);\r\n            } else if (/^[A-Z]$/.test(key)) {\r\n                groups['Letter Keys'].push(key);\r\n            } else if (key.includes('+')) {\r\n                groups['Modifier Combinations'].push(key);\r\n            } else {\r\n                groups['Special Keys'].push(key);\r\n            }\r\n        });\r\n\r\n        return groups;\r\n    }\r\n\r\n    generateFileFooter() {\r\n        return `; ================================================================\r\n; End of keybind file\r\n; ================================================================\r\n; \r\n; Additional STO Commands Reference:\r\n; \r\n; Targeting:\r\n;   target_nearest_enemy    - Target closest hostile\r\n;   target_nearest_friend   - Target closest friendly\r\n;   target_self            - Target your own ship\r\n; \r\n; Combat:\r\n;   FireAll               - Fire all weapons\r\n;   FirePhasers          - Fire beam weapons only\r\n;   FireTorps            - Fire torpedo weapons only\r\n; \r\n; Shield Management:\r\n;   +power_exec <ability> - Execute bridge officer ability\r\n;   Examples: +power_exec Distribute_Shields \r\n; \r\n; Tray Execution:\r\n;   +STOTrayExecByTray <tray> <slot> - Execute ability from tray\r\n;   Example: +STOTrayExecByTray 0 0  (Tray 1, Slot 1)\r\n; \r\n; For more commands and help, visit the STO Wiki or community forums.\r\n; ================================================================\r\n`;\r\n    }\r\n\r\n    // JSON Profile Export\r\n    exportJSONProfile(profile) {\r\n        try {\r\n            const exportData = {\r\n                version: STO_DATA.settings.version,\r\n                exported: new Date().toISOString(),\r\n                type: 'profile',\r\n                profile: this.sanitizeProfileForExport(profile)\r\n            };\r\n\r\n            const content = JSON.stringify(exportData, null, 2);\r\n            this.downloadFile(content, this.generateFileName(profile, 'json'), 'application/json');\r\n            \r\n            stoUI.showToast('Profile exported as JSON', 'success');\r\n        } catch (error) {\r\n            stoUI.showToast('Failed to export profile: ' + error.message, 'error');\r\n        }\r\n    }\r\n\r\n    // Complete Project Export\r\n    exportCompleteProject() {\r\n        try {\r\n            const data = stoStorage.getAllData();\r\n            const exportData = {\r\n                version: STO_DATA.settings.version,\r\n                exported: new Date().toISOString(),\r\n                type: 'project',\r\n                data: data\r\n            };\r\n\r\n            const content = JSON.stringify(exportData, null, 2);\r\n            const filename = `STO_Tools_Keybinds_Project_${new Date().toISOString().split('T')[0]}.json`;\r\n            this.downloadFile(content, filename, 'application/json');\r\n            \r\n            stoUI.showToast('Complete project exported', 'success');\r\n        } catch (error) {\r\n            stoUI.showToast('Failed to export project: ' + error.message, 'error');\r\n        }\r\n    }\r\n\r\n    // CSV Data Export\r\n    exportCSVData(profile) {\r\n        try {\r\n            const csvContent = this.generateCSVData(profile);\r\n            this.downloadFile(csvContent, this.generateFileName(profile, 'csv'), 'text/csv');\r\n            \r\n            stoUI.showToast('Data exported as CSV', 'success');\r\n        } catch (error) {\r\n            stoUI.showToast('Failed to export CSV: ' + error.message, 'error');\r\n        }\r\n    }\r\n\r\n    generateCSVData(profile) {\r\n        let csv = 'Key,Command,Type,Description,Position\\n';\r\n        \r\n        Object.entries(profile.keys).forEach(([key, commands]) => {\r\n            commands.forEach((command, index) => {\r\n                const row = [\r\n                    this.escapeCSV(key),\r\n                    this.escapeCSV(command.command),\r\n                    this.escapeCSV(command.type),\r\n                    this.escapeCSV(command.text || ''),\r\n                    index + 1\r\n                ].join(',');\r\n                csv += row + '\\n';\r\n            });\r\n        });\r\n\r\n        return csv;\r\n    }\r\n\r\n    escapeCSV(value) {\r\n        if (typeof value !== 'string') {\r\n            value = String(value);\r\n        }\r\n        \r\n        if (value.includes(',') || value.includes('\"') || value.includes('\\n')) {\r\n            return '\"' + value.replace(/\"/g, '\"\"') + '\"';\r\n        }\r\n        \r\n        return value;\r\n    }\r\n\r\n    // HTML Report Export\r\n    exportHTMLReport(profile) {\r\n        try {\r\n            const htmlContent = this.generateHTMLReport(profile);\r\n            this.downloadFile(htmlContent, this.generateFileName(profile, 'html'), 'text/html');\r\n            \r\n            stoUI.showToast('HTML report exported', 'success');\r\n        } catch (error) {\r\n            stoUI.showToast('Failed to export HTML report: ' + error.message, 'error');\r\n        }\r\n    }\r\n\r\n    generateHTMLReport(profile) {\r\n        const stats = stoKeybinds.getProfileStats(profile);\r\n        const timestamp = new Date().toLocaleString();\r\n\r\n        return `<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>${profile.name} - STO Keybind Report</title>\r\n    <style>\r\n        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }\r\n        .header { border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }\r\n        .stats { background: #f5f5f5; padding: 20px; border-radius: 5px; margin-bottom: 30px; }\r\n        .keybind-group { margin-bottom: 30px; }\r\n        .keybind-group h3 { color: #333; border-bottom: 1px solid #ccc; padding-bottom: 5px; }\r\n        .keybind { margin-bottom: 15px; padding: 10px; background: #fafafa; border-left: 4px solid #007acc; }\r\n        .key { font-weight: bold; color: #007acc; }\r\n        .commands { margin-top: 5px; }\r\n        .command { display: inline-block; margin: 2px 5px 2px 0; padding: 2px 8px; background: #e0e0e0; border-radius: 3px; font-size: 0.9em; }\r\n        .command.targeting { background: #d4edda; }\r\n        .command.combat { background: #f8d7da; }\r\n        .command.tray { background: #cce5ff; }\r\n        .command.power { background: #fff3cd; }\r\n        .command.alias { background: #e2e3e5; }\r\n        .aliases { margin-top: 30px; }\r\n        .alias { margin-bottom: 15px; padding: 10px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; }\r\n        .alias-name { font-weight: bold; color: #495057; }\r\n        .alias-commands { font-family: monospace; background: #e9ecef; padding: 5px; margin-top: 5px; border-radius: 3px; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"header\">\r\n        <h1>${profile.name}</h1>\r\n        <p><strong>Mode:</strong> ${profile.mode.toUpperCase()}</p>\r\n        <p><strong>Generated:</strong> ${timestamp}</p>\r\n        <p><strong>Created by:</strong> STO Tools Keybind Manager v${STO_DATA.settings.version}</p>\r\n    </div>\r\n\r\n    <div class=\"stats\">\r\n        <h2>Statistics</h2>\r\n        <ul>\r\n            <li><strong>Keys Bound:</strong> ${stats.totalKeys}</li>\r\n            <li><strong>Total Commands:</strong> ${stats.totalCommands}</li>\r\n            <li><strong>Aliases Defined:</strong> ${stats.totalAliases}</li>\r\n        </ul>\r\n    </div>\r\n\r\n    ${this.generateHTMLKeybindSection(profile.keys)}\r\n    ${this.generateHTMLAliasSection(profile.aliases)}\r\n\r\n    <div style=\"margin-top: 50px; padding-top: 20px; border-top: 1px solid #ccc; color: #666; font-size: 0.9em;\">\r\n        <p>This report was generated by STO Tools Keybind Manager. For more information about Star Trek Online keybinds, visit the STO Wiki.</p>\r\n    </div>\r\n</body>\r\n</html>`;\r\n    }\r\n\r\n    generateHTMLKeybindSection(keys) {\r\n        if (!keys || Object.keys(keys).length === 0) {\r\n            return '<div class=\"keybind-group\"><h2>Keybinds</h2><p>No keybinds defined.</p></div>';\r\n        }\r\n\r\n        const sortedKeys = Object.keys(keys).sort(stoKeybinds.compareKeys.bind(stoKeybinds));\r\n        const keyGroups = this.groupKeysByType(sortedKeys, keys);\r\n\r\n        let html = '<div class=\"keybind-group\"><h2>Keybinds</h2>';\r\n\r\n        Object.entries(keyGroups).forEach(([groupName, groupKeys]) => {\r\n            if (groupKeys.length === 0) return;\r\n\r\n            html += `<h3>${groupName}</h3>`;\r\n            \r\n            groupKeys.forEach(key => {\r\n                const commands = keys[key];\r\n                if (commands && commands.length > 0) {\r\n                    html += `<div class=\"keybind\">\r\n                        <div class=\"key\">${key}</div>\r\n                        <div class=\"commands\">\r\n                            ${commands.map(cmd => \r\n                                `<span class=\"command ${cmd.type}\">${cmd.text || cmd.command}</span>`\r\n                            ).join('')}\r\n                        </div>\r\n                    </div>`;\r\n                }\r\n            });\r\n        });\r\n\r\n        html += '</div>';\r\n        return html;\r\n    }\r\n\r\n    generateHTMLAliasSection(aliases) {\r\n        if (!aliases || Object.keys(aliases).length === 0) {\r\n            return '';\r\n        }\r\n\r\n        let html = '<div class=\"aliases\"><h2>Command Aliases</h2>';\r\n\r\n        Object.entries(aliases).sort(([a], [b]) => a.localeCompare(b)).forEach(([name, alias]) => {\r\n            html += `<div class=\"alias\">\r\n                <div class=\"alias-name\">${name}</div>\r\n                ${alias.description ? `<div>${alias.description}</div>` : ''}\r\n                <div class=\"alias-commands\">${alias.commands}</div>\r\n            </div>`;\r\n        });\r\n\r\n        html += '</div>';\r\n        return html;\r\n    }\r\n\r\n    // Copy Operations\r\n    copyCommandPreview() {\r\n        const preview = document.getElementById('commandPreview');\r\n        if (!preview || !preview.textContent.trim()) {\r\n            stoUI.showToast('No command to copy', 'warning');\r\n            return;\r\n        }\r\n\r\n        stoUI.copyToClipboard(preview.textContent);\r\n    }\r\n\r\n    // Utility Methods\r\n    generateFileName(profile, extension) {\r\n        const safeName = profile.name.replace(/[^a-zA-Z0-9\\-_]/g, '_');\r\n        const timestamp = new Date().toISOString().split('T')[0];\r\n        const environment = profile.mode || 'space'; // Use mode for environment\r\n        return `${safeName}_${environment}_${timestamp}.${extension}`;\r\n    }\r\n\r\n    downloadFile(content, filename, mimeType) {\r\n        const blob = new Blob([content], { type: mimeType });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = filename;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n    }\r\n\r\n    sanitizeProfileForExport(profile) {\r\n        // Create a clean copy of the profile for export\r\n        const sanitized = JSON.parse(JSON.stringify(profile));\r\n        \r\n        // Remove any internal IDs or temporary data\r\n        if (sanitized.keys) {\r\n            Object.values(sanitized.keys).forEach(commands => {\r\n                commands.forEach(command => {\r\n                    // Keep essential data, remove internal IDs\r\n                    delete command.id;\r\n                });\r\n            });\r\n        }\r\n\r\n        return sanitized;\r\n    }\r\n\r\n    // Batch Export Operations\r\n    exportAllProfiles() {\r\n        const data = stoStorage.getAllData();\r\n        const profiles = data.profiles;\r\n        \r\n        if (!profiles || Object.keys(profiles).length === 0) {\r\n            stoUI.showToast('No profiles to export', 'warning');\r\n            return;\r\n        }\r\n\r\n        // Create a zip-like structure (for now, export as separate files)\r\n        Object.entries(profiles).forEach(([id, profile]) => {\r\n            setTimeout(() => {\r\n                this.exportSTOKeybindFile(profile);\r\n            }, 100); // Small delay to prevent browser blocking\r\n        });\r\n\r\n        stoUI.showToast(`Exporting ${Object.keys(profiles).length} profiles...`, 'info');\r\n    }\r\n\r\n    // Import Operations (for completeness)\r\n    async importFromFile(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            \r\n            reader.onload = (e) => {\r\n                try {\r\n                    const content = e.target.result;\r\n                    const extension = file.name.split('.').pop().toLowerCase();\r\n                    \r\n                    switch (extension) {\r\n                        case 'txt':\r\n                            resolve(stoKeybinds.importKeybindFile(content));\r\n                            break;\r\n                        case 'json':\r\n                            resolve(this.importJSONFile(content));\r\n                            break;\r\n                        default:\r\n                            reject(new Error('Unsupported file format'));\r\n                    }\r\n                } catch (error) {\r\n                    reject(error);\r\n                }\r\n            };\r\n            \r\n            reader.onerror = () => reject(new Error('Failed to read file'));\r\n            reader.readAsText(file);\r\n        });\r\n    }\r\n\r\n    importJSONFile(content) {\r\n        try {\r\n            const data = JSON.parse(content);\r\n            \r\n            if (data.type === 'profile' && data.profile) {\r\n                return stoProfiles.importProfile(content);\r\n            } else if (data.type === 'project' && data.data) {\r\n                return stoStorage.importData(JSON.stringify(data.data));\r\n            } else {\r\n                throw new Error('Unknown JSON file format');\r\n            }\r\n        } catch (error) {\r\n            throw new Error('Invalid JSON file: ' + error.message);\r\n        }\r\n    }\r\n\r\n    // Separate Alias Export\r\n    exportAliases(profile) {\r\n        try {\r\n            const content = this.generateAliasFile(profile);\r\n            this.downloadFile(content, this.generateAliasFileName(profile, 'txt'), 'text/plain');\r\n            \r\n            stoUI.showToast('Aliases exported successfully', 'success');\r\n        } catch (error) {\r\n            stoUI.showToast('Failed to export aliases: ' + error.message, 'error');\r\n        }\r\n    }\r\n\r\n    generateAliasFile(profile) {\r\n        let content = '';\r\n        \r\n        // Header with metadata\r\n        const timestamp = new Date().toLocaleString();\r\n        const stats = {\r\n            totalAliases: Object.keys(profile.aliases || {}).length\r\n        };\r\n        \r\n        content += `; ================================================================\r\n; ${profile.name} - STO Alias Configuration\r\n; ================================================================\r\n; Mode: ${profile.mode.toUpperCase()}\r\n; Generated: ${timestamp}\r\n; Created by: STO Tools Keybind Manager v${STO_DATA.settings.version}\r\n;\r\n; Alias Statistics:\r\n; - Total aliases: ${stats.totalAliases}\r\n;\r\n; To use these aliases in Star Trek Online:\r\n; 1. Save this file as \"CommandAliases.txt\" (exactly, without quotes)\r\n; 2. Place it in your STO directory:\r\n;    [STO Install]\\\\Star Trek Online\\\\Live\\\\localdata\\\\CommandAliases.txt\r\n; 3. The aliases will be available when you start the game\r\n;\r\n; Alternative: You can append these aliases to an existing CommandAliases.txt\r\n; file if you already have one with other aliases.\r\n;\r\n; Common STO installation paths:\r\n; - Steam: C:\\\\Program Files (x86)\\\\Steam\\\\steamapps\\\\common\\\\Star Trek Online\r\n; - Epic: C:\\\\Program Files\\\\Epic Games\\\\Star Trek Online  \r\n; - Arc: C:\\\\Program Files (x86)\\\\Perfect World Entertainment\\\\Arc Games\\\\Star Trek Online\r\n; ================================================================\r\n\r\n`;\r\n\r\n        // Export aliases\r\n        if (profile.aliases && Object.keys(profile.aliases).length > 0) {\r\n            content += this.generateAliasSection(profile.aliases);\r\n        } else {\r\n            content += '; No aliases defined\\n\\n';\r\n        }\r\n        \r\n        return content;\r\n    }\r\n\r\n    generateAliasFileName(profile, extension) {\r\n        const safeName = profile.name.replace(/[^a-zA-Z0-9\\-_]/g, '_');\r\n        const timestamp = new Date().toISOString().split('T')[0];\r\n        const environment = profile.mode || 'space';\r\n        return `${safeName}_aliases_${environment}_${timestamp}.${extension}`;\r\n    }\r\n}\r\n\r\n// Global export manager instance\r\n","export default class STOModalManager {\r\n    constructor() {\r\n        this.overlayId = 'modalOverlay';\r\n    }\r\n\r\n    getOverlay() {\r\n        return document.getElementById(this.overlayId);\r\n    }\r\n\r\n    show(id) {\r\n        const modal = typeof id === 'string' ? document.getElementById(id) : id;\r\n        const overlay = this.getOverlay();\r\n        if (overlay && modal) {\r\n            overlay.classList.add('active');\r\n            modal.classList.add('active');\r\n            document.body.classList.add('modal-open');\r\n\r\n            const firstInput = modal.querySelector('input, textarea, select');\r\n            if (firstInput) {\r\n                setTimeout(() => firstInput.focus(), 100);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    hide(id) {\r\n        const modal = typeof id === 'string' ? document.getElementById(id) : id;\r\n        const overlay = this.getOverlay();\r\n        if (overlay && modal) {\r\n            modal.classList.remove('active');\r\n\r\n            // Hide overlay if no other modals are active\r\n            if (!document.querySelector('.modal.active')) {\r\n                overlay.classList.remove('active');\r\n                document.body.classList.remove('modal-open');\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n// Global instance\r\n","// STO Tools Keybind Manager - UI Utilities\r\n// Handles DOM manipulation, notifications, and user interface helpers\r\n\r\nexport default class STOUIManager {\r\n    constructor() {\r\n        this.toastQueue = [];\r\n        this.dragState = {\r\n            isDragging: false,\r\n            dragElement: null,\r\n            dragData: null\r\n        };\r\n        \r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.setupGlobalEventListeners();\r\n        this.setupTooltips();\r\n    }\r\n\r\n    // Toast Notifications\r\n    showToast(message, type = 'info', duration = 3000) {\r\n        const toast = this.createToast(message, type, duration);\r\n        const container = document.getElementById('toastContainer');\r\n        \r\n        if (container) {\r\n            container.appendChild(toast);\r\n            \r\n            // Trigger animation\r\n            requestAnimationFrame(() => {\r\n                toast.classList.add('show');\r\n            });\r\n            \r\n            // Auto remove\r\n            setTimeout(() => {\r\n                this.removeToast(toast);\r\n            }, duration);\r\n        }\r\n    }\r\n\r\n    createToast(message, type, duration) {\r\n        const toast = document.createElement('div');\r\n        toast.className = `toast toast-${type}`;\r\n        \r\n        const iconMap = {\r\n            success: 'fa-check-circle',\r\n            error: 'fa-exclamation-circle', \r\n            warning: 'fa-exclamation-triangle',\r\n            info: 'fa-info-circle'\r\n        };\r\n        \r\n        toast.innerHTML = `\r\n            <div class=\"toast-content\">\r\n                <i class=\"fas ${iconMap[type] || iconMap.info}\"></i>\r\n                <span class=\"toast-message\">${message}</span>\r\n                <button class=\"toast-close\">\r\n                    <i class=\"fas fa-times\"></i>\r\n                </button>\r\n            </div>\r\n        `;\r\n        \r\n        // Add close button functionality\r\n        const closeBtn = toast.querySelector('.toast-close');\r\n        closeBtn.addEventListener('click', () => {\r\n            this.removeToast(toast);\r\n        });\r\n        \r\n        return toast;\r\n    }\r\n\r\n    hideToast(toast) {\r\n        // Public method to hide a specific toast\r\n        if (toast && toast.parentNode) {\r\n            this.removeToast(toast);\r\n        }\r\n    }\r\n\r\n    removeToast(toast) {\r\n        toast.classList.add('removing');\r\n        setTimeout(() => {\r\n            if (toast.parentNode) {\r\n                toast.parentNode.removeChild(toast);\r\n            }\r\n        }, 300);\r\n    }\r\n\r\n    // Modal Management\r\n    showModal(modalId, data = null) {\r\n        const modal = document.getElementById(modalId);\r\n\r\n        if (modalManager.show(modalId)) {\r\n            \r\n            // Populate modal data if provided\r\n            if (data) {\r\n                this.populateModalData(modalId, data);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    hideModal(modalId) {\r\n        const modal = document.getElementById(modalId);\r\n\r\n        if (modalManager.hide(modalId)) {\r\n            \r\n            // Clear modal data\r\n            this.clearModalData(modalId);\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    hideAllModals() {\r\n        const modals = document.querySelectorAll('.modal.active');\r\n\r\n        modals.forEach(modal => {\r\n            modalManager.hide(modal.id);\r\n        });\r\n    }\r\n\r\n    populateModalData(modalId, data) {\r\n        const modal = document.getElementById(modalId);\r\n        if (!modal) return;\r\n        \r\n        // Generic data population\r\n        Object.entries(data).forEach(([key, value]) => {\r\n            const element = modal.querySelector(`[data-field=\"${key}\"], #${key}`);\r\n            if (element) {\r\n                if (element.type === 'checkbox') {\r\n                    element.checked = value;\r\n                } else {\r\n                    element.value = value;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    clearModalData(modalId) {\r\n        const modal = document.getElementById(modalId);\r\n        if (!modal) return;\r\n        \r\n        const inputs = modal.querySelectorAll('input, textarea, select');\r\n        inputs.forEach(input => {\r\n            if (input.type === 'checkbox') {\r\n                input.checked = false;\r\n            } else {\r\n                input.value = '';\r\n            }\r\n        });\r\n    }\r\n\r\n    // Loading States\r\n    showLoading(element, text = 'Loading...') {\r\n        if (typeof element === 'string') {\r\n            element = document.getElementById(element);\r\n        }\r\n        \r\n        if (element) {\r\n            element.classList.add('loading');\r\n            const originalContent = element.innerHTML;\r\n            element.dataset.originalContent = originalContent;\r\n            element.innerHTML = `\r\n                <div class=\"loading-spinner\">\r\n                    <i class=\"fas fa-spinner fa-spin\"></i>\r\n                    <span>${text}</span>\r\n                </div>\r\n            `;\r\n            element.disabled = true;\r\n        }\r\n    }\r\n\r\n    hideLoading(element) {\r\n        if (typeof element === 'string') {\r\n            element = document.getElementById(element);\r\n        }\r\n        \r\n        if (element && element.classList.contains('loading')) {\r\n            element.classList.remove('loading');\r\n            element.innerHTML = element.dataset.originalContent || '';\r\n            element.disabled = false;\r\n            delete element.dataset.originalContent;\r\n        }\r\n    }\r\n\r\n    // Confirmation Dialogs\r\n    async confirm(message, title = 'Confirm', type = 'warning') {\r\n        return new Promise((resolve) => {\r\n            const confirmModal = this.createConfirmModal(message, title, type);\r\n            const confirmId = 'confirmModal';\r\n            confirmModal.id = confirmId;\r\n            document.body.appendChild(confirmModal);\r\n\r\n            const handleConfirm = (result) => {\r\n                modalManager.hide(confirmId);\r\n                document.body.removeChild(confirmModal);\r\n                resolve(result);\r\n            };\r\n\r\n            confirmModal.querySelector('.confirm-yes').addEventListener('click', () => {\r\n                handleConfirm(true);\r\n            });\r\n\r\n            confirmModal.querySelector('.confirm-no').addEventListener('click', () => {\r\n                handleConfirm(false);\r\n            });\r\n\r\n            requestAnimationFrame(() => {\r\n                modalManager.show(confirmId);\r\n            });\r\n        });\r\n    }\r\n\r\n    createConfirmModal(message, title, type) {\r\n        const modal = document.createElement('div');\r\n        modal.className = 'modal confirm-modal';\r\n        \r\n        const iconMap = {\r\n            warning: 'fa-exclamation-triangle',\r\n            danger: 'fa-exclamation-circle',\r\n            info: 'fa-info-circle'\r\n        };\r\n        \r\n        modal.innerHTML = `\r\n            <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                    <h3>\r\n                        <i class=\"fas ${iconMap[type] || iconMap.warning}\"></i>\r\n                        ${title}\r\n                    </h3>\r\n                </div>\r\n                <div class=\"modal-body\">\r\n                    <p>${message}</p>\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <button class=\"btn btn-primary confirm-yes\">Yes</button>\r\n                    <button class=\"btn btn-secondary confirm-no\">No</button>\r\n                </div>\r\n            </div>\r\n        `;\r\n        \r\n        return modal;\r\n    }\r\n\r\n    // Drag and Drop Helpers\r\n    initDragAndDrop(container, options = {}) {\r\n        const {\r\n            dragSelector = '.draggable',\r\n            dropZoneSelector = '.drop-zone',\r\n            onDragStart = null,\r\n            onDragEnd = null,\r\n            onDrop = null\r\n        } = options;\r\n        \r\n        // Make items draggable\r\n        container.addEventListener('dragstart', (e) => {\r\n            if (e.target.matches(dragSelector)) {\r\n                this.dragState.isDragging = true;\r\n                this.dragState.dragElement = e.target;\r\n                this.dragState.dragData = e.target.dataset;\r\n                \r\n                e.target.classList.add('dragging');\r\n                e.dataTransfer.effectAllowed = 'move';\r\n                \r\n                if (onDragStart) onDragStart(e, this.dragState);\r\n            }\r\n        });\r\n        \r\n        container.addEventListener('dragend', (e) => {\r\n            if (e.target.matches(dragSelector)) {\r\n                e.target.classList.remove('dragging');\r\n                this.dragState.isDragging = false;\r\n                this.dragState.dragElement = null;\r\n                this.dragState.dragData = null;\r\n                \r\n                if (onDragEnd) onDragEnd(e);\r\n            }\r\n        });\r\n        \r\n        // Handle drop zones\r\n        container.addEventListener('dragover', (e) => {\r\n            e.preventDefault();\r\n            const dropZone = e.target.closest(dropZoneSelector);\r\n            if (dropZone) {\r\n                dropZone.classList.add('drag-over');\r\n            }\r\n        });\r\n        \r\n        container.addEventListener('dragleave', (e) => {\r\n            const dropZone = e.target.closest(dropZoneSelector);\r\n            if (dropZone) {\r\n                dropZone.classList.remove('drag-over');\r\n            }\r\n        });\r\n        \r\n        container.addEventListener('drop', (e) => {\r\n            e.preventDefault();\r\n            const dropZone = e.target.closest(dropZoneSelector);\r\n            if (dropZone) {\r\n                dropZone.classList.remove('drag-over');\r\n                \r\n                if (onDrop) {\r\n                    onDrop(e, this.dragState, dropZone);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Form Validation\r\n    validateForm(formElement) {\r\n        const errors = [];\r\n        const inputs = formElement.querySelectorAll('input[required], textarea[required], select[required]');\r\n        \r\n        inputs.forEach(input => {\r\n            const value = input.value.trim();\r\n            const fieldName = input.dataset.fieldName || input.name || input.id;\r\n            \r\n            if (!value) {\r\n                errors.push(`${fieldName} is required`);\r\n                input.classList.add('error');\r\n            } else {\r\n                input.classList.remove('error');\r\n                \r\n                // Type-specific validation\r\n                if (input.type === 'email' && !this.isValidEmail(value)) {\r\n                    errors.push(`${fieldName} must be a valid email`);\r\n                    input.classList.add('error');\r\n                }\r\n            }\r\n        });\r\n        \r\n        return {\r\n            isValid: errors.length === 0,\r\n            errors\r\n        };\r\n    }\r\n\r\n    isValidEmail(email) {\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return emailRegex.test(email);\r\n    }\r\n\r\n    // Clipboard Operations\r\n    async copyToClipboard(text) {\r\n        try {\r\n            await navigator.clipboard.writeText(text);\r\n            this.showToast('Copied to clipboard', 'success');\r\n            return true;\r\n        } catch (err) {\r\n            // Fallback for older browsers\r\n            const textArea = document.createElement('textarea');\r\n            textArea.value = text;\r\n            document.body.appendChild(textArea);\r\n            textArea.select();\r\n            \r\n            try {\r\n                document.execCommand('copy');\r\n                this.showToast('Copied to clipboard', 'success');\r\n                return true;\r\n            } catch (fallbackErr) {\r\n                this.showToast('Failed to copy to clipboard', 'error');\r\n                return false;\r\n            } finally {\r\n                document.body.removeChild(textArea);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Animation Helpers\r\n    fadeIn(element, duration = 300) {\r\n        element.style.opacity = '0';\r\n        element.style.display = 'block';\r\n        \r\n        let start = null;\r\n        const animate = (timestamp) => {\r\n            if (!start) start = timestamp;\r\n            const progress = timestamp - start;\r\n            const opacity = Math.min(progress / duration, 1);\r\n            \r\n            element.style.opacity = opacity;\r\n            \r\n            if (progress < duration) {\r\n                requestAnimationFrame(animate);\r\n            }\r\n        };\r\n        \r\n        requestAnimationFrame(animate);\r\n    }\r\n\r\n    fadeOut(element, duration = 300) {\r\n        let start = null;\r\n        const animate = (timestamp) => {\r\n            if (!start) start = timestamp;\r\n            const progress = timestamp - start;\r\n            const opacity = Math.max(1 - (progress / duration), 0);\r\n            \r\n            element.style.opacity = opacity;\r\n            \r\n            if (progress < duration) {\r\n                requestAnimationFrame(animate);\r\n            } else {\r\n                element.style.display = 'none';\r\n            }\r\n        };\r\n        \r\n        requestAnimationFrame(animate);\r\n    }\r\n\r\n    // Utility Methods\r\n    debounce(func, wait) {\r\n        let timeout;\r\n        return function executedFunction(...args) {\r\n            const later = () => {\r\n                clearTimeout(timeout);\r\n                func(...args);\r\n            };\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(later, wait);\r\n        };\r\n    }\r\n\r\n    throttle(func, limit) {\r\n        let inThrottle;\r\n        return function() {\r\n            const args = arguments;\r\n            const context = this;\r\n            if (!inThrottle) {\r\n                func.apply(context, args);\r\n                inThrottle = true;\r\n                setTimeout(() => inThrottle = false, limit);\r\n            }\r\n        };\r\n    }\r\n\r\n    // Setup Methods\r\n    setupGlobalEventListeners() {\r\n        // Escape key to close modals\r\n        document.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Escape') {\r\n                this.hideAllModals();\r\n            }\r\n        });\r\n        \r\n        // Click outside modal to close\r\n        document.addEventListener('click', (e) => {\r\n            if (e.target.classList.contains('modal-overlay')) {\r\n                this.hideAllModals();\r\n            }\r\n        });\r\n    }\r\n\r\n    setupTooltips() {\r\n        // Simple tooltip implementation\r\n        document.addEventListener('mouseenter', (e) => {\r\n            if (e.target && typeof e.target.hasAttribute === 'function' && \r\n                e.target.hasAttribute('title') && e.target.getAttribute('title').trim()) {\r\n                this.showTooltip(e.target, e.target.getAttribute('title'));\r\n            }\r\n        }, true);\r\n        \r\n        document.addEventListener('mouseleave', (e) => {\r\n            if (e.target && typeof e.target.hasAttribute === 'function' && \r\n                e.target.hasAttribute('title')) {\r\n                this.hideTooltip();\r\n            }\r\n        }, true);\r\n    }\r\n\r\n    showTooltip(element, text) {\r\n        this.hideTooltip(); // Remove any existing tooltip\r\n        \r\n        const tooltip = document.createElement('div');\r\n        tooltip.className = 'tooltip';\r\n        tooltip.textContent = text;\r\n        tooltip.id = 'active-tooltip';\r\n        \r\n        document.body.appendChild(tooltip);\r\n        \r\n        // Position tooltip\r\n        const rect = element.getBoundingClientRect();\r\n        const tooltipRect = tooltip.getBoundingClientRect();\r\n        \r\n        let left = rect.left + (rect.width / 2) - (tooltipRect.width / 2);\r\n        let top = rect.top - tooltipRect.height - 8;\r\n        \r\n        // Adjust if tooltip goes off screen\r\n        if (left < 8) left = 8;\r\n        if (left + tooltipRect.width > window.innerWidth - 8) {\r\n            left = window.innerWidth - tooltipRect.width - 8;\r\n        }\r\n        if (top < 8) {\r\n            top = rect.bottom + 8;\r\n            tooltip.classList.add('tooltip-bottom');\r\n        }\r\n        \r\n        tooltip.style.left = left + 'px';\r\n        tooltip.style.top = top + 'px';\r\n        \r\n        // Show tooltip\r\n        requestAnimationFrame(() => {\r\n            tooltip.classList.add('show');\r\n        });\r\n    }\r\n\r\n    hideTooltip() {\r\n        const tooltip = document.getElementById('active-tooltip');\r\n        if (tooltip) {\r\n            tooltip.remove();\r\n        }\r\n    }\r\n}\r\n\r\n// Global UI manager instance\r\n","// STO Tools Keybind Manager - Command Management\r\n// Handles command building, editing, and validation\r\n\r\nexport default class STOCommandManager {\r\n    constructor() {\r\n        this.currentCommand = null;\r\n        this.commandBuilders = new Map();\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.setupCommandBuilders();\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    // Command Builder Setup\r\n    setupCommandBuilders() {\r\n        // Targeting commands\r\n        this.commandBuilders.set('targeting', {\r\n            build: (commandId, params = {}) => {\r\n                const cmd = STO_DATA.commands.targeting.commands[commandId];\r\n                if (!cmd) return null;\r\n                \r\n                return {\r\n                    command: cmd.command,\r\n                    type: 'targeting',\r\n                    icon: cmd.icon,\r\n                    text: cmd.name,\r\n                    description: cmd.description\r\n                };\r\n            },\r\n            getUI: () => this.createTargetingUI()\r\n        });\r\n\r\n        // Combat commands\r\n        this.commandBuilders.set('combat', {\r\n            build: (commandId, params = {}) => {\r\n                const cmd = STO_DATA.commands.combat.commands[commandId];\r\n                if (!cmd) return null;\r\n                \r\n                return {\r\n                    command: cmd.command,\r\n                    type: 'combat',\r\n                    icon: cmd.icon,\r\n                    text: cmd.name,\r\n                    description: cmd.description\r\n                };\r\n            },\r\n            getUI: () => this.createCombatUI()\r\n        });\r\n\r\n        // Tray execution commands\r\n        this.commandBuilders.set('tray', {\r\n            build: (commandId, params = {}) => {\r\n                const tray = params.tray || 0;\r\n                const slot = params.slot || 0;\r\n                \r\n                // Handle backup tray commands\r\n                if (commandId === 'tray_with_backup') {\r\n                    const backupTray = params.backup_tray || 0;\r\n                    const backupSlot = params.backup_slot || 0;\r\n                    const active = params.active || 'on';\r\n                    \r\n                    return {\r\n                        command: `TrayExecByTrayWithBackup ${tray} ${slot} ${backupTray} ${backupSlot} ${active === 'on' ? 1 : 0}`,\r\n                        type: 'tray',\r\n                        icon: '⚡',\r\n                        text: `Execute Tray ${tray + 1} Slot ${slot + 1} (with backup)`,\r\n                        description: `Execute ability in tray ${tray + 1}, slot ${slot + 1} with backup in tray ${backupTray + 1}, slot ${backupSlot + 1}`,\r\n                        parameters: { tray, slot, backup_tray: backupTray, backup_slot: backupSlot, active }\r\n                    };\r\n                }\r\n                \r\n                // Handle tray range commands\r\n                if (commandId === 'tray_range') {\r\n                    const startTray = params.start_tray || 0;\r\n                    const startSlot = params.start_slot || 0;\r\n                    const endTray = params.end_tray || 0;\r\n                    const endSlot = params.end_slot || 0;\r\n                    const commandType = params.command_type || 'STOTrayExecByTray';\r\n                    \r\n                    const commands = this.generateTrayRangeCommands(startTray, startSlot, endTray, endSlot, commandType);\r\n                    \r\n                    // Return an array of individual command objects instead of a single command with $$\r\n                    return commands.map((cmd, index) => ({\r\n                        command: cmd,\r\n                        type: 'tray',\r\n                        icon: '⚡',\r\n                        text: index === 0 ? `Execute Range: Tray ${startTray + 1} Slot ${startSlot + 1} to Tray ${endTray + 1} Slot ${endSlot + 1}` : cmd,\r\n                        description: index === 0 ? `Execute abilities from tray ${startTray + 1} slot ${startSlot + 1} to tray ${endTray + 1} slot ${endSlot + 1}` : cmd,\r\n                        parameters: index === 0 ? { start_tray: startTray, start_slot: startSlot, end_tray: endTray, end_slot: endSlot, command_type: commandType } : undefined\r\n                    }));\r\n                }\r\n                \r\n                // Handle tray range with backup commands\r\n                if (commandId === 'tray_range_with_backup') {\r\n                    const active = params.active || 1;\r\n                    const startTray = params.start_tray || 0;\r\n                    const startSlot = params.start_slot || 0;\r\n                    const endTray = params.end_tray || 0;\r\n                    const endSlot = params.end_slot || 0;\r\n                    const backupStartTray = params.backup_start_tray || 0;\r\n                    const backupStartSlot = params.backup_start_slot || 0;\r\n                    const backupEndTray = params.backup_end_tray || 0;\r\n                    const backupEndSlot = params.backup_end_slot || 0;\r\n                    \r\n                    const commands = this.generateTrayRangeWithBackupCommands(\r\n                        active, startTray, startSlot, endTray, endSlot,\r\n                        backupStartTray, backupStartSlot, backupEndTray, backupEndSlot\r\n                    );\r\n                    \r\n                    // Return an array of individual command objects instead of a single command with $$\r\n                    return commands.map((cmd, index) => ({\r\n                        command: cmd,\r\n                        type: 'tray',\r\n                        icon: '⚡',\r\n                        text: index === 0 ? `Execute Range with Backup: Tray ${startTray + 1}-${endTray + 1}` : cmd,\r\n                        description: index === 0 ? `Execute abilities from tray ${startTray + 1} to ${endTray + 1} with backup range` : cmd,\r\n                        parameters: index === 0 ? { \r\n                            active, start_tray: startTray, start_slot: startSlot, end_tray: endTray, end_slot: endSlot,\r\n                            backup_start_tray: backupStartTray, backup_start_slot: backupStartSlot,\r\n                            backup_end_tray: backupEndTray, backup_end_slot: backupEndSlot\r\n                        } : undefined\r\n                    }));\r\n                }\r\n                \r\n                // Handle whole tray commands\r\n                if (commandId === 'whole_tray') {\r\n                    const commandType = params.command_type || 'STOTrayExecByTray';\r\n                    const commands = this.generateWholeTrayCommands(tray, commandType);\r\n                    \r\n                    // Return an array of individual command objects instead of a single command with $$\r\n                    return commands.map((cmd, index) => ({\r\n                        command: cmd,\r\n                        type: 'tray',\r\n                        icon: '⚡',\r\n                        text: index === 0 ? `Execute Whole Tray ${tray + 1}` : cmd,\r\n                        description: index === 0 ? `Execute all abilities in tray ${tray + 1}` : cmd,\r\n                        parameters: index === 0 ? { tray, command_type: commandType } : undefined\r\n                    }));\r\n                }\r\n                \r\n                // Handle whole tray with backup commands\r\n                if (commandId === 'whole_tray_with_backup') {\r\n                    const active = params.active || 1;\r\n                    const backupTray = params.backup_tray || 0;\r\n                    \r\n                    const commands = this.generateWholeTrayWithBackupCommands(active, tray, backupTray);\r\n                    \r\n                    // Return an array of individual command objects instead of a single command with $$\r\n                    return commands.map((cmd, index) => ({\r\n                        command: cmd,\r\n                        type: 'tray',\r\n                        icon: '⚡',\r\n                        text: index === 0 ? `Execute Whole Tray ${tray + 1} (with backup Tray ${backupTray + 1})` : cmd,\r\n                        description: index === 0 ? `Execute all abilities in tray ${tray + 1} with backup from tray ${backupTray + 1}` : cmd,\r\n                        parameters: index === 0 ? { active, tray, backup_tray: backupTray } : undefined\r\n                    }));\r\n                }\r\n                \r\n                // Regular tray command\r\n                const commandType = params.command_type || 'STOTrayExecByTray';\r\n                const prefix = '+';\r\n                \r\n                return {\r\n                    command: `${prefix}${commandType} ${tray} ${slot}`,\r\n                    type: 'tray',\r\n                    icon: '⚡',\r\n                    text: `Execute Tray ${tray + 1} Slot ${slot + 1}`,\r\n                    description: `Execute ability in tray ${tray + 1}, slot ${slot + 1}`,\r\n                    parameters: { tray, slot, command_type: commandType }\r\n                };\r\n            },\r\n            getUI: () => this.createTrayUI()\r\n        });\r\n\r\n        // Shield management commands\r\n        this.commandBuilders.set('power', {\r\n            build: (commandId, params = {}) => {\r\n                const cmd = STO_DATA.commands.power.commands[commandId];\r\n                if (!cmd) return null;\r\n                \r\n                return {\r\n                    command: cmd.command,\r\n                    type: 'power',\r\n                    icon: cmd.icon,\r\n                    text: cmd.name,\r\n                    description: cmd.description\r\n                };\r\n            },\r\n            getUI: () => this.createPowerUI()\r\n        });\r\n\r\n        // Movement commands\r\n        this.commandBuilders.set('movement', {\r\n            build: (commandId, params = {}) => {\r\n                const cmd = STO_DATA.commands.movement.commands[commandId];\r\n                if (!cmd) return null;\r\n                \r\n                let command = cmd.command;\r\n                \r\n                // Handle parameterized movement commands\r\n                if (cmd.customizable && params) {\r\n                    if (commandId === 'throttle_adjust' && params.amount !== undefined) {\r\n                        command = `${cmd.command} ${params.amount}`;\r\n                    } else if (commandId === 'throttle_set' && params.position !== undefined) {\r\n                        command = `${cmd.command} ${params.position}`;\r\n                    }\r\n                }\r\n                \r\n                return {\r\n                    command: command,\r\n                    type: 'movement',\r\n                    icon: cmd.icon,\r\n                    text: cmd.name,\r\n                    description: cmd.description\r\n                };\r\n            },\r\n            getUI: () => this.createMovementUI()\r\n        });\r\n\r\n        // Camera commands\r\n        this.commandBuilders.set('camera', {\r\n            build: (commandId, params = {}) => {\r\n                const cmd = STO_DATA.commands.camera.commands[commandId];\r\n                if (!cmd) return null;\r\n                \r\n                let command = cmd.command;\r\n                \r\n                // Handle parameterized camera commands\r\n                if (cmd.customizable && params) {\r\n                    if (commandId === 'cam_distance' && params.distance !== undefined) {\r\n                        command = `${cmd.command} ${params.distance}`;\r\n                    }\r\n                }\r\n                \r\n                return {\r\n                    command: command,\r\n                    type: 'camera',\r\n                    icon: cmd.icon,\r\n                    text: cmd.name,\r\n                    description: cmd.description\r\n                };\r\n            },\r\n            getUI: () => this.createCameraUI()\r\n        });\r\n\r\n        // Communication commands\r\n        this.commandBuilders.set('communication', {\r\n            build: (commandId, params = {}) => {\r\n                const cmd = STO_DATA.commands.communication.commands[commandId];\r\n                if (!cmd) return null;\r\n                \r\n                const message = params.message || 'Message text here';\r\n                \r\n                return {\r\n                    command: `${cmd.command} ${message}`,\r\n                    type: 'communication',\r\n                    icon: cmd.icon,\r\n                    text: `${cmd.name}: ${message}`,\r\n                    description: cmd.description,\r\n                    parameters: { message }\r\n                };\r\n            },\r\n            getUI: () => this.createCommunicationUI()\r\n        });\r\n\r\n        // System commands\r\n        this.commandBuilders.set('system', {\r\n            build: (commandId, params = {}) => {\r\n                const cmd = STO_DATA.commands.system.commands[commandId];\r\n                if (!cmd) return null;\r\n                \r\n                let command = cmd.command;\r\n                \r\n                // Handle parameterized system commands\r\n                if (cmd.customizable && params) {\r\n                    if ((commandId === 'bind_save_file' || commandId === 'bind_load_file') && params.filename) {\r\n                        command = `${cmd.command} ${params.filename}`;\r\n                    } else if (commandId === 'combat_log' && params.state !== undefined) {\r\n                        command = `${cmd.command} ${params.state}`;\r\n                    }\r\n                }\r\n                \r\n                return {\r\n                    command: command,\r\n                    type: 'system',\r\n                    icon: cmd.icon,\r\n                    text: cmd.name,\r\n                    description: cmd.description\r\n                };\r\n            },\r\n            getUI: () => this.createSystemUI()\r\n        });\r\n\r\n        // Alias commands\r\n        this.commandBuilders.set('alias', {\r\n            build: (commandId, params = {}) => {\r\n                const aliasName = params.alias_name || '';\r\n                \r\n                if (!aliasName.trim()) {\r\n                    return null;\r\n                }\r\n                \r\n                return {\r\n                    command: aliasName,\r\n                    type: 'alias',\r\n                    icon: '📝',\r\n                    text: `Alias: ${aliasName}`,\r\n                    description: 'Execute custom alias',\r\n                    parameters: { alias_name: aliasName }\r\n                };\r\n            },\r\n            getUI: () => this.createAliasUI()\r\n        });\r\n\r\n        // Custom commands\r\n        this.commandBuilders.set('custom', {\r\n            build: (commandId, params = {}) => {\r\n                const command = params.command || '';\r\n                const text = params.text || 'Custom Command';\r\n                \r\n                return {\r\n                    command: command,\r\n                    type: 'custom',\r\n                    icon: '⚙️',\r\n                    text: text,\r\n                    description: 'Custom command',\r\n                    parameters: { command, text }\r\n                };\r\n            },\r\n            getUI: () => this.createCustomUI()\r\n        });\r\n    }\r\n\r\n    // UI Builders for different command types\r\n    createTargetingUI() {\r\n        const commands = STO_DATA.commands.targeting.commands;\r\n        \r\n        return `\r\n            <div class=\"command-selector\">\r\n                <label for=\"targetingCommand\">Targeting Command:</label>\r\n                <select id=\"targetingCommand\">\r\n                    <option value=\"\">Select targeting command...</option>\r\n                    ${Object.entries(commands).map(([id, cmd]) => \r\n                        `<option value=\"${id}\">${cmd.name}</option>`\r\n                    ).join('')}\r\n                </select>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    createCombatUI() {\r\n        const commands = STO_DATA.commands.combat.commands;\r\n        \r\n        return `\r\n            <div class=\"command-selector\">\r\n                <label for=\"combatCommand\">Combat Command:</label>\r\n                <select id=\"combatCommand\">\r\n                    <option value=\"\">Select combat command...</option>\r\n                    ${Object.entries(commands).map(([id, cmd]) => \r\n                        `<option value=\"${id}\">${cmd.name}</option>`\r\n                    ).join('')}\r\n                </select>\r\n                <div id=\"combatCommandWarning\" class=\"command-warning\" style=\"display: none;\">\r\n                    <i class=\"fas fa-exclamation-triangle\"></i>\r\n                    <span id=\"combatWarningText\"></span>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    createTrayUI() {\r\n        return `\r\n            <div class=\"tray-builder\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"trayCommandType\">Command Type:</label>\r\n                    <select id=\"trayCommandType\">\r\n                        <option value=\"custom_tray\">Single Tray Slot</option>\r\n                        <option value=\"tray_with_backup\">Single Tray with Backup</option>\r\n                        <option value=\"tray_range\">Tray Range</option>\r\n                        <option value=\"tray_range_with_backup\">Tray Range with Backup</option>\r\n                        <option value=\"whole_tray\">Whole Tray</option>\r\n                        <option value=\"whole_tray_with_backup\">Whole Tray with Backup</option>\r\n                    </select>\r\n                </div>\r\n                \r\n                <!-- Single Tray Configuration -->\r\n                <div id=\"singleTrayConfig\" class=\"tray-config-section\">\r\n                    <div class=\"form-row\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"trayNumber\">Tray Number:</label>\r\n                            <select id=\"trayNumber\">\r\n                                ${Array.from({length: 10}, (_, i) => \r\n                                    `<option value=\"${i}\">Tray ${i + 1}</option>`\r\n                                ).join('')}\r\n                            </select>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"slotNumber\">Slot Number:</label>\r\n                            <select id=\"slotNumber\">\r\n                                ${Array.from({length: 10}, (_, i) => \r\n                                    `<option value=\"${i}\">Slot ${i + 1}</option>`\r\n                                ).join('')}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Backup Configuration -->\r\n                <div id=\"backupConfig\" class=\"tray-config-section\" style=\"display: none;\">\r\n                    <h4>Backup Configuration</h4>\r\n                    <div class=\"form-row\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"backupTrayNumber\">Backup Tray:</label>\r\n                            <select id=\"backupTrayNumber\">\r\n                                ${Array.from({length: 10}, (_, i) => \r\n                                    `<option value=\"${i}\">Tray ${i + 1}</option>`\r\n                                ).join('')}\r\n                            </select>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"backupSlotNumber\">Backup Slot:</label>\r\n                            <select id=\"backupSlotNumber\">\r\n                                ${Array.from({length: 10}, (_, i) => \r\n                                    `<option value=\"${i}\">Slot ${i + 1}</option>`\r\n                                ).join('')}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"activeState\">Active State:</label>\r\n                        <select id=\"activeState\">\r\n                            <option value=\"1\">Active (1)</option>\r\n                            <option value=\"0\">Inactive (0)</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Range Configuration -->\r\n                <div id=\"rangeConfig\" class=\"tray-config-section\" style=\"display: none;\">\r\n                    <h4>Range Configuration</h4>\r\n                    <div class=\"form-row\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"startTrayNumber\">Start Tray:</label>\r\n                            <select id=\"startTrayNumber\">\r\n                                ${Array.from({length: 10}, (_, i) => \r\n                                    `<option value=\"${i}\">Tray ${i + 1}</option>`\r\n                                ).join('')}\r\n                            </select>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"startSlotNumber\">Start Slot:</label>\r\n                            <select id=\"startSlotNumber\">\r\n                                ${Array.from({length: 10}, (_, i) => \r\n                                    `<option value=\"${i}\">Slot ${i + 1}</option>`\r\n                                ).join('')}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-row\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"endTrayNumber\">End Tray:</label>\r\n                            <select id=\"endTrayNumber\">\r\n                                ${Array.from({length: 10}, (_, i) => \r\n                                    `<option value=\"${i}\">Tray ${i + 1}</option>`\r\n                                ).join('')}\r\n                            </select>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"endSlotNumber\">End Slot:</label>\r\n                            <select id=\"endSlotNumber\">\r\n                                ${Array.from({length: 10}, (_, i) => \r\n                                    `<option value=\"${i}\">Slot ${i + 1}</option>`\r\n                                ).join('')}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Backup Range Configuration -->\r\n                <div id=\"backupRangeConfig\" class=\"tray-config-section\" style=\"display: none;\">\r\n                    <h4>Backup Range Configuration</h4>\r\n                    <div class=\"form-row\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"backupStartTrayNumber\">Backup Start Tray:</label>\r\n                            <select id=\"backupStartTrayNumber\">\r\n                                ${Array.from({length: 10}, (_, i) => \r\n                                    `<option value=\"${i}\">Tray ${i + 1}</option>`\r\n                                ).join('')}\r\n                            </select>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"backupStartSlotNumber\">Backup Start Slot:</label>\r\n                            <select id=\"backupStartSlotNumber\">\r\n                                ${Array.from({length: 10}, (_, i) => \r\n                                    `<option value=\"${i}\">Slot ${i + 1}</option>`\r\n                                ).join('')}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-row\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"backupEndTrayNumber\">Backup End Tray:</label>\r\n                            <select id=\"backupEndTrayNumber\">\r\n                                ${Array.from({length: 10}, (_, i) => \r\n                                    `<option value=\"${i}\">Tray ${i + 1}</option>`\r\n                                ).join('')}\r\n                            </select>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"backupEndSlotNumber\">Backup End Slot:</label>\r\n                            <select id=\"backupEndSlotNumber\">\r\n                                ${Array.from({length: 10}, (_, i) => \r\n                                    `<option value=\"${i}\">Slot ${i + 1}</option>`\r\n                                ).join('')}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Command Type Selection -->\r\n                <div id=\"commandTypeConfig\" class=\"tray-config-section\" style=\"display: none;\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"trayCommandVariant\">Command Variant:</label>\r\n                        <select id=\"trayCommandVariant\">\r\n                            <option value=\"STOTrayExecByTray\">STOTrayExecByTray (shows key binding on UI)</option>\r\n                            <option value=\"TrayExecByTray\">TrayExecByTray (no UI indication)</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div class=\"tray-visual\" id=\"trayVisual\">\r\n                    <!-- Visual tray representation will be generated here -->\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    createPowerUI() {\r\n        const commands = STO_DATA.commands.power.commands;\r\n        \r\n        return `\r\n            <div class=\"command-selector\">\r\n                <label for=\"powerCommand\">Shield Command:</label>\r\n                <select id=\"powerCommand\">\r\n                    <option value=\"\">Select shield command...</option>\r\n                    ${Object.entries(commands).map(([id, cmd]) => \r\n                        `<option value=\"${id}\">${cmd.name}</option>`\r\n                    ).join('')}\r\n                </select>\r\n                <div id=\"powerCommandWarning\" class=\"command-warning\" style=\"display: none;\">\r\n                    <i class=\"fas fa-exclamation-triangle\"></i>\r\n                    <span id=\"powerWarningText\"></span>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    createMovementUI() {\r\n        const commands = STO_DATA.commands.movement.commands;\r\n        \r\n        return `\r\n            <div class=\"command-selector\">\r\n                <label for=\"movementCommand\">Movement Command:</label>\r\n                <select id=\"movementCommand\">\r\n                    <option value=\"\">Select movement command...</option>\r\n                    ${Object.entries(commands).map(([id, cmd]) => \r\n                        `<option value=\"${id}\">${cmd.name}</option>`\r\n                    ).join('')}\r\n                </select>\r\n                <div id=\"movementParams\" style=\"display: none;\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"movementAmount\">Amount (-1 to 1):</label>\r\n                        <input type=\"number\" id=\"movementAmount\" min=\"-1\" max=\"1\" step=\"0.05\" value=\"0.25\">\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"movementPosition\">Position (-1 to 1):</label>\r\n                        <input type=\"number\" id=\"movementPosition\" min=\"-1\" max=\"1\" step=\"0.1\" value=\"1\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    createCommunicationUI() {\r\n        const commands = STO_DATA.commands.communication.commands;\r\n        \r\n        return `\r\n            <div class=\"communication-builder\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"commCommand\">Communication Type:</label>\r\n                    <select id=\"commCommand\">\r\n                        <option value=\"\">Select communication type...</option>\r\n                        ${Object.entries(commands).map(([id, cmd]) => \r\n                            `<option value=\"${id}\">${cmd.name}</option>`\r\n                        ).join('')}\r\n                    </select>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"commMessage\">Message:</label>\r\n                    <div class=\"input-with-button\">\r\n                        <input type=\"text\" id=\"commMessage\" placeholder=\"Enter your message\" maxlength=\"100\">\r\n                        <button type=\"button\" class=\"btn btn-small insert-target-btn\" title=\"Insert $Target variable\">\r\n                            <i class=\"fas fa-crosshairs\"></i> $Target\r\n                        </button>\r\n                    </div>\r\n                    <small>Maximum 100 characters</small>\r\n                </div>\r\n                <div class=\"variable-help\">\r\n                    <h4><i class=\"fas fa-info-circle\"></i> STO Variables</h4>\r\n                    <div class=\"variable-info\">\r\n                        <strong>$Target</strong> - Replaced with your current target's name<br>\r\n                        <em>Example:</em> <code>team Attacking [$Target]</code> → <code>team Attacking [Borg Cube]</code>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    createCameraUI() {\r\n        const commands = STO_DATA.commands.camera.commands;\r\n        \r\n        return `\r\n            <div class=\"command-selector\">\r\n                <label for=\"cameraCommand\">Camera Command:</label>\r\n                <select id=\"cameraCommand\">\r\n                    <option value=\"\">Select camera command...</option>\r\n                    ${Object.entries(commands).map(([id, cmd]) => \r\n                        `<option value=\"${id}\">${cmd.name}</option>`\r\n                    ).join('')}\r\n                </select>\r\n                <div id=\"cameraParams\" style=\"display: none;\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"cameraDistance\">Distance:</label>\r\n                        <input type=\"number\" id=\"cameraDistance\" min=\"1\" max=\"500\" value=\"50\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    createSystemUI() {\r\n        const commands = STO_DATA.commands.system.commands;\r\n        \r\n        return `\r\n            <div class=\"command-selector\">\r\n                <label for=\"systemCommand\">System Command:</label>\r\n                <select id=\"systemCommand\">\r\n                    <option value=\"\">Select system command...</option>\r\n                    ${Object.entries(commands).map(([id, cmd]) => \r\n                        `<option value=\"${id}\">${cmd.name}</option>`\r\n                    ).join('')}\r\n                </select>\r\n                <div id=\"systemParams\" style=\"display: none;\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"systemFilename\">Filename:</label>\r\n                        <input type=\"text\" id=\"systemFilename\" value=\"my_binds.txt\">\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"systemState\">State (0/1):</label>\r\n                        <input type=\"number\" id=\"systemState\" min=\"0\" max=\"1\" value=\"1\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    createAliasUI() {\r\n        // Get available aliases from current profile\r\n        const profile = app?.getCurrentProfile();\r\n        const aliases = profile?.aliases || {};\r\n        const aliasEntries = Object.entries(aliases);\r\n        \r\n        if (aliasEntries.length === 0) {\r\n            return `\r\n                <div class=\"alias-builder\">\r\n                    <div class=\"empty-state\">\r\n                        <i class=\"fas fa-mask\"></i>\r\n                        <h4>No Aliases Available</h4>\r\n                        <p>Create aliases in the Alias Manager first.</p>\r\n                        <button type=\"button\" class=\"btn btn-primary\" id=\"openAliasManager\">\r\n                            <i class=\"fas fa-plus\"></i> Create Alias\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }\r\n        \r\n        return `\r\n            <div class=\"alias-builder\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"aliasSelect\">Available Aliases:</label>\r\n                    <select id=\"aliasSelect\">\r\n                        <option value=\"\">Select an alias...</option>\r\n                        ${aliasEntries.map(([name, alias]) => \r\n                            `<option value=\"${name}\">${name}${alias.description ? ' - ' + alias.description : ''}</option>`\r\n                        ).join('')}\r\n                    </select>\r\n                </div>\r\n                <div id=\"aliasPreviewSection\" style=\"display: none;\">\r\n                    <div class=\"alias-info\">\r\n                        <label>Alias Commands:</label>\r\n                        <div class=\"command-preview\" id=\"selectedAliasPreview\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    createCustomUI() {\r\n        return `\r\n            <div class=\"custom-builder\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"customCommand\">Command:</label>\r\n                    <div class=\"input-with-button\">\r\n                        <input type=\"text\" id=\"customCommand\" placeholder=\"Enter STO command\" autocomplete=\"off\">\r\n                        <button type=\"button\" class=\"btn btn-small insert-target-btn\" title=\"Insert $Target variable\">\r\n                            <i class=\"fas fa-crosshairs\"></i> $Target\r\n                        </button>\r\n                    </div>\r\n                    <small>Enter the exact STO command syntax</small>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"customText\">Display Text:</label>\r\n                    <input type=\"text\" id=\"customText\" placeholder=\"Descriptive name for this command\" autocomplete=\"off\">\r\n                </div>\r\n                <div class=\"command-help\">\r\n                    <h4>Common Commands:</h4>\r\n                    <div class=\"command-examples\">\r\n                        <button type=\"button\" class=\"example-cmd\" data-cmd=\"target_nearest_enemy\">target_nearest_enemy</button>\r\n                        <button type=\"button\" class=\"example-cmd\" data-cmd=\"FireAll\">FireAll</button>\r\n                        <button type=\"button\" class=\"example-cmd\" data-cmd=\"+power_exec Distribute_Shields\">+power_exec Distribute_Shields</button>\r\n                        <button type=\"button\" class=\"example-cmd\" data-cmd=\"+STOTrayExecByTray 0 0\">+STOTrayExecByTray 0 0</button>\r\n                        <button type=\"button\" class=\"example-cmd\" data-cmd='team Attacking [$Target]'>team Attacking [$Target]</button>\r\n                    </div>\r\n                </div>\r\n                <div class=\"variable-help\">\r\n                    <h4><i class=\"fas fa-info-circle\"></i> STO Variables</h4>\r\n                    <div class=\"variable-info\">\r\n                        <strong>$Target</strong> - Replaced with your current target's name<br>\r\n                        <em>Example:</em> <code>team Focus fire on [$Target]</code>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    // Event Listeners\r\n    setupEventListeners() {\r\n        // Command type change handler\r\n        document.addEventListener('change', (e) => {\r\n            if (e.target.id === 'commandType') {\r\n                this.handleCommandTypeChange(e.target.value);\r\n            }\r\n        });\r\n\r\n        // Tray visual updates\r\n        document.addEventListener('change', (e) => {\r\n            if (e.target.id === 'trayNumber' || e.target.id === 'slotNumber') {\r\n                this.updateTrayVisual();\r\n                this.updateCommandPreview();\r\n            }\r\n        });\r\n\r\n        // Communication message updates\r\n        document.addEventListener('input', (e) => {\r\n            if (e.target.id === 'commMessage') {\r\n                this.updateCommandPreview();\r\n            }\r\n        });\r\n\r\n        // Custom command updates\r\n        document.addEventListener('input', (e) => {\r\n            if (e.target.id === 'customCommand' || e.target.id === 'customText') {\r\n                this.updateCommandPreview();\r\n            }\r\n        });\r\n\r\n        // Example command buttons\r\n        document.addEventListener('click', (e) => {\r\n            if (e.target.classList.contains('example-cmd')) {\r\n                const cmd = e.target.dataset.cmd;\r\n                const input = document.getElementById('customCommand');\r\n                if (input) {\r\n                    input.value = cmd;\r\n                    this.updateCommandPreview();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Insert $Target variable buttons\r\n        document.addEventListener('click', (e) => {\r\n            if (e.target.classList.contains('insert-target-btn') || e.target.closest('.insert-target-btn')) {\r\n                e.preventDefault();\r\n                const button = e.target.classList.contains('insert-target-btn') ? e.target : e.target.closest('.insert-target-btn');\r\n                const inputContainer = button.closest('.input-with-button');\r\n                const input = inputContainer ? inputContainer.querySelector('input') : null;\r\n                \r\n                if (input) {\r\n                    this.insertTargetVariable(input);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Command selection changes\r\n        document.addEventListener('change', (e) => {\r\n            const commandSelectors = [\r\n                'targetingCommand', 'combatCommand', 'powerCommand', \r\n                'movementCommand', 'cameraCommand', 'systemCommand', 'commCommand', 'aliasSelect'\r\n            ];\r\n            \r\n            if (commandSelectors.includes(e.target.id)) {\r\n                this.updateCommandPreview();\r\n            }\r\n        });\r\n    }\r\n\r\n    // Command Type Change Handler\r\n    handleCommandTypeChange(type) {\r\n        const builder = document.getElementById('commandBuilder');\r\n        const preview = document.getElementById('modalCommandPreview');\r\n        const saveBtn = document.getElementById('saveCommandBtn');\r\n        \r\n        if (!builder) return;\r\n        \r\n        if (type && this.commandBuilders.has(type)) {\r\n            const ui = this.commandBuilders.get(type).getUI();\r\n            builder.innerHTML = ui;\r\n            \r\n            // Setup specific event listeners for this type\r\n            this.setupTypeSpecificListeners(type);\r\n            \r\n            // Enable save button\r\n            if (saveBtn) saveBtn.disabled = false;\r\n            \r\n            // Update preview\r\n            this.updateCommandPreview();\r\n        } else {\r\n            builder.innerHTML = '<p class=\"text-muted\">Select a command type to configure options.</p>';\r\n            if (preview) preview.textContent = 'Select a command type to see preview';\r\n            if (saveBtn) saveBtn.disabled = true;\r\n        }\r\n    }\r\n\r\n    setupTypeSpecificListeners(type) {\r\n        if (type === 'tray') {\r\n            this.updateTrayVisual();\r\n            \r\n            // Add listener for tray command type selection\r\n            const trayCommandType = document.getElementById('trayCommandType');\r\n            if (trayCommandType) {\r\n                trayCommandType.addEventListener('change', () => {\r\n                    this.updateTrayConfigSections(trayCommandType.value);\r\n                    this.updateCommandPreview();\r\n                });\r\n                \r\n                // Initialize with default selection\r\n                this.updateTrayConfigSections(trayCommandType.value);\r\n            }\r\n            \r\n            // Add listeners for all tray configuration inputs\r\n            const inputs = [\r\n                'trayNumber', 'slotNumber', 'backupTrayNumber', 'backupSlotNumber', 'activeState',\r\n                'startTrayNumber', 'startSlotNumber', 'endTrayNumber', 'endSlotNumber',\r\n                'backupStartTrayNumber', 'backupStartSlotNumber', 'backupEndTrayNumber', 'backupEndSlotNumber',\r\n                'trayCommandVariant'\r\n            ];\r\n            \r\n            inputs.forEach(inputId => {\r\n                const input = document.getElementById(inputId);\r\n                if (input) {\r\n                    input.addEventListener('change', () => {\r\n                        this.updateTrayVisual();\r\n                        this.updateCommandPreview();\r\n                    });\r\n                }\r\n            });\r\n        } else if (type === 'power') {\r\n            // Add power command change listener for warnings\r\n            const powerSelect = document.getElementById('powerCommand');\r\n            if (powerSelect) {\r\n                powerSelect.addEventListener('change', () => {\r\n                    this.showPowerWarning(powerSelect.value);\r\n                });\r\n            }\r\n        } else if (type === 'combat') {\r\n            // Add combat command change listener for warnings\r\n            const combatSelect = document.getElementById('combatCommand');\r\n            if (combatSelect) {\r\n                combatSelect.addEventListener('change', () => {\r\n                    this.showCombatWarning(combatSelect.value);\r\n                });\r\n            }\r\n        } else if (type === 'alias') {\r\n            // Add alias selection listener\r\n            const aliasSelect = document.getElementById('aliasSelect');\r\n            if (aliasSelect) {\r\n                aliasSelect.addEventListener('change', () => {\r\n                    this.updateAliasPreview(aliasSelect.value);\r\n                    this.updateCommandPreview();\r\n                });\r\n            }\r\n            \r\n            // Add create alias button listener\r\n            const createBtn = document.getElementById('openAliasManager');\r\n            if (createBtn) {\r\n                createBtn.addEventListener('click', () => {\r\n                    if (typeof stoAliases !== 'undefined' && stoAliases.showAliasManager) {\r\n                        stoAliases.showAliasManager();\r\n                    } else {\r\n                        stoUI.hideModal('addCommandModal');\r\n                        stoUI.showModal('aliasManagerModal');\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    // Update tray configuration sections based on selected command type\r\n    updateTrayConfigSections(commandType) {\r\n        const sections = {\r\n            singleTrayConfig: document.getElementById('singleTrayConfig'),\r\n            backupConfig: document.getElementById('backupConfig'),\r\n            rangeConfig: document.getElementById('rangeConfig'),\r\n            backupRangeConfig: document.getElementById('backupRangeConfig'),\r\n            commandTypeConfig: document.getElementById('commandTypeConfig')\r\n        };\r\n        \r\n        // Hide all sections first\r\n        Object.values(sections).forEach(section => {\r\n            if (section) section.style.display = 'none';\r\n        });\r\n        \r\n        // Show relevant sections based on command type\r\n        switch (commandType) {\r\n            case 'custom_tray':\r\n                if (sections.singleTrayConfig) sections.singleTrayConfig.style.display = 'block';\r\n                if (sections.commandTypeConfig) sections.commandTypeConfig.style.display = 'block';\r\n                break;\r\n                \r\n            case 'tray_with_backup':\r\n                if (sections.singleTrayConfig) sections.singleTrayConfig.style.display = 'block';\r\n                if (sections.backupConfig) sections.backupConfig.style.display = 'block';\r\n                break;\r\n                \r\n            case 'tray_range':\r\n                if (sections.rangeConfig) sections.rangeConfig.style.display = 'block';\r\n                if (sections.commandTypeConfig) sections.commandTypeConfig.style.display = 'block';\r\n                break;\r\n                \r\n            case 'tray_range_with_backup':\r\n                if (sections.rangeConfig) sections.rangeConfig.style.display = 'block';\r\n                if (sections.backupRangeConfig) sections.backupRangeConfig.style.display = 'block';\r\n                if (sections.backupConfig) sections.backupConfig.style.display = 'block';\r\n                break;\r\n                \r\n            case 'whole_tray':\r\n                if (sections.singleTrayConfig) sections.singleTrayConfig.style.display = 'block';\r\n                if (sections.commandTypeConfig) sections.commandTypeConfig.style.display = 'block';\r\n                break;\r\n                \r\n            case 'whole_tray_with_backup':\r\n                if (sections.singleTrayConfig) sections.singleTrayConfig.style.display = 'block';\r\n                if (sections.backupConfig) sections.backupConfig.style.display = 'block';\r\n                break;\r\n        }\r\n    }\r\n\r\n    // Show warning for specific power commands\r\n    showPowerWarning(commandId) {\r\n        const warningDiv = document.getElementById('powerCommandWarning');\r\n        const warningText = document.getElementById('powerWarningText');\r\n        \r\n        if (!warningDiv || !warningText) return;\r\n        \r\n        if (commandId && STO_DATA.commands.power.commands[commandId]) {\r\n            const command = STO_DATA.commands.power.commands[commandId];\r\n            if (command.warning) {\r\n                warningText.textContent = command.warning;\r\n                warningDiv.style.display = 'block';\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Hide warning if no warning for this command\r\n        warningDiv.style.display = 'none';\r\n    }\r\n\r\n    // Show warning for specific combat commands\r\n    showCombatWarning(commandId) {\r\n        const warningDiv = document.getElementById('combatCommandWarning');\r\n        const warningText = document.getElementById('combatWarningText');\r\n        \r\n        if (!warningDiv || !warningText) return;\r\n        \r\n        if (commandId && STO_DATA.commands.combat.commands[commandId]) {\r\n            const command = STO_DATA.commands.combat.commands[commandId];\r\n            if (command.warning) {\r\n                warningText.textContent = command.warning;\r\n                warningDiv.style.display = 'block';\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Hide warning if no warning for this command\r\n        warningDiv.style.display = 'none';\r\n    }\r\n\r\n    updateAliasPreview(aliasName) {\r\n        const previewSection = document.getElementById('aliasPreviewSection');\r\n        const preview = document.getElementById('selectedAliasPreview');\r\n        \r\n        if (!previewSection || !preview) return;\r\n        \r\n        if (aliasName) {\r\n            const profile = app?.getCurrentProfile();\r\n            const alias = profile?.aliases?.[aliasName];\r\n            \r\n            if (alias) {\r\n                preview.textContent = alias.commands;\r\n                previewSection.style.display = 'block';\r\n            } else {\r\n                previewSection.style.display = 'none';\r\n            }\r\n        } else {\r\n            previewSection.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    // Update command preview in modal\r\n    updateCommandPreview() {\r\n        const preview = document.getElementById('modalCommandPreview');\r\n        if (!preview) {\r\n            console.log('DEBUG: modalCommandPreview element not found');\r\n            return;\r\n        }\r\n        \r\n        const command = this.buildCurrentCommand();\r\n        console.log('DEBUG: buildCurrentCommand returned:', command);\r\n        \r\n        if (command) {\r\n            // Handle both single commands and arrays of commands\r\n            if (Array.isArray(command)) {\r\n                console.log('DEBUG: Command is array with length:', command.length);\r\n                const commandStrings = command.map(cmd => cmd.command);\r\n                console.log('DEBUG: Command strings:', commandStrings);\r\n                preview.textContent = commandStrings.join(' $$ ');\r\n            } else {\r\n                console.log('DEBUG: Command is single object:', command.command);\r\n                preview.textContent = command.command;\r\n            }\r\n            preview.className = 'command-preview valid';\r\n        } else {\r\n            console.log('DEBUG: No command returned, showing default message');\r\n            preview.textContent = 'Configure command options to see preview';\r\n            preview.className = 'command-preview';\r\n        }\r\n    }\r\n\r\n    // Build command from current modal state\r\n    buildCurrentCommand() {\r\n        const typeSelect = document.getElementById('commandType');\r\n        if (!typeSelect || !typeSelect.value) return null;\r\n        \r\n        const type = typeSelect.value;\r\n        const builder = this.commandBuilders.get(type);\r\n        if (!builder) return null;\r\n        \r\n        let commandId = null;\r\n        let params = {};\r\n        \r\n        switch (type) {\r\n            case 'targeting':\r\n                commandId = document.getElementById('targetingCommand')?.value;\r\n                break;\r\n                \r\n            case 'combat':\r\n                commandId = document.getElementById('combatCommand')?.value;\r\n                break;\r\n                \r\n            case 'tray':\r\n                commandId = document.getElementById('trayCommandType')?.value || 'custom_tray';\r\n                \r\n                switch (commandId) {\r\n                    case 'custom_tray':\r\n                        params = {\r\n                            tray: parseInt(document.getElementById('trayNumber')?.value || 0),\r\n                            slot: parseInt(document.getElementById('slotNumber')?.value || 0),\r\n                            command_type: document.getElementById('trayCommandVariant')?.value || 'STOTrayExecByTray'\r\n                        };\r\n                        break;\r\n                        \r\n                    case 'tray_with_backup':\r\n                        params = {\r\n                            tray: parseInt(document.getElementById('trayNumber')?.value || 0),\r\n                            slot: parseInt(document.getElementById('slotNumber')?.value || 0),\r\n                            backup_tray: parseInt(document.getElementById('backupTrayNumber')?.value || 0),\r\n                            backup_slot: parseInt(document.getElementById('backupSlotNumber')?.value || 0),\r\n                            active: parseInt(document.getElementById('activeState')?.value || 1)\r\n                        };\r\n                        break;\r\n                        \r\n                    case 'tray_range':\r\n                        params = {\r\n                            start_tray: parseInt(document.getElementById('startTrayNumber')?.value || 0),\r\n                            start_slot: parseInt(document.getElementById('startSlotNumber')?.value || 0),\r\n                            end_tray: parseInt(document.getElementById('endTrayNumber')?.value || 0),\r\n                            end_slot: parseInt(document.getElementById('endSlotNumber')?.value || 0),\r\n                            command_type: document.getElementById('trayCommandVariant')?.value || 'STOTrayExecByTray'\r\n                        };\r\n                        break;\r\n                        \r\n                    case 'tray_range_with_backup':\r\n                        params = {\r\n                            active: parseInt(document.getElementById('activeState')?.value || 1),\r\n                            start_tray: parseInt(document.getElementById('startTrayNumber')?.value || 0),\r\n                            start_slot: parseInt(document.getElementById('startSlotNumber')?.value || 0),\r\n                            end_tray: parseInt(document.getElementById('endTrayNumber')?.value || 0),\r\n                            end_slot: parseInt(document.getElementById('endSlotNumber')?.value || 0),\r\n                            backup_start_tray: parseInt(document.getElementById('backupStartTrayNumber')?.value || 0),\r\n                            backup_start_slot: parseInt(document.getElementById('backupStartSlotNumber')?.value || 0),\r\n                            backup_end_tray: parseInt(document.getElementById('backupEndTrayNumber')?.value || 0),\r\n                            backup_end_slot: parseInt(document.getElementById('backupEndSlotNumber')?.value || 0)\r\n                        };\r\n                        break;\r\n                        \r\n                    case 'whole_tray':\r\n                        params = {\r\n                            tray: parseInt(document.getElementById('trayNumber')?.value || 0),\r\n                            command_type: document.getElementById('trayCommandVariant')?.value || 'STOTrayExecByTray'\r\n                        };\r\n                        break;\r\n                        \r\n                    case 'whole_tray_with_backup':\r\n                        params = {\r\n                            active: parseInt(document.getElementById('activeState')?.value || 1),\r\n                            tray: parseInt(document.getElementById('trayNumber')?.value || 0),\r\n                            backup_tray: parseInt(document.getElementById('backupTrayNumber')?.value || 0)\r\n                        };\r\n                        break;\r\n                }\r\n                break;\r\n                \r\n            case 'power':\r\n                commandId = document.getElementById('powerCommand')?.value;\r\n                break;\r\n                \r\n            case 'movement':\r\n                commandId = document.getElementById('movementCommand')?.value;\r\n                if (commandId === 'throttle_adjust') {\r\n                    params.amount = parseFloat(document.getElementById('movementAmount')?.value || 0.25);\r\n                } else if (commandId === 'throttle_set') {\r\n                    params.position = parseFloat(document.getElementById('movementPosition')?.value || 1);\r\n                }\r\n                break;\r\n                \r\n            case 'camera':\r\n                commandId = document.getElementById('cameraCommand')?.value;\r\n                if (commandId === 'cam_distance') {\r\n                    params.distance = parseInt(document.getElementById('cameraDistance')?.value || 50);\r\n                }\r\n                break;\r\n                \r\n            case 'communication':\r\n                commandId = document.getElementById('commCommand')?.value;\r\n                params = {\r\n                    message: document.getElementById('commMessage')?.value || 'Message text here'\r\n                };\r\n                break;\r\n                \r\n            case 'system':\r\n                commandId = document.getElementById('systemCommand')?.value;\r\n                if (commandId === 'bind_save_file' || commandId === 'bind_load_file') {\r\n                    params.filename = document.getElementById('systemFilename')?.value || 'my_binds.txt';\r\n                } else if (commandId === 'combat_log') {\r\n                    params.state = parseInt(document.getElementById('systemState')?.value || 1);\r\n                }\r\n                break;\r\n                \r\n            case 'alias':\r\n                commandId = 'alias';\r\n                params = {\r\n                    alias_name: document.getElementById('aliasSelect')?.value || ''\r\n                };\r\n                break;\r\n                \r\n            case 'custom':\r\n                commandId = 'custom';\r\n                params = {\r\n                    command: document.getElementById('customCommand')?.value || '',\r\n                    text: document.getElementById('customText')?.value || 'Custom Command'\r\n                };\r\n                break;\r\n        }\r\n        \r\n        if (!commandId && type !== 'custom') return null;\r\n        \r\n        return builder.build(commandId, params);\r\n    }\r\n\r\n    // Update tray visual representation\r\n    updateTrayVisual() {\r\n        const visual = document.getElementById('trayVisual');\r\n        const trayNum = document.getElementById('trayNumber')?.value || 0;\r\n        const slotNum = document.getElementById('slotNumber')?.value || 0;\r\n        \r\n        if (!visual) return;\r\n        \r\n        visual.innerHTML = `\r\n            <div class=\"tray-grid\">\r\n                <div class=\"tray-label\">Tray ${parseInt(trayNum) + 1}</div>\r\n                <div class=\"slot-grid\">\r\n                    ${Array.from({length: 10}, (_, i) => `\r\n                        <div class=\"slot ${i == slotNum ? 'selected' : ''}\" data-slot=\"${i}\">\r\n                            ${i + 1}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            </div>\r\n        `;\r\n        \r\n        // Add click handlers for slots\r\n        visual.querySelectorAll('.slot').forEach(slot => {\r\n            slot.addEventListener('click', () => {\r\n                const slotSelect = document.getElementById('slotNumber');\r\n                if (slotSelect) {\r\n                    slotSelect.value = slot.dataset.slot;\r\n                    this.updateTrayVisual();\r\n                    this.updateCommandPreview();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Helper method to generate tray range commands\r\n    generateTrayRangeCommands(startTray, startSlot, endTray, endSlot, commandType) {\r\n        const commands = [];\r\n        const prefix = commandType === 'STOTrayExecByTray' ? '+' : '';\r\n        \r\n        // If same tray, iterate through slots\r\n        if (startTray === endTray) {\r\n            for (let slot = startSlot; slot <= endSlot; slot++) {\r\n                commands.push(`${prefix}${commandType} ${startTray} ${slot}`);\r\n            }\r\n        } else {\r\n            // Multi-tray range\r\n            // First tray: from startSlot to end of tray (slot 9)\r\n            for (let slot = startSlot; slot <= 9; slot++) {\r\n                commands.push(`${prefix}${commandType} ${startTray} ${slot}`);\r\n            }\r\n            \r\n            // Middle trays: all slots (0-9)\r\n            for (let tray = startTray + 1; tray < endTray; tray++) {\r\n                for (let slot = 0; slot <= 9; slot++) {\r\n                    commands.push(`${prefix}${commandType} ${tray} ${slot}`);\r\n                }\r\n            }\r\n            \r\n            // Last tray: from slot 0 to endSlot\r\n            if (endTray > startTray) {\r\n                for (let slot = 0; slot <= endSlot; slot++) {\r\n                    commands.push(`${prefix}${commandType} ${endTray} ${slot}`);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return commands;\r\n    }\r\n\r\n    // Helper method to generate tray range with backup commands\r\n    generateTrayRangeWithBackupCommands(active, startTray, startSlot, endTray, endSlot, backupStartTray, backupStartSlot, backupEndTray, backupEndSlot) {\r\n        const commands = [];\r\n        const primarySlots = this.generateTraySlotList(startTray, startSlot, endTray, endSlot);\r\n        const backupSlots = this.generateTraySlotList(backupStartTray, backupStartSlot, backupEndTray, backupEndSlot);\r\n        \r\n        // Pair primary and backup slots\r\n        for (let i = 0; i < Math.max(primarySlots.length, backupSlots.length); i++) {\r\n            const primary = primarySlots[i] || primarySlots[primarySlots.length - 1];\r\n            const backup = backupSlots[i] || backupSlots[backupSlots.length - 1];\r\n            \r\n            commands.push(`TrayExecByTrayWithBackup ${active} ${primary.tray} ${primary.slot} ${backup.tray} ${backup.slot}`);\r\n        }\r\n        \r\n        return commands;\r\n    }\r\n\r\n    // Helper method to generate whole tray commands\r\n    generateWholeTrayCommands(tray, commandType) {\r\n        const commands = [];\r\n        const prefix = commandType === 'STOTrayExecByTray' ? '+' : '';\r\n        \r\n        for (let slot = 0; slot <= 9; slot++) {\r\n            commands.push(`${prefix}${commandType} ${tray} ${slot}`);\r\n        }\r\n        \r\n        return commands;\r\n    }\r\n\r\n    // Helper method to generate whole tray with backup commands\r\n    generateWholeTrayWithBackupCommands(active, tray, backupTray) {\r\n        const commands = [];\r\n        \r\n        for (let slot = 0; slot <= 9; slot++) {\r\n            commands.push(`TrayExecByTrayWithBackup ${active} ${tray} ${slot} ${backupTray} ${slot}`);\r\n        }\r\n        \r\n        return commands;\r\n    }\r\n\r\n    // Helper method to generate list of tray slots from range\r\n    generateTraySlotList(startTray, startSlot, endTray, endSlot) {\r\n        const slots = [];\r\n        \r\n        if (startTray === endTray) {\r\n            for (let slot = startSlot; slot <= endSlot; slot++) {\r\n                slots.push({ tray: startTray, slot });\r\n            }\r\n        } else {\r\n            // First tray\r\n            for (let slot = startSlot; slot <= 9; slot++) {\r\n                slots.push({ tray: startTray, slot });\r\n            }\r\n            \r\n            // Middle trays\r\n            for (let tray = startTray + 1; tray < endTray; tray++) {\r\n                for (let slot = 0; slot <= 9; slot++) {\r\n                    slots.push({ tray, slot });\r\n                }\r\n            }\r\n            \r\n            // Last tray\r\n            if (endTray > startTray) {\r\n                for (let slot = 0; slot <= endSlot; slot++) {\r\n                    slots.push({ tray: endTray, slot });\r\n                }\r\n            }\r\n        }\r\n        \r\n        return slots;\r\n    }\r\n\r\n    // Get current command for saving\r\n    getCurrentCommand() {\r\n        return this.buildCurrentCommand();\r\n    }\r\n\r\n    // Validate command\r\n    validateCommand(command) {\r\n        // Handle arrays of commands (for tray ranges)\r\n        if (Array.isArray(command)) {\r\n            // Validate each command in the array\r\n            for (let i = 0; i < command.length; i++) {\r\n                const validation = this.validateCommand(command[i]);\r\n                if (!validation.valid) {\r\n                    return { valid: false, error: `Command ${i + 1}: ${validation.error}` };\r\n                }\r\n            }\r\n            return { valid: true };\r\n        }\r\n        \r\n        // Handle both string and object inputs\r\n        let cmdString;\r\n        if (typeof command === 'string') {\r\n            cmdString = command;\r\n        } else if (command && command.command) {\r\n            cmdString = command.command;\r\n        } else {\r\n            return { valid: false, error: 'No command provided' };\r\n        }\r\n        \r\n        if (!cmdString || cmdString.trim().length === 0) {\r\n            return { valid: false, error: 'Command cannot be empty' };\r\n        }\r\n        \r\n        // Basic STO command validation\r\n        const cmd = cmdString.trim();\r\n        \r\n        // Check for dangerous commands\r\n        const dangerousCommands = ['quit', 'exit', 'shutdown'];\r\n        if (dangerousCommands.some(dangerous => cmd.toLowerCase().includes(dangerous))) {\r\n            return { valid: false, error: 'Dangerous command not allowed' };\r\n        }\r\n        \r\n        // Check for invalid characters that could break STO\r\n        // Note: $$ is valid as it's the STO command separator for chaining commands\r\n        // Note: | is invalid UNLESS it's inside quoted strings (for communication commands)\r\n        if (this.hasUnquotedPipeCharacter(cmd)) {\r\n            return { valid: false, error: 'Invalid characters in command (|)' };\r\n        }\r\n        \r\n        return { valid: true };\r\n    }\r\n\r\n    // Helper method to check for pipe characters outside of quoted strings\r\n    hasUnquotedPipeCharacter(cmd) {\r\n        let inQuotes = false;\r\n        let quoteChar = null;\r\n        \r\n        for (let i = 0; i < cmd.length; i++) {\r\n            const char = cmd[i];\r\n            \r\n            if (!inQuotes && (char === '\"' || char === \"'\")) {\r\n                // Starting a quoted section\r\n                inQuotes = true;\r\n                quoteChar = char;\r\n            } else if (inQuotes && char === quoteChar) {\r\n                // Check if this quote is escaped\r\n                let backslashCount = 0;\r\n                for (let j = i - 1; j >= 0 && cmd[j] === '\\\\'; j--) {\r\n                    backslashCount++;\r\n                }\r\n                // If even number of backslashes (including 0), the quote is not escaped\r\n                if (backslashCount % 2 === 0) {\r\n                    inQuotes = false;\r\n                    quoteChar = null;\r\n                }\r\n            } else if (!inQuotes && char === '|') {\r\n                // Found unquoted pipe character\r\n                return true;\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    // Command templates\r\n    getTemplateCommands(category) {\r\n        if (!STO_DATA.templates) return [];\r\n        \r\n        const templates = [];\r\n        \r\n        // Search through all template scenarios for templates containing commands of the specified category\r\n        Object.entries(STO_DATA.templates).forEach(([scenarioId, scenario]) => {\r\n            Object.entries(scenario).forEach(([templateId, template]) => {\r\n                // Check if this template contains commands of the specified category\r\n                const hasCategory = template.commands.some(cmd => {\r\n                    const cmdType = this.detectCommandType(cmd);\r\n                    return cmdType === category;\r\n                });\r\n                \r\n                if (hasCategory) {\r\n                    templates.push({\r\n                        id: `${scenarioId}_${templateId}`,\r\n                        name: template.name,\r\n                        description: template.description,\r\n                        scenario: scenarioId,\r\n                        commands: template.commands.map(cmd => ({\r\n                            command: cmd,\r\n                            type: this.detectCommandType(cmd),\r\n                            icon: this.getCommandIcon(cmd),\r\n                            text: this.getCommandText(cmd)\r\n                        }))\r\n                    });\r\n                }\r\n            });\r\n        });\r\n        \r\n        return templates;\r\n    }\r\n\r\n    // Utility methods\r\n    detectCommandType(command) {\r\n        if (!command || typeof command !== 'string') return 'custom';\r\n        \r\n        const cmd = command.toLowerCase().trim();\r\n        \r\n        // Tray commands\r\n        if (cmd.includes('+stotrayexecbytray')) return 'tray';\r\n        \r\n        // Communication commands\r\n        if (cmd.startsWith('say ') || cmd.startsWith('team ') || cmd.startsWith('zone ') || \r\n            cmd.startsWith('tell ') || cmd.includes('\"')) return 'communication';\r\n        \r\n        // Shield management commands\r\n        if (cmd.includes('+power_exec') || cmd.includes('distribute_shields') || \r\n            cmd.includes('reroute_shields')) return 'power';\r\n        \r\n        // Movement commands\r\n        if (cmd.includes('+fullimpulse') || cmd.includes('+reverse') || \r\n            cmd.includes('throttle') || cmd.includes('+turn') || cmd.includes('+up') || \r\n            cmd.includes('+down') || cmd.includes('+left') || cmd.includes('+right') ||\r\n            cmd.includes('+forward') || cmd.includes('+backward') || cmd.includes('follow')) return 'movement';\r\n        \r\n        // Camera commands\r\n        if (cmd.includes('cam') || cmd.includes('look') || cmd.includes('zoom')) return 'camera';\r\n        \r\n        // Combat commands\r\n        if (cmd.includes('fire') || cmd.includes('attack') || cmd === 'fireall' ||\r\n            cmd === 'firephasers' || cmd === 'firetorps' || cmd === 'firephaserstorps') return 'combat';\r\n        \r\n        // Targeting commands\r\n        if (cmd.includes('target') || cmd === 'target_enemy_near' || cmd === 'target_self' ||\r\n            cmd === 'target_friend_near' || cmd === 'target_clear') return 'targeting';\r\n        \r\n        // System commands\r\n        if (cmd.includes('+gentoggle') || cmd === 'screenshot' || cmd.includes('hud') || \r\n            cmd === 'interactwindow') return 'system';\r\n        \r\n        // Default to custom for unknown commands\r\n        return 'custom';\r\n    }\r\n\r\n    getCommandIcon(command) {\r\n        const type = this.detectCommandType(command);\r\n        const iconMap = {\r\n            targeting: '🎯',\r\n            combat: '🔥',\r\n            tray: '⚡',\r\n            power: '🔋',\r\n            communication: '💬',\r\n            movement: '🚀',\r\n            camera: '📹',\r\n            system: '⚙️'\r\n        };\r\n        return iconMap[type] || '⚙️';\r\n    }\r\n\r\n    getCommandText(command) {\r\n        // Handle tray commands specially\r\n        if (command.includes('+STOTrayExecByTray')) {\r\n            const match = command.match(/\\+STOTrayExecByTray\\s+(\\d+)\\s+(\\d+)/);\r\n            if (match) {\r\n                const tray = parseInt(match[1]) + 1; // Convert to 1-based\r\n                const slot = parseInt(match[2]) + 1; // Convert to 1-based\r\n                return `Execute Tray ${tray} Slot ${slot}`;\r\n            }\r\n        }\r\n        \r\n        // Try to find a friendly name for the command\r\n        for (const [categoryId, category] of Object.entries(STO_DATA.commands)) {\r\n            for (const [cmdId, cmd] of Object.entries(category.commands)) {\r\n                if (cmd.command === command) {\r\n                    return cmd.name;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Generate a friendly name from the command\r\n        return command.replace(/[_+]/g, ' ').replace(/([A-Z])/g, ' $1').trim();\r\n    }\r\n\r\n    insertTargetVariable(input) {\r\n        const targetVar = '$Target';\r\n        const cursorPosition = input.selectionStart;\r\n        const value = input.value;\r\n        const newValue = value.slice(0, cursorPosition) + targetVar + value.slice(cursorPosition);\r\n        input.value = newValue;\r\n        input.setSelectionRange(cursorPosition + targetVar.length, cursorPosition + targetVar.length);\r\n        input.focus();\r\n        \r\n        // Trigger input event to update preview\r\n        input.dispatchEvent(new Event('input', { bubbles: true }));\r\n    }\r\n}\r\n\r\n// Global command manager instance\r\n","// STO Tools Keybind Manager - File Explorer Modal\r\n// Provides a tree view of profiles/builds/aliases and preview of export files\r\n\r\nexport default class STOFileExplorer {\r\n    constructor() {\r\n        this.modalId = 'fileExplorerModal';\r\n        this.treeId = 'fileTree';\r\n        this.contentId = 'fileContent';\r\n    }\r\n\r\n    init() {\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Event Handling\r\n    // ---------------------------------------------------------------------\r\n    setupEventListeners() {\r\n        // Open Explorer button\r\n        eventBus.onDom('fileExplorerBtn', 'click', 'fileExplorer-open', () => {\r\n            this.openExplorer();\r\n        });\r\n\r\n        // Delegate clicks on tree nodes\r\n        eventBus.onDom(this.treeId, 'click', 'fileExplorer-tree-click', (e) => {\r\n            const node = e.target.closest('.tree-node');\r\n            if (!node) return;\r\n            this.selectNode(node);\r\n        });\r\n\r\n        // Copy file content\r\n        eventBus.onDom('copyFileContentBtn', 'click', 'copyFileContent', () => {\r\n            const contentEl = document.getElementById(this.contentId);\r\n            if (!contentEl) return;\r\n            const text = contentEl.textContent || '';\r\n            if (!text.trim()) {\r\n                stoUI.showToast('Nothing to copy', 'warning');\r\n                return;\r\n            }\r\n            stoUI.copyToClipboard(text);\r\n            stoUI.showToast('Content copied to clipboard', 'success');\r\n        });\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // UI Actions\r\n    // ---------------------------------------------------------------------\r\n    openExplorer() {\r\n        this.buildTree();\r\n        // Reset preview\r\n        const contentEl = document.getElementById(this.contentId);\r\n        if (contentEl) {\r\n            contentEl.textContent = 'Select an item on the left to preview export';\r\n        }\r\n        stoUI.showModal(this.modalId);\r\n    }\r\n\r\n    buildTree() {\r\n        const treeEl = document.getElementById(this.treeId);\r\n        if (!treeEl) return;\r\n        treeEl.innerHTML = '';\r\n\r\n        const data = stoStorage.getAllData();\r\n        const profiles = data.profiles || {};\r\n\r\n        Object.entries(profiles).forEach(([profileId, profile]) => {\r\n            const profileNode = this.createNode('profile', profile.name, { profileId });\r\n\r\n            // Child container\r\n            const childrenContainer = document.createElement('div');\r\n            childrenContainer.className = 'tree-children';\r\n\r\n            // Space Build\r\n            if (profile.builds && profile.builds.space) {\r\n                const spaceNode = this.createNode('build', 'Space Build', {\r\n                    profileId,\r\n                    environment: 'space',\r\n                });\r\n                childrenContainer.appendChild(spaceNode);\r\n            }\r\n\r\n            // Ground Build\r\n            if (profile.builds && profile.builds.ground) {\r\n                const groundNode = this.createNode('build', 'Ground Build', {\r\n                    profileId,\r\n                    environment: 'ground',\r\n                });\r\n                childrenContainer.appendChild(groundNode);\r\n            }\r\n\r\n            // Aliases node (aggregated)\r\n            const aliasNode = this.createNode('aliases', 'Aliases', {\r\n                profileId,\r\n            });\r\n            childrenContainer.appendChild(aliasNode);\r\n\r\n            profileNode.appendChild(childrenContainer);\r\n            treeEl.appendChild(profileNode);\r\n        });\r\n    }\r\n\r\n    createNode(type, label, dataset = {}) {\r\n        const node = document.createElement('div');\r\n        node.className = `tree-node ${type}`;\r\n        node.textContent = label;\r\n        node.dataset.type = type;\r\n        Object.entries(dataset).forEach(([k, v]) => {\r\n            // Use setAttribute for better test environment compatibility\r\n            node.setAttribute(`data-${k}`, v);\r\n        });\r\n        return node;\r\n    }\r\n\r\n    selectNode(node) {\r\n        // Remove previous selection\r\n        const prevSel = document.querySelector('.tree-node.selected');\r\n        if (prevSel) prevSel.classList.remove('selected');\r\n        node.classList.add('selected');\r\n\r\n        const type = node.dataset.type || node.getAttribute('data-type');\r\n        const profileid = node.getAttribute('data-profileid');\r\n        const environment = node.getAttribute('data-environment');\r\n        \r\n        if (!profileid) return;\r\n        try {\r\n            let exportContent = '';\r\n            if (type === 'build') {\r\n                exportContent = this.generateBuildExport(profileid, environment);\r\n            } else if (type === 'aliases') {\r\n                exportContent = this.generateAliasExport(profileid);\r\n            } else {\r\n                // Root profile node selected – no export preview\r\n                exportContent = 'Select a Space/Ground build or Aliases to preview export.';\r\n            }\r\n            const contentEl = document.getElementById(this.contentId);\r\n            if (contentEl) {\r\n                contentEl.textContent = exportContent || 'No content available.';\r\n            }\r\n        } catch (err) {\r\n            console.error('Failed to generate export content:', err);\r\n            stoUI.showToast('Failed to generate export', 'error');\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Export Generators\r\n    // ---------------------------------------------------------------------\r\n    generateBuildExport(profileId, environment) {\r\n        const rootProfile = stoStorage.getProfile(profileId);\r\n        if (!rootProfile || !rootProfile.builds || !rootProfile.builds[environment]) return '';\r\n        const build = rootProfile.builds[environment];\r\n        const tempProfile = {\r\n            name: `${rootProfile.name} ${environment}`,\r\n            mode: environment,\r\n            keys: build.keys || {},\r\n            // carry over full keybind metadata for stabilization preview\r\n            keybindMetadata: rootProfile.keybindMetadata || {},\r\n            // include build-specific aliases if present so users can see them in file (optional)\r\n            aliases: build.aliases || {},\r\n        };\r\n        return stoExport.generateSTOKeybindFile(tempProfile, { environment });\r\n    }\r\n\r\n    generateAliasExport(profileId) {\r\n        const rootProfile = stoStorage.getProfile(profileId);\r\n        if (!rootProfile) return '';\r\n        // Aggregate aliases from profile-level and both builds\r\n        const aggregatedAliases = {\r\n            ...(rootProfile.aliases || {}),\r\n            ...(rootProfile.builds?.space?.aliases || {}),\r\n            ...(rootProfile.builds?.ground?.aliases || {}),\r\n        };\r\n        const tempProfile = {\r\n            name: rootProfile.name,\r\n            mode: rootProfile.currentEnvironment || 'space',\r\n            aliases: aggregatedAliases,\r\n        };\r\n        return stoExport.generateAliasFile(tempProfile);\r\n    }\r\n}\r\n\r\n// Create global instance and initialize when dependencies are ready\r\n","// STO Tools Keybind Manager - Main Application Controller\r\n// Coordinates all modules and handles global application state\r\n\r\nexport default class STOToolsKeybindManager {\r\n    constructor() {\r\n        this.currentProfile = null;\r\n        this.currentMode = 'space';\r\n        this.currentEnvironment = 'space'; // New: tracks current environment (space/ground)\r\n        this.selectedKey = null;\r\n        this.isModified = false;\r\n        this.undoStack = [];\r\n        this.redoStack = [];\r\n        this.maxUndoSteps = 50;\r\n        this.commandIdCounter = 0;\r\n        \r\n        this.eventListeners = new Map();\r\n        \r\n        // Initialize when DOM is ready\r\n        if (document.readyState === 'loading') {\r\n            document.addEventListener('DOMContentLoaded', () => this.init());\r\n        } else {\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    async init() {\r\n        try {\r\n            // Check if required dependencies are available\r\n            if (typeof stoStorage === 'undefined' || typeof stoUI === 'undefined') {\r\n                throw new Error('Required dependencies not loaded');\r\n            }\r\n            \r\n            // Load data from storage\r\n            await this.loadData();\r\n            \r\n            // Apply saved theme\r\n            this.applyTheme();\r\n            \r\n            // Setup UI components\r\n            this.setupEventListeners();\r\n            this.setupCommandLibrary();\r\n            this.setupDragAndDrop();\r\n            \r\n            // Render initial state\r\n            this.renderProfiles();\r\n            this.renderKeyGrid();\r\n            this.renderCommandChain();\r\n            \r\n            // Update theme toggle button to reflect current theme\r\n            const settings = stoStorage.getSettings();\r\n            this.updateThemeToggleButton(settings.theme || 'default');\r\n            \r\n            // Show welcome message for new users\r\n            if (this.isFirstTime()) {\r\n                this.showWelcomeMessage();\r\n            }\r\n            \r\n            stoUI.showToast('STO Tools Keybind Manager loaded successfully', 'success');\r\n            \r\n            // Dispatch app ready event through eventBus\r\n            eventBus.emit('sto-app-ready', { app: this });\r\n            \r\n        } catch (error) {\r\n            console.error('Failed to initialize application:', error);\r\n            if (typeof stoUI !== 'undefined' && stoUI.showToast) {\r\n                stoUI.showToast('Failed to load application', 'error');\r\n            }\r\n            \r\n            // Dispatch error event through eventBus\r\n            eventBus.emit('sto-app-error', { error });\r\n        }\r\n    }\r\n\r\n    // Data Management\r\n    async loadData() {\r\n        const data = stoStorage.getAllData();\r\n        this.currentProfile = data.currentProfile;\r\n        \r\n        // Load current environment from profile or default to space\r\n        const profileData = data.profiles[this.currentProfile];\r\n        if (profileData) {\r\n            this.currentEnvironment = profileData.currentEnvironment || 'space';\r\n        } else {\r\n            this.currentEnvironment = 'space';\r\n        }\r\n        \r\n        // Validate current profile exists\r\n        if (!data.profiles[this.currentProfile]) {\r\n            this.currentProfile = Object.keys(data.profiles)[0];\r\n            this.saveCurrentProfile();\r\n        }\r\n    }\r\n\r\n    saveData() {\r\n        const data = stoStorage.getAllData();\r\n        data.currentProfile = this.currentProfile;\r\n        data.lastModified = new Date().toISOString();\r\n        \r\n        if (stoStorage.saveAllData(data)) {\r\n            this.setModified(false);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    saveCurrentProfile() {\r\n        const data = stoStorage.getAllData();\r\n        data.currentProfile = this.currentProfile;\r\n        return stoStorage.saveAllData(data);\r\n    }\r\n\r\n    setModified(modified = true) {\r\n        this.isModified = modified;\r\n        const indicator = document.getElementById('modifiedIndicator');\r\n        if (indicator) {\r\n            indicator.style.display = modified ? 'inline' : 'none';\r\n        }\r\n    }\r\n\r\n    // Profile Management\r\n    getCurrentProfile() {\r\n        const profile = stoStorage.getProfile(this.currentProfile);\r\n        if (!profile) return null;\r\n        \r\n        // Return current environment build data\r\n        return this.getCurrentBuild(profile);\r\n    }\r\n\r\n    getCurrentBuild(profile) {\r\n        if (!profile) return null;\r\n        \r\n        // Convert old profile format to new format if needed\r\n        if (!profile.builds) {\r\n            profile.builds = {\r\n                space: {\r\n                    keys: profile.keys || {}\r\n                },\r\n                ground: {\r\n                    keys: {}\r\n                }\r\n            };\r\n            profile.currentEnvironment = profile.mode || 'space';\r\n            delete profile.mode; // Remove old mode property\r\n            delete profile.keys; // Move to builds\r\n            // Keep profile.aliases at profile level - don't move to builds\r\n            \r\n            // Save the converted profile\r\n            stoStorage.saveProfile(this.currentProfile, profile);\r\n        }\r\n        \r\n                // Ensure builds exist\r\n        if (!profile.builds) {\r\n            profile.builds = {\r\n                space: { keys: {} },\r\n                ground: { keys: {} }\r\n            };\r\n        }\r\n\r\n        if (!profile.builds[this.currentEnvironment]) {\r\n            profile.builds[this.currentEnvironment] = { keys: {} };\r\n        }\r\n        \r\n        // Ensure the build keys object exists\r\n        if (!profile.builds[this.currentEnvironment].keys) {\r\n            profile.builds[this.currentEnvironment].keys = {};\r\n        }\r\n        \r\n        // Return a profile-like object with current build data\r\n        // Keys are build-specific, but aliases are profile-wide\r\n        // IMPORTANT: keys must be a direct reference, not a copy\r\n        return {\r\n            ...profile,\r\n            keys: profile.builds[this.currentEnvironment].keys, // Direct reference to build keys\r\n            aliases: profile.aliases || {}, // Profile-level aliases, not build-specific\r\n            mode: this.currentEnvironment // For backward compatibility\r\n        };\r\n    }\r\n\r\n    switchProfile(profileId) {\r\n        if (profileId !== this.currentProfile) {\r\n            this.currentProfile = profileId;\r\n            this.selectedKey = null;\r\n            \r\n            const profile = stoStorage.getProfile(profileId);\r\n            if (profile) {\r\n                this.currentEnvironment = profile.currentEnvironment || 'space';\r\n            }\r\n            \r\n            this.saveCurrentProfile();\r\n            this.renderKeyGrid();\r\n            this.renderCommandChain();\r\n            this.updateProfileInfo();\r\n            \r\n            const currentBuild = this.getCurrentProfile();\r\n            stoUI.showToast(`Switched to profile: ${currentBuild.name} (${this.currentEnvironment})`, 'success');\r\n        }\r\n    }\r\n\r\n    createProfile(name, description = '', mode = 'space') {\r\n        const profileId = this.generateProfileId(name);\r\n        const profile = {\r\n            name,\r\n            description,\r\n            mode,\r\n            keys: {},\r\n            aliases: {},\r\n            created: new Date().toISOString(),\r\n            lastModified: new Date().toISOString()\r\n        };\r\n        \r\n        if (stoStorage.saveProfile(profileId, profile)) {\r\n            this.switchProfile(profileId);\r\n            this.renderProfiles();\r\n            stoUI.showToast(`Profile \"${name}\" created`, 'success');\r\n            return profileId;\r\n        }\r\n        \r\n        stoUI.showToast('Failed to create profile', 'error');\r\n        return null;\r\n    }\r\n\r\n    cloneProfile(sourceProfileId, newName) {\r\n        const sourceProfile = stoStorage.getProfile(sourceProfileId);\r\n        if (!sourceProfile) return null;\r\n        \r\n        const profileId = this.generateProfileId(newName);\r\n        const clonedProfile = {\r\n            ...JSON.parse(JSON.stringify(sourceProfile)), // Deep clone\r\n            name: newName,\r\n            description: `Copy of ${sourceProfile.name}`,\r\n            created: new Date().toISOString(),\r\n            lastModified: new Date().toISOString()\r\n        };\r\n        \r\n        if (stoStorage.saveProfile(profileId, clonedProfile)) {\r\n            this.renderProfiles();\r\n            stoUI.showToast(`Profile \"${newName}\" created from \"${sourceProfile.name}\"`, 'success');\r\n            return profileId;\r\n        }\r\n        \r\n        stoUI.showToast('Failed to clone profile', 'error');\r\n        return null;\r\n    }\r\n\r\n    deleteProfile(profileId) {\r\n        const profile = stoStorage.getProfile(profileId);\r\n        if (!profile) return false;\r\n        \r\n        const data = stoStorage.getAllData();\r\n        const profileCount = Object.keys(data.profiles).length;\r\n        \r\n        if (profileCount <= 1) {\r\n            stoUI.showToast('Cannot delete the last profile', 'warning');\r\n            return false;\r\n        }\r\n        \r\n        if (stoStorage.deleteProfile(profileId)) {\r\n            if (this.currentProfile === profileId) {\r\n                // Switch to first available profile\r\n                const remainingProfiles = Object.keys(stoStorage.getAllData().profiles);\r\n                this.switchProfile(remainingProfiles[0]);\r\n            }\r\n            \r\n            this.renderProfiles();\r\n            stoUI.showToast(`Profile \"${profile.name}\" deleted`, 'success');\r\n            return true;\r\n        }\r\n        \r\n        stoUI.showToast('Failed to delete profile', 'error');\r\n        return false;\r\n    }\r\n\r\n    generateProfileId(name) {\r\n        const base = name.toLowerCase().replace(/[^a-z0-9]/g, '_');\r\n        let id = base;\r\n        let counter = 1;\r\n        \r\n        const data = stoStorage.getAllData();\r\n        while (data.profiles[id]) {\r\n            id = `${base}_${counter}`;\r\n            counter++;\r\n        }\r\n        \r\n        return id;\r\n    }\r\n\r\n    // Key Management\r\n    selectKey(keyName) {\r\n        this.selectedKey = keyName;\r\n        \r\n        // Update stabilize checkbox based on keybind metadata (environment-scoped)\r\n        const profile = this.getCurrentProfile();\r\n        const stabilizeCheckbox = document.getElementById('stabilizeExecutionOrder');\r\n        if (stabilizeCheckbox && profile && profile.keybindMetadata) {\r\n            let flag = false;\r\n            if (profile.keybindMetadata[this.currentEnvironment]) {\r\n                const envMeta = profile.keybindMetadata[this.currentEnvironment];\r\n                flag = !!(envMeta[keyName] && envMeta[keyName].stabilizeExecutionOrder);\r\n            }\r\n            // Legacy fallback (flat structure)\r\n            if (!flag && profile.keybindMetadata[keyName]) {\r\n                flag = !!profile.keybindMetadata[keyName].stabilizeExecutionOrder;\r\n            }\r\n            stabilizeCheckbox.checked = flag;\r\n        } else if (stabilizeCheckbox) {\r\n            stabilizeCheckbox.checked = false;\r\n        }\r\n        \r\n        this.renderKeyGrid();\r\n        this.renderCommandChain();\r\n        this.updateChainActions();\r\n    }\r\n\r\n    addKey(keyName) {\r\n        if (!this.isValidKeyName(keyName)) {\r\n            stoUI.showToast('Invalid key name', 'error');\r\n            return false;\r\n        }\r\n        \r\n        const profile = this.getCurrentProfile();\r\n        \r\n        if (!profile.keys[keyName]) {\r\n            profile.keys[keyName] = [];\r\n            stoStorage.saveProfile(this.currentProfile, profile);\r\n            this.renderKeyGrid();\r\n            this.selectKey(keyName);\r\n            this.setModified(true);\r\n            \r\n            stoUI.showToast(`Key \"${keyName}\" added`, 'success');\r\n            return true;\r\n        } else {\r\n            stoUI.showToast(`Key \"${keyName}\" already exists`, 'warning');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    deleteKey(keyName) {\r\n        const profile = this.getCurrentProfile();\r\n        if (profile.keys[keyName]) {\r\n            delete profile.keys[keyName];\r\n            stoStorage.saveProfile(this.currentProfile, profile);\r\n            \r\n            if (this.selectedKey === keyName) {\r\n                this.selectedKey = null;\r\n            }\r\n            \r\n            this.renderKeyGrid();\r\n            this.renderCommandChain();\r\n            this.setModified(true);\r\n            \r\n            stoUI.showToast(`Key \"${keyName}\" deleted`, 'success');\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    isValidKeyName(keyName) {\r\n        return STO_DATA.validation.keyNamePattern.test(keyName) && keyName.length <= 20;\r\n    }\r\n\r\n    // Command Management\r\n    addCommand(keyName, command) {\r\n        const profile = this.getCurrentProfile();\r\n        if (!profile.keys[keyName]) {\r\n            profile.keys[keyName] = [];\r\n        }\r\n        \r\n        // Handle both single commands and arrays of commands (for tray ranges)\r\n        if (Array.isArray(command)) {\r\n            // Array of commands - add each one with unique ID if not already present\r\n            command.forEach(cmd => {\r\n                if (!cmd.id) {\r\n                    cmd.id = this.generateCommandId();\r\n                }\r\n                profile.keys[keyName].push(cmd);\r\n            });\r\n            stoUI.showToast(`${command.length} commands added`, 'success');\r\n        } else {\r\n            // Single command\r\n            if (!command.id) {\r\n                command.id = this.generateCommandId();\r\n            }\r\n            profile.keys[keyName].push(command);\r\n            stoUI.showToast('Command added', 'success');\r\n        }\r\n        \r\n        stoStorage.saveProfile(this.currentProfile, profile);\r\n        this.renderCommandChain();\r\n        this.renderKeyGrid();\r\n        this.setModified(true);\r\n    }\r\n\r\n    deleteCommand(keyName, commandIndex) {\r\n        const profile = this.getCurrentProfile();\r\n        if (profile.keys[keyName] && profile.keys[keyName][commandIndex]) {\r\n            profile.keys[keyName].splice(commandIndex, 1);\r\n            stoStorage.saveProfile(this.currentProfile, profile);\r\n            this.renderCommandChain();\r\n            this.renderKeyGrid();\r\n            this.setModified(true);\r\n            \r\n            stoUI.showToast('Command deleted', 'success');\r\n        }\r\n    }\r\n\r\n    moveCommand(keyName, fromIndex, toIndex) {\r\n        const profile = this.getCurrentProfile();\r\n        const commands = profile.keys[keyName];\r\n        \r\n        if (commands && fromIndex >= 0 && fromIndex < commands.length && \r\n            toIndex >= 0 && toIndex < commands.length) {\r\n            \r\n            const [command] = commands.splice(fromIndex, 1);\r\n            commands.splice(toIndex, 0, command);\r\n            \r\n            stoStorage.saveProfile(this.currentProfile, profile);\r\n            this.renderCommandChain();\r\n            this.setModified(true);\r\n        }\r\n    }\r\n\r\n    generateCommandId() {\r\n        return 'cmd_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\r\n    }\r\n\r\n    // Rendering Methods\r\n    renderProfiles() {\r\n        const select = document.getElementById('profileSelect');\r\n        if (!select) return;\r\n        \r\n        const data = stoStorage.getAllData();\r\n        select.innerHTML = '';\r\n        \r\n        if (Object.keys(data.profiles).length === 0) {\r\n            // No profiles available\r\n            const option = document.createElement('option');\r\n            option.value = '';\r\n            option.textContent = 'No profiles available';\r\n            option.disabled = true;\r\n            select.appendChild(option);\r\n        } else {\r\n            Object.entries(data.profiles).forEach(([id, profile]) => {\r\n                const option = document.createElement('option');\r\n                option.value = id;\r\n                option.textContent = profile.name;\r\n                if (id === this.currentProfile) {\r\n                    option.selected = true;\r\n                }\r\n                select.appendChild(option);\r\n            });\r\n        }\r\n        \r\n        this.updateProfileInfo();\r\n    }\r\n\r\n    updateProfileInfo() {\r\n        const profile = this.getCurrentProfile();\r\n        \r\n        // Update mode buttons\r\n        const modeBtns = document.querySelectorAll('.mode-btn');\r\n        modeBtns.forEach(btn => {\r\n            btn.classList.toggle('active', profile && btn.dataset.mode === this.currentEnvironment);\r\n            btn.disabled = !profile;\r\n        });\r\n        \r\n        // Update key count\r\n        const keyCount = document.getElementById('keyCount');\r\n        if (keyCount) {\r\n            if (profile) {\r\n                const count = Object.keys(profile.keys).length;\r\n                keyCount.textContent = `${count} key${count !== 1 ? 's' : ''}`;\r\n            } else {\r\n                keyCount.textContent = 'No profile';\r\n            }\r\n        }\r\n    }\r\n\r\n    renderKeyGrid() {\r\n        const grid = document.getElementById('keyGrid');\r\n        if (!grid) return;\r\n        \r\n        const profile = this.getCurrentProfile();\r\n        if (!profile) return;\r\n        \r\n        grid.innerHTML = '';\r\n        \r\n        if (!profile) {\r\n            // Show empty state when no profile is available\r\n            grid.innerHTML = `\r\n                <div class=\"empty-state\">\r\n                    <i class=\"fas fa-folder-open\"></i>\r\n                    <h4>No Profile Selected</h4>\r\n                    <p>Create a new profile or load default data to get started.</p>\r\n                </div>\r\n            `;\r\n            return;\r\n        }\r\n        \r\n        // Get all keys for this profile\r\n        const keys = Object.keys(profile.keys);\r\n        // console.log('renderKeyGrid: Profile keys:', keys);\r\n        // console.log('renderKeyGrid: Profile keys count:', keys.length);\r\n        \r\n        // Add common keys that might not have commands yet\r\n        const commonKeys = ['Space', '1', '2', '3', '4', '5', 'F1', 'F2', 'F3', 'F4'];\r\n        const allKeys = [...new Set([...keys, ...commonKeys])].sort();\r\n        // console.log('renderKeyGrid: All keys to render:', allKeys);\r\n        \r\n        // Check view preference\r\n        const viewMode = localStorage.getItem('keyViewMode') || 'key-types';\r\n        \r\n        if (viewMode === 'categorized') {\r\n            this.renderCategorizedKeyView(grid, profile, allKeys);\r\n        } else if (viewMode === 'key-types') {\r\n            this.renderKeyTypeView(grid, profile, allKeys);\r\n        } else {\r\n            this.renderSimpleKeyGrid(grid, allKeys);\r\n        }\r\n        \r\n        // Update toggle button icon\r\n        this.updateViewToggleButton(viewMode);\r\n        \r\n        // Reapply any existing filter after rendering the new view\r\n        const filterInput = document.getElementById('keyFilter');\r\n        if (filterInput && filterInput.value.trim()) {\r\n            this.filterKeys(filterInput.value.trim());\r\n        }\r\n    }\r\n\r\n    renderSimpleKeyGrid(grid, allKeys) {\r\n        // Remove categorized class to use normal grid layout\r\n        grid.classList.remove('categorized');\r\n        \r\n        allKeys.forEach(keyName => {\r\n            const keyElement = this.createKeyElement(keyName);\r\n            grid.appendChild(keyElement);\r\n        });\r\n    }\r\n\r\n    renderCategorizedKeyView(grid, profile, allKeys) {\r\n        // Add categorized class to override grid layout\r\n        grid.classList.add('categorized');\r\n        \r\n        // Categorize keys based on their commands, including all keys\r\n        const categorizedKeys = this.categorizeKeys(profile.keys, allKeys);\r\n        \r\n        // Sort categories by priority (Unknown first, then alphabetically)\r\n        const sortedCategories = Object.entries(categorizedKeys).sort(([aId, aData], [bId, bData]) => {\r\n            if (aData.priority !== bData.priority) {\r\n                return aData.priority - bData.priority;\r\n            }\r\n            return aData.name.localeCompare(bData.name);\r\n        });\r\n        \r\n        // Create category tree structure - show all categories even if empty\r\n        sortedCategories.forEach(([categoryId, categoryData]) => {\r\n            const categoryElement = this.createKeyCategoryElement(categoryId, categoryData);\r\n            grid.appendChild(categoryElement);\r\n        });\r\n    }\r\n\r\n    categorizeKeys(keysWithCommands, allKeys) {\r\n        const categories = {};\r\n        \r\n        // Add Unknown category first (for empty keys)\r\n        categories.unknown = {\r\n            name: 'Unknown',\r\n            icon: 'fas fa-question-circle',\r\n            keys: new Set(),\r\n            priority: 0\r\n        };\r\n        \r\n        // Initialize categories from command library\r\n        Object.entries(STO_DATA.commands).forEach(([categoryId, categoryData]) => {\r\n            categories[categoryId] = {\r\n                name: categoryData.name,\r\n                icon: categoryData.icon,\r\n                keys: new Set(),\r\n                priority: 1\r\n            };\r\n        });\r\n        \r\n        // Process all keys, not just ones with commands\r\n        allKeys.forEach(keyName => {\r\n            const commands = keysWithCommands[keyName] || [];\r\n            \r\n            if (!commands || commands.length === 0) {\r\n                categories.unknown.keys.add(keyName);\r\n                return;\r\n            }\r\n            \r\n            // Get all categories this key belongs to\r\n            const keyCategories = new Set();\r\n            commands.forEach(command => {\r\n                if (command.type && categories[command.type]) {\r\n                    keyCategories.add(command.type);\r\n                } else if (window.stoCommands) {\r\n                    // Use command detection if type is not set\r\n                    const detectedType = window.stoCommands.detectCommandType(command.command);\r\n                    if (categories[detectedType]) {\r\n                        keyCategories.add(detectedType);\r\n                    }\r\n                }\r\n            });\r\n            \r\n            // Add key to all relevant categories\r\n            if (keyCategories.size > 0) {\r\n                keyCategories.forEach(categoryId => {\r\n                    categories[categoryId].keys.add(keyName);\r\n                });\r\n            } else {\r\n                // Fallback for unknown command types\r\n                if (!categories.custom) {\r\n                    categories.custom = {\r\n                        name: 'Custom Commands',\r\n                        icon: 'fas fa-cog',\r\n                        keys: new Set(),\r\n                        priority: 2\r\n                    };\r\n                }\r\n                categories.custom.keys.add(keyName);\r\n            }\r\n        });\r\n        \r\n        // Convert sets to arrays and sort\r\n        Object.values(categories).forEach(category => {\r\n            category.keys = Array.from(category.keys).sort(this.compareKeys.bind(this));\r\n        });\r\n        \r\n        return categories;\r\n    }\r\n\r\n    createKeyCategoryElement(categoryId, categoryData, mode = 'command') {\r\n        const element = document.createElement('div');\r\n        element.className = 'category';\r\n        element.dataset.category = categoryId;\r\n        \r\n        // Use different storage key for key-type categories\r\n        const storageKey = mode === 'key-type' ? `keyTypeCategory_${categoryId}_collapsed` : `keyCategory_${categoryId}_collapsed`;\r\n        const isCollapsed = localStorage.getItem(storageKey) === 'true';\r\n        \r\n        element.innerHTML = `\r\n            <h4 class=\"${isCollapsed ? 'collapsed' : ''}\" data-category=\"${categoryId}\" data-mode=\"${mode}\">\r\n                <i class=\"fas fa-chevron-right category-chevron\"></i>\r\n                <i class=\"${categoryData.icon}\"></i> \r\n                ${categoryData.name} \r\n                <span class=\"key-count\">(${categoryData.keys.length})</span>\r\n            </h4>\r\n            <div class=\"category-commands ${isCollapsed ? 'collapsed' : ''}\">\r\n                ${categoryData.keys.map(keyName => this.createKeyElementHTML(keyName)).join('')}\r\n            </div>\r\n        `;\r\n        \r\n        // Add click handler for category header\r\n        const header = element.querySelector('h4');\r\n        header.addEventListener('click', () => {\r\n            this.toggleKeyCategory(categoryId, element, mode);\r\n        });\r\n        \r\n        // Add click handlers for key elements\r\n        const keyElements = element.querySelectorAll('.command-item');\r\n        keyElements.forEach(keyElement => {\r\n            keyElement.addEventListener('click', () => {\r\n                const keyName = keyElement.dataset.key;\r\n                this.selectKey(keyName);\r\n            });\r\n        });\r\n        \r\n        return element;\r\n    }\r\n\r\n    createKeyElementHTML(keyName) {\r\n        const profile = this.getCurrentProfile();\r\n        const commands = profile.keys[keyName] || [];\r\n        const isActive = this.selectedKey === keyName;\r\n        \r\n                // Simple length-based font sizing for categorized view (no line breaks)\r\n        const keyLength = keyName.length;\r\n        let lengthClass;\r\n        if (keyLength <= 6) {\r\n            lengthClass = 'short';\r\n        } else if (keyLength <= 12) {\r\n            lengthClass = 'medium';\r\n        } else {\r\n            lengthClass = 'long';\r\n        }\r\n        \r\n        return `\r\n            <div class=\"command-item ${isActive ? 'active' : ''}\" data-key=\"${keyName}\" data-length=\"${lengthClass}\">\r\n                <span class=\"key-label\">${keyName}</span>\r\n                ${commands.length > 0 ? `\r\n                    <span class=\"command-count-badge\">${commands.length}</span>\r\n                ` : ''}\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    toggleKeyCategory(categoryId, element, mode = 'command') {\r\n        const header = element.querySelector('h4');\r\n        const commands = element.querySelector('.category-commands');\r\n        const chevron = header.querySelector('.category-chevron');\r\n        \r\n        const isCollapsed = commands.classList.contains('collapsed');\r\n        \r\n        // Use different storage key for key-type categories\r\n        const storageKey = mode === 'key-type' ? `keyTypeCategory_${categoryId}_collapsed` : `keyCategory_${categoryId}_collapsed`;\r\n        \r\n        if (isCollapsed) {\r\n            commands.classList.remove('collapsed');\r\n            header.classList.remove('collapsed');\r\n            chevron.style.transform = 'rotate(90deg)';\r\n            localStorage.setItem(storageKey, 'false');\r\n        } else {\r\n            commands.classList.add('collapsed');\r\n            header.classList.add('collapsed');\r\n            chevron.style.transform = 'rotate(0deg)';\r\n            localStorage.setItem(storageKey, 'true');\r\n        }\r\n    }\r\n\r\n    formatKeyName(keyName) {\r\n        // Smart formatting for compound keys to use line breaks instead of tiny text\r\n        if (keyName.includes('+')) {\r\n            // Always break compound keys for better readability\r\n            return keyName.replace(/\\+/g, '<br>+<br>');\r\n        }\r\n        return keyName;\r\n    }\r\n\r\n    detectKeyTypes(keyName) {\r\n        const types = [];\r\n        \r\n        // Check if this is a compound key with modifiers\r\n        if (keyName.includes('+')) {\r\n            const parts = keyName.split('+');\r\n            const hasModifier = parts.some(part => \r\n                part.match(/^(Ctrl|Control|Alt|Shift|Win|Cmd|Super)$/i)\r\n            );\r\n            \r\n            if (hasModifier) {\r\n                types.push('modifiers');\r\n            }\r\n        }\r\n        \r\n        // Extract the base key from compound keys to check its type too\r\n        const baseKey = keyName.split('+').pop();\r\n        \r\n        // Function Keys\r\n        if (baseKey.match(/^F\\d+$/)) types.push('function');\r\n        \r\n        // Mouse inputs - comprehensive list from STO documentation\r\n        else if (baseKey.match(/^(Lbutton|Rbutton|Mbutton|Leftdrag|Rightdrag|Middledrag|Leftclick|Rightclick|Middleclick|Leftdoubleclick|Rightdoubleclick|Middledoubleclick|Wheelplus|Wheelminus|Mousechord|Mouse|Wheel|LMouse|RMouse|MMouse|XMouse|Drag)/i)) types.push('mouse');\r\n        \r\n        // Numberpad\r\n        else if (baseKey.match(/^(Numpad|Keypad)/i)) types.push('numberpad');\r\n        \r\n        // Single Modifiers (for standalone modifier keys)\r\n        else if (baseKey.match(/^(Ctrl|Control|Alt|Shift|Win|Cmd|Super)$/i)) {\r\n            if (!types.includes('modifiers')) types.push('modifiers');\r\n        }\r\n        \r\n        // Navigation\r\n        else if (baseKey.match(/^(Up|Down|Left|Right|Home|End|PageUp|PageDown|Insert|Delete)$/i)) types.push('navigation');\r\n        \r\n        // System/Special\r\n        else if (baseKey.match(/^(Space|Tab|Enter|Return|Escape|Esc|Backspace|CapsLock|ScrollLock|NumLock|PrintScreen|Pause|Break)$/i)) types.push('system');\r\n        \r\n        // Numbers\r\n        else if (baseKey.match(/^[0-9]$/)) types.push('alphanumeric');\r\n        \r\n        // Letters\r\n        else if (baseKey.match(/^[A-Za-z]$/)) types.push('alphanumeric');\r\n        \r\n        // Symbols and punctuation\r\n        else if (baseKey.match(/^[`~!@#$%^&*()_+\\-=\\[\\]{}\\\\|;':\",./<>?]$/) || \r\n            baseKey.match(/^(Comma|Period|Semicolon|Quote|Slash|Backslash|Minus|Plus|Equals|Bracket|Grave|Tilde)$/i)) {\r\n            types.push('symbols');\r\n        }\r\n        \r\n        // Default fallback\r\n        else {\r\n            types.push('other');\r\n        }\r\n        \r\n        return types.length > 0 ? types : ['other'];\r\n    }\r\n\r\n    categorizeKeysByType(keysWithCommands, allKeys) {\r\n        const categories = {\r\n            function: {\r\n                name: 'Function Keys',\r\n                icon: 'fas fa-keyboard',\r\n                keys: new Set(),\r\n                priority: 1\r\n            },\r\n            alphanumeric: {\r\n                name: 'Letters & Numbers',\r\n                icon: 'fas fa-font',\r\n                keys: new Set(),\r\n                priority: 2\r\n            },\r\n            numberpad: {\r\n                name: 'Numberpad',\r\n                icon: 'fas fa-calculator',\r\n                keys: new Set(),\r\n                priority: 3\r\n            },\r\n            modifiers: {\r\n                name: 'Modifier Keys',\r\n                icon: 'fas fa-hand-paper',\r\n                keys: new Set(),\r\n                priority: 4\r\n            },\r\n            navigation: {\r\n                name: 'Navigation',\r\n                icon: 'fas fa-arrows-alt',\r\n                keys: new Set(),\r\n                priority: 5\r\n            },\r\n            system: {\r\n                name: 'System Keys',\r\n                icon: 'fas fa-cogs',\r\n                keys: new Set(),\r\n                priority: 6\r\n            },\r\n            mouse: {\r\n                name: 'Mouse & Wheel',\r\n                icon: 'fas fa-mouse',\r\n                keys: new Set(),\r\n                priority: 7\r\n            },\r\n            symbols: {\r\n                name: 'Symbols & Punctuation',\r\n                icon: 'fas fa-at',\r\n                keys: new Set(),\r\n                priority: 8\r\n            },\r\n            other: {\r\n                name: 'Other Keys',\r\n                icon: 'fas fa-question-circle',\r\n                keys: new Set(),\r\n                priority: 9\r\n            }\r\n        };\r\n        \r\n        // Categorize each key by its types (can be multiple)\r\n        allKeys.forEach(keyName => {\r\n            const keyTypes = this.detectKeyTypes(keyName);\r\n            keyTypes.forEach(keyType => {\r\n                if (categories[keyType]) {\r\n                    categories[keyType].keys.add(keyName);\r\n                } else {\r\n                    categories.other.keys.add(keyName);\r\n                }\r\n            });\r\n        });\r\n        \r\n        // Convert sets to arrays and sort\r\n        Object.values(categories).forEach(category => {\r\n            category.keys = Array.from(category.keys).sort(this.compareKeys.bind(this));\r\n        });\r\n        \r\n        return categories;\r\n    }\r\n\r\n    renderKeyTypeView(grid, profile, allKeys) {\r\n        // Add categorized class to override grid layout\r\n        grid.classList.add('categorized');\r\n        \r\n        // Categorize keys by their input type\r\n        const categorizedKeys = this.categorizeKeysByType(profile.keys, allKeys);\r\n        \r\n        // Sort categories by priority\r\n        const sortedCategories = Object.entries(categorizedKeys).sort(([aId, aData], [bId, bData]) => {\r\n            return aData.priority - bData.priority;\r\n        });\r\n        \r\n        // Create category tree structure - show all categories even if empty\r\n        sortedCategories.forEach(([categoryId, categoryData]) => {\r\n            const categoryElement = this.createKeyCategoryElement(categoryId, categoryData, 'key-type');\r\n            grid.appendChild(categoryElement);\r\n        });\r\n    }\r\n\r\n    compareKeys(a, b) {\r\n        // Custom key sorting logic\r\n        const getKeyPriority = (key) => {\r\n            if (key === 'Space') return 0;\r\n            if (key.match(/^[0-9]$/)) return 1;\r\n            if (key.match(/^F[0-9]+$/)) return 2;\r\n            if (key.includes('Ctrl+')) return 3;\r\n            if (key.includes('Alt+')) return 4;\r\n            if (key.includes('Shift+')) return 5;\r\n            return 6;\r\n        };\r\n        \r\n        const priorityA = getKeyPriority(a);\r\n        const priorityB = getKeyPriority(b);\r\n        \r\n        if (priorityA !== priorityB) {\r\n            return priorityA - priorityB;\r\n        }\r\n        \r\n        return a.localeCompare(b);\r\n    }\r\n\r\n    createKeyElement(keyName) {\r\n        const profile = this.getCurrentProfile();\r\n        const commands = profile.keys[keyName] || [];\r\n        const isSelected = keyName === this.selectedKey;\r\n        \r\n        const keyElement = document.createElement('div');\r\n        keyElement.className = `key-item ${isSelected ? 'active' : ''}`;\r\n        keyElement.dataset.key = keyName;\r\n        keyElement.title = `${keyName}: ${commands.length} command${commands.length !== 1 ? 's' : ''}`;\r\n        \r\n        // Smart formatting for compound keys and font sizing\r\n        const formattedKeyName = this.formatKeyName(keyName);\r\n        const hasLineBreaks = formattedKeyName.includes('<br>');\r\n        \r\n        // Determine length classification\r\n        let lengthClass;\r\n        if (hasLineBreaks) {\r\n            // For compound keys with line breaks, check the longest part\r\n            const parts = keyName.split('+');\r\n            const longestPart = Math.max(...parts.map(part => part.length));\r\n            if (longestPart <= 4) {\r\n                lengthClass = 'short';\r\n            } else if (longestPart <= 8) {\r\n                lengthClass = 'medium';\r\n            } else {\r\n                lengthClass = 'long';\r\n            }\r\n                 } else {\r\n             // For single keys, use total length\r\n             const keyLength = keyName.length;\r\n             if (keyLength <= 3) {\r\n                 lengthClass = 'short';\r\n             } else if (keyLength <= 5) {\r\n                 lengthClass = 'medium';\r\n             } else if (keyLength <= 8) {\r\n                 lengthClass = 'long';\r\n             } else {\r\n                 lengthClass = 'extra-long';\r\n             }\r\n         }\r\n         \r\n         keyElement.dataset.length = lengthClass;\r\n        \r\n        keyElement.innerHTML = `\r\n            <div class=\"key-label\">${formattedKeyName}</div>\r\n            ${commands.length > 0 ? `\r\n                <div class=\"activity-bar\" style=\"width: ${Math.min(commands.length * 15, 100)}%\"></div>\r\n                <div class=\"command-count-badge\">${commands.length}</div>\r\n            ` : ''}\r\n        `;\r\n        \r\n        keyElement.addEventListener('click', () => {\r\n            this.selectKey(keyName);\r\n        });\r\n        \r\n        return keyElement;\r\n    }\r\n\r\n    updateViewToggleButton(viewMode) {\r\n        const toggleBtn = document.getElementById('toggleKeyViewBtn');\r\n        if (toggleBtn) {\r\n            const icon = toggleBtn.querySelector('i');\r\n            if (viewMode === 'categorized') {\r\n                icon.className = 'fas fa-sitemap';\r\n                toggleBtn.title = 'Switch to key type view';\r\n            } else if (viewMode === 'key-types') {\r\n                icon.className = 'fas fa-th';\r\n                toggleBtn.title = 'Switch to grid view';\r\n            } else {\r\n                icon.className = 'fas fa-list';\r\n                toggleBtn.title = 'Switch to command categories';\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleKeyView() {\r\n        const currentMode = localStorage.getItem('keyViewMode') || 'key-types';\r\n        let newMode;\r\n        \r\n        // 3-way toggle: key-types → grid → categorized → key-types\r\n        if (currentMode === 'key-types') {\r\n            newMode = 'grid';\r\n        } else if (currentMode === 'grid') {\r\n            newMode = 'categorized';\r\n        } else {\r\n            newMode = 'key-types';\r\n        }\r\n        \r\n        localStorage.setItem('keyViewMode', newMode);\r\n        this.renderKeyGrid();\r\n    }\r\n\r\n    renderCommandChain() {\r\n        const container = document.getElementById('commandList');\r\n        const title = document.getElementById('chainTitle');\r\n        const preview = document.getElementById('commandPreview');\r\n        const commandCount = document.getElementById('commandCount');\r\n        const emptyState = document.getElementById('emptyState');\r\n        \r\n        if (!container || !title || !preview) return;\r\n        \r\n        if (!this.selectedKey) {\r\n            title.textContent = 'Select a key to edit';\r\n            preview.textContent = 'Select a key to see the generated command';\r\n            if (commandCount) commandCount.textContent = '0 commands';\r\n            if (emptyState) emptyState.style.display = 'block';\r\n            container.innerHTML = '<div class=\"empty-state\" id=\"emptyState\"><i class=\"fas fa-keyboard\"></i><h4>No Key Selected</h4><p>Select a key from the left panel to view and edit its command chain.</p></div>';\r\n            return;\r\n        }\r\n        \r\n        const profile = this.getCurrentProfile();\r\n        const commands = profile.keys[this.selectedKey] || [];\r\n        \r\n        title.textContent = `Command Chain for ${this.selectedKey}`;\r\n        if (commandCount) commandCount.textContent = `${commands.length} command${commands.length !== 1 ? 's' : ''}`;\r\n        \r\n        if (commands.length === 0) {\r\n            container.innerHTML = `\r\n                <div class=\"empty-state\">\r\n                    <i class=\"fas fa-plus-circle\"></i>\r\n                    <h4>No Commands</h4>\r\n                    <p>Click \"Add Command\" to start building your command chain for ${this.selectedKey}.</p>\r\n                </div>\r\n            `;\r\n            preview.textContent = `${this.selectedKey} \"\"`;\r\n        } else {\r\n            container.innerHTML = '';\r\n            commands.forEach((command, index) => {\r\n                const element = this.createCommandElement(command, index);\r\n                container.appendChild(element);\r\n            });\r\n            \r\n            // Update preview with optional mirroring\r\n            const stabilizeCheckbox = document.getElementById('stabilizeExecutionOrder');\r\n            const shouldStabilize = stabilizeCheckbox && stabilizeCheckbox.checked;\r\n            \r\n            let commandString;\r\n            if (shouldStabilize && commands.length > 1) {\r\n                commandString = stoKeybinds.generateMirroredCommandString(commands);\r\n            } else {\r\n                commandString = commands.map(cmd => cmd.command).join(' $$ ');\r\n            }\r\n            \r\n            preview.textContent = `${this.selectedKey} \"${commandString}\"`;\r\n        }\r\n    }\r\n\r\n    createCommandElement(command, index) {\r\n        const element = document.createElement('div');\r\n        element.className = 'command-item-row';\r\n        element.dataset.index = index;\r\n        element.draggable = true;\r\n        \r\n        // Check if this command matches a library definition\r\n        const commandDef = this.findCommandDefinition(command);\r\n        const isParameterized = commandDef && commandDef.customizable;\r\n        \r\n        // Use library definition for display if available\r\n        let displayName = command.text;\r\n        let displayIcon = command.icon;\r\n        \r\n        if (commandDef) {\r\n            displayName = commandDef.name;\r\n            displayIcon = commandDef.icon;\r\n            \r\n            // For parameterized commands, add parameter details to the name\r\n            if (isParameterized && command.parameters) {\r\n                if (commandDef.commandId === 'tray_with_backup') {\r\n                    const p = command.parameters;\r\n                    displayName = `${commandDef.name} (${p.active} ${p.tray} ${p.slot} ${p.backup_tray} ${p.backup_slot})`;\r\n                } else if (commandDef.commandId === 'custom_tray') {\r\n                    const p = command.parameters;\r\n                    displayName = `${commandDef.name} (${p.tray} ${p.slot})`;\r\n                } else if (commandDef.commandId === 'target') {\r\n                    const p = command.parameters;\r\n                    displayName = `${commandDef.name}: ${p.entityName}`;\r\n                }\r\n            } else if (isParameterized) {\r\n                // Extract parameters from command string for display\r\n                if (command.command.includes('TrayExecByTrayWithBackup')) {\r\n                    const parts = command.command.split(' ');\r\n                    if (parts.length >= 6) {\r\n                        displayName = `${commandDef.name} (${parts[1]} ${parts[2]} ${parts[3]} ${parts[4]} ${parts[5]})`;\r\n                    }\r\n                } else if (command.command.includes('TrayExec')) {\r\n                    const parts = command.command.replace('+', '').split(' ');\r\n                    if (parts.length >= 3) {\r\n                        displayName = `${commandDef.name} (${parts[1]} ${parts[2]})`;\r\n                    }\r\n                } else if (command.command.includes('Target ')) {\r\n                    const match = command.command.match(/Target \"([^\"]+)\"/);\r\n                    if (match) {\r\n                        displayName = `${commandDef.name}: ${match[1]}`;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Add parameters data attribute for styling\r\n        if (isParameterized) {\r\n            element.dataset.parameters = 'true';\r\n            element.classList.add('customizable');\r\n        }\r\n        \r\n        // Check if command has a warning\r\n        const warningInfo = this.getCommandWarning(command);\r\n        const warningIcon = warningInfo ? `<span class=\"command-warning-icon\" title=\"${warningInfo}\"><i class=\"fas fa-exclamation-triangle\"></i></span>` : '';\r\n        \r\n        // Add parameter indicator for tray commands and other parameterized commands\r\n        const parameterIndicator = isParameterized ? ' <span class=\"param-indicator\" title=\"Editable parameters\">⚙️</span>' : '';\r\n        \r\n        element.innerHTML = `\r\n            <div class=\"command-number\">${index + 1}</div>\r\n            <div class=\"command-content\">\r\n                <span class=\"command-icon\">${displayIcon}</span>\r\n                <span class=\"command-text\">${displayName}${parameterIndicator}</span>\r\n                ${warningIcon}\r\n            </div>\r\n            <span class=\"command-type ${command.type}\">${command.type}</span>\r\n            <div class=\"command-actions\">\r\n                <button class=\"btn btn-small-icon\" onclick=\"app.editCommand(${index})\" title=\"Edit Command\">\r\n                    <i class=\"fas fa-edit\"></i>\r\n                </button>\r\n                <button class=\"btn btn-small-icon btn-danger\" onclick=\"app.deleteCommand('${this.selectedKey}', ${index})\" title=\"Delete Command\">\r\n                    <i class=\"fas fa-times\"></i>\r\n                </button>\r\n                <button class=\"btn btn-small-icon\" onclick=\"app.moveCommand('${this.selectedKey}', ${index}, ${index - 1})\" \r\n                        title=\"Move Up\" ${index === 0 ? 'disabled' : ''}>\r\n                    <i class=\"fas fa-chevron-up\"></i>\r\n                </button>\r\n                <button class=\"btn btn-small-icon\" onclick=\"app.moveCommand('${this.selectedKey}', ${index}, ${index + 1})\" \r\n                        title=\"Move Down\" ${index === this.getCurrentProfile().keys[this.selectedKey].length - 1 ? 'disabled' : ''}>\r\n                    <i class=\"fas fa-chevron-down\"></i>\r\n                </button>\r\n            </div>\r\n        `;\r\n        \r\n        return element;\r\n    }\r\n\r\n    getCommandWarning(command) {\r\n        // Look up the command in the data structure to find its warning\r\n        const categories = STO_DATA.commands;\r\n        \r\n        for (const [categoryId, category] of Object.entries(categories)) {\r\n            for (const [cmdId, cmdData] of Object.entries(category.commands)) {\r\n                // Match by command text or actual command\r\n                if (cmdData.command === command.command || \r\n                    cmdData.name === command.text ||\r\n                    command.command.includes(cmdData.command)) {\r\n                    return cmdData.warning || null;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return null;\r\n    }\r\n\r\n    setupCommandLibrary() {\r\n        const container = document.getElementById('commandCategories');\r\n        if (!container) return;\r\n        \r\n        container.innerHTML = '';\r\n        \r\n        Object.entries(STO_DATA.commands).forEach(([categoryId, category]) => {\r\n            const categoryElement = this.createCategoryElement(categoryId, category);\r\n            container.appendChild(categoryElement);\r\n        });\r\n        \r\n        // Apply environment filtering after creating elements\r\n        this.filterCommandLibrary();\r\n    }\r\n\r\n    createCategoryElement(categoryId, category) {\r\n        const element = document.createElement('div');\r\n        element.className = 'category';\r\n        element.dataset.category = categoryId;\r\n        \r\n        // Check if category should be collapsed (similar to Keys UI)\r\n        const storageKey = `commandCategory_${categoryId}_collapsed`;\r\n        const isCollapsed = localStorage.getItem(storageKey) === 'true';\r\n        \r\n        element.innerHTML = `\r\n            <h4 class=\"${isCollapsed ? 'collapsed' : ''}\" data-category=\"${categoryId}\">\r\n                <i class=\"fas fa-chevron-right category-chevron\"></i>\r\n                <i class=\"${category.icon}\"></i> \r\n                ${category.name}\r\n                <span class=\"command-count\">(${Object.keys(category.commands).length})</span>\r\n            </h4>\r\n            <div class=\"category-commands ${isCollapsed ? 'collapsed' : ''}\">\r\n                ${Object.entries(category.commands).map(([cmdId, cmd]) => `\r\n                    <div class=\"command-item ${cmd.customizable ? 'customizable' : ''}\" data-command=\"${cmdId}\" title=\"${cmd.description}${cmd.customizable ? ' (Customizable)' : ''}\">\r\n                        ${cmd.icon} ${cmd.name}${cmd.customizable ? ' <span class=\"param-indicator\">⚙️</span>' : ''}\r\n                    </div>\r\n                `).join('')}\r\n            </div>\r\n        `;\r\n        \r\n        // Add click handler for category header\r\n        const header = element.querySelector('h4');\r\n        header.addEventListener('click', () => {\r\n            this.toggleCommandCategory(categoryId, element);\r\n        });\r\n        \r\n        // Add click handlers for commands\r\n        element.addEventListener('click', (e) => {\r\n            if (e.target.classList.contains('command-item')) {\r\n                const commandId = e.target.dataset.command;\r\n                this.addCommandFromLibrary(categoryId, commandId);\r\n            }\r\n        });\r\n        \r\n        return element;\r\n    }\r\n\r\n    toggleCommandCategory(categoryId, element) {\r\n        const header = element.querySelector('h4');\r\n        const commands = element.querySelector('.category-commands');\r\n        const chevron = header.querySelector('.category-chevron');\r\n        \r\n        const isCollapsed = commands.classList.contains('collapsed');\r\n        const storageKey = `commandCategory_${categoryId}_collapsed`;\r\n        \r\n        if (isCollapsed) {\r\n            commands.classList.remove('collapsed');\r\n            header.classList.remove('collapsed');\r\n            chevron.style.transform = 'rotate(90deg)';\r\n            localStorage.setItem(storageKey, 'false');\r\n        } else {\r\n            commands.classList.add('collapsed');\r\n            header.classList.add('collapsed');\r\n            chevron.style.transform = 'rotate(0deg)';\r\n            localStorage.setItem(storageKey, 'true');\r\n        }\r\n    }\r\n\r\n    addCommandFromLibrary(categoryId, commandId) {\r\n        if (!this.selectedKey) {\r\n            stoUI.showToast('Please select a key first', 'warning');\r\n            return;\r\n        }\r\n        \r\n        const commandDef = STO_DATA.commands[categoryId].commands[commandId];\r\n        if (!commandDef) return;\r\n        \r\n        // Check if command is parameterized\r\n        if (commandDef.customizable && commandDef.parameters) {\r\n            this.showParameterModal(categoryId, commandId, commandDef);\r\n            return;\r\n        }\r\n        \r\n        const command = {\r\n            command: commandDef.command,\r\n            type: categoryId,\r\n            icon: commandDef.icon,\r\n            text: commandDef.name,\r\n            id: this.generateCommandId()\r\n        };\r\n        \r\n        this.addCommand(this.selectedKey, command);\r\n    }\r\n\r\n    setupDragAndDrop() {\r\n        const commandList = document.getElementById('commandList');\r\n        if (!commandList) return;\r\n        \r\n        stoUI.initDragAndDrop(commandList, {\r\n            dragSelector: '.command-item-row',\r\n            dropZoneSelector: '.command-item-row',\r\n            onDrop: (e, dragState, dropZone) => {\r\n                if (!this.selectedKey) return;\r\n                \r\n                const fromIndex = parseInt(dragState.dragElement.dataset.index);\r\n                const toIndex = parseInt(dropZone.dataset.index);\r\n                \r\n                if (fromIndex !== toIndex) {\r\n                    this.moveCommand(this.selectedKey, fromIndex, toIndex);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    updateChainActions() {\r\n        const hasSelectedKey = !!this.selectedKey;\r\n        \r\n        // Enable/disable buttons based on selection\r\n        // Note: addAliasBtn is not included because aliases are independent of key selection\r\n        const buttonsToToggle = [\r\n            'addCommandBtn',\r\n            'addFromTemplateBtn', \r\n            'importFromKeyBtn',\r\n            'deleteKeyBtn',\r\n            'duplicateKeyBtn'\r\n        ];\r\n        \r\n        buttonsToToggle.forEach(btnId => {\r\n            const btn = document.getElementById(btnId);\r\n            if (btn) {\r\n                btn.disabled = !hasSelectedKey;\r\n            }\r\n        });\r\n    }\r\n\r\n    // Event Handlers\r\n    setupEventListeners() {\r\n        // Profile management\r\n        const profileSelect = document.getElementById('profileSelect');\r\n        profileSelect?.addEventListener('change', (e) => {\r\n            this.switchProfile(e.target.value);\r\n        });\r\n        \r\n        // Mode switching\r\n        document.querySelectorAll('.mode-btn').forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                const mode = e.target.dataset.mode;\r\n                this.switchMode(mode);\r\n            });\r\n        });\r\n        \r\n        // File operations\r\n        eventBus.onDom('openProjectBtn', 'click', 'project-open', () => {\r\n            this.openProject();\r\n        });\r\n        \r\n        eventBus.onDom('saveProjectBtn', 'click', 'project-save', () => {\r\n            this.saveProject();\r\n        });\r\n        \r\n        eventBus.onDom('exportKeybindsBtn', 'click', 'keybinds-export', () => {\r\n            this.exportKeybinds();\r\n        });\r\n        \r\n        // Vertigo VFX manager\r\n        eventBus.onDom('vertigoBtn', 'click', 'vertigo-open', () => {\r\n            this.showVertigoModal();\r\n        });\r\n        \r\n        // Key management\r\n        eventBus.onDom('addKeyBtn', 'click', 'key-add', () => {\r\n            this.showKeySelectionModal();\r\n        });\r\n        \r\n        eventBus.onDom('deleteKeyBtn', 'click', 'key-delete', () => {\r\n            if (this.selectedKey) {\r\n                this.confirmDeleteKey(this.selectedKey);\r\n            }\r\n        });\r\n        \r\n        eventBus.onDom('duplicateKeyBtn', 'click', 'key-duplicate', () => {\r\n            if (this.selectedKey) {\r\n                this.duplicateKey(this.selectedKey);\r\n            }\r\n        });\r\n        \r\n        // Command management\r\n        eventBus.onDom('addCommandBtn', 'click', 'command-add', () => {\r\n            modalManager.show('addCommandModal');\r\n        });\r\n        \r\n        eventBus.onDom('addFromTemplateBtn', 'click', 'command-add-template', () => {\r\n            this.showTemplateModal();\r\n        });\r\n        \r\n        eventBus.onDom('clearChainBtn', 'click', 'command-chain-clear', () => {\r\n            if (this.selectedKey) {\r\n                this.confirmClearChain(this.selectedKey);\r\n            }\r\n        });\r\n        \r\n        eventBus.onDom('validateChainBtn', 'click', 'command-chain-validate', () => {\r\n            this.validateCurrentChain();\r\n        });\r\n        \r\n        // Stabilization checkbox\r\n        eventBus.onDom('stabilizeExecutionOrder', 'change', 'stabilize-change', (e) => {\r\n            // Persist stabilization flag to stored profile (environment-scoped)\r\n            if (this.selectedKey) {\r\n                const env = this.currentEnvironment;\r\n                const storedProfile = stoStorage.getProfile(this.currentProfile);\r\n                if (storedProfile) {\r\n                    if (!storedProfile.keybindMetadata) {\r\n                        storedProfile.keybindMetadata = {};\r\n                    }\r\n                    if (!storedProfile.keybindMetadata[env]) {\r\n                        storedProfile.keybindMetadata[env] = {};\r\n                    }\r\n                    if (!storedProfile.keybindMetadata[env][this.selectedKey]) {\r\n                        storedProfile.keybindMetadata[env][this.selectedKey] = {};\r\n                    }\r\n                    storedProfile.keybindMetadata[env][this.selectedKey].stabilizeExecutionOrder = e.target.checked;\r\n\r\n                    // Save immediately and mark modified\r\n                    stoStorage.saveProfile(this.currentProfile, storedProfile);\r\n                    this.setModified(true);\r\n                }\r\n            }\r\n            this.renderCommandChain(); // Update preview when checkbox changes\r\n        });\r\n        \r\n        // Search and filter\r\n        eventBus.onDom('keyFilter', 'input', 'key-filter', (e) => {\r\n            this.filterKeys(e.target.value);\r\n        });\r\n        \r\n        eventBus.onDom('commandSearch', 'input', 'command-search', (e) => {\r\n            this.filterCommands(e.target.value);\r\n        });\r\n        \r\n        eventBus.onDom('showAllKeysBtn', 'click', 'show-all-keys', () => {\r\n            this.showAllKeys();\r\n        });\r\n        \r\n        // Key view toggle\r\n        eventBus.onDom('toggleKeyViewBtn', 'click', 'toggle-key-view', () => {\r\n            this.toggleKeyView();\r\n        });\r\n        \r\n        // Library toggle\r\n        eventBus.onDom('toggleLibraryBtn', 'click', 'toggle-library', () => {\r\n            this.toggleLibrary();\r\n        });\r\n        \r\n        // Modal handlers\r\n        this.setupModalHandlers();\r\n        \r\n        // Auto-save\r\n        setInterval(() => {\r\n            if (this.isModified) {\r\n                this.saveData();\r\n            }\r\n        }, 30000); // Auto-save every 30 seconds\r\n    }\r\n\r\n    setupModalHandlers() {\r\n        // Add Key Modal\r\n        eventBus.onDom('confirmAddKeyBtn', 'click', 'key-add-confirm', () => {\r\n            const keyName = document.getElementById('newKeyName')?.value.trim();\r\n            if (keyName) {\r\n                this.addKey(keyName);\r\n                modalManager.hide('addKeyModal');\r\n            }\r\n        });\r\n        \r\n        // Key suggestions\r\n        document.querySelectorAll('.key-suggestion').forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                const keyName = e.target.dataset.key;\r\n                const input = document.getElementById('newKeyName');\r\n                if (input) {\r\n                    input.value = keyName;\r\n                }\r\n            });\r\n        });\r\n        \r\n        // Add Command Modal\r\n        eventBus.onDom('saveCommandBtn', 'click', 'command-save', () => {\r\n            this.saveCommandFromModal();\r\n        });\r\n        \r\n        // Modal close handlers\r\n        document.querySelectorAll('.modal-close, [data-modal]').forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                const modalId = e.target.dataset.modal || e.target.closest('button').dataset.modal;\r\n                if (modalId) {\r\n                    modalManager.hide(modalId);\r\n                    \r\n                    // Handle Vertigo modal cancellation - rollback to initial state\r\n                    if (modalId === 'vertigoModal') {\r\n                        // Only rollback if we're not in the middle of saving\r\n                        if (this.vertigoInitialState && !this.vertigoSaving) {\r\n                            vertigoManager.selectedEffects.space = new Set(this.vertigoInitialState.selectedEffects.space);\r\n                            vertigoManager.selectedEffects.ground = new Set(this.vertigoInitialState.selectedEffects.ground);\r\n                            vertigoManager.showPlayerSay = this.vertigoInitialState.showPlayerSay;\r\n                        }\r\n                        \r\n                        // Clean up stored state\r\n                        delete this.vertigoInitialState;\r\n                        this.vertigoSaving = false;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Utility Methods\r\n    saveProfile() {\r\n        const virtualProfile = this.getCurrentProfile();\r\n        \r\n        if (!virtualProfile) {\r\n            return;\r\n        }\r\n        \r\n        // Save current build data to the proper structure\r\n        this.saveCurrentBuild();\r\n        \r\n        // Get the actual stored profile structure AFTER saveCurrentBuild\r\n        const actualProfile = stoStorage.getProfile(this.currentProfile);\r\n        if (!actualProfile) {\r\n            return;\r\n        }\r\n        \r\n        // Update profile-level data (aliases, metadata, etc.) from virtual profile\r\n        // but preserve the builds structure that was just saved\r\n        const updatedProfile = {\r\n            ...actualProfile, // Keep the actual structure with builds (now includes saved keybinds)\r\n            // Update profile-level fields from virtual profile\r\n            name: virtualProfile.name,\r\n            description: virtualProfile.description || actualProfile.description,\r\n            aliases: virtualProfile.aliases || {},\r\n            keybindMetadata: virtualProfile.keybindMetadata || actualProfile.keybindMetadata,\r\n            // Preserve existing profile fields\r\n            created: actualProfile.created,\r\n            lastModified: new Date().toISOString(),\r\n            currentEnvironment: this.currentEnvironment\r\n        };\r\n        \r\n        stoStorage.saveProfile(this.currentProfile, updatedProfile);\r\n    }\r\n\r\n    switchMode(mode) {\r\n        if (this.currentEnvironment !== mode) {\r\n            // Save current build before switching\r\n            this.saveCurrentBuild();\r\n            \r\n            this.currentEnvironment = mode;\r\n            \r\n            // Update profile's current environment\r\n            const profile = stoStorage.getProfile(this.currentProfile);\r\n            if (profile) {\r\n                profile.currentEnvironment = mode;\r\n                stoStorage.saveProfile(this.currentProfile, profile);\r\n            }\r\n            \r\n            // Update UI button states\r\n            this.updateModeButtons();\r\n            \r\n            this.updateProfileInfo();\r\n            this.renderKeyGrid();\r\n            this.renderCommandChain();\r\n            this.filterCommandLibrary(); // Apply environment filter to command library\r\n            this.setModified(true);\r\n            \r\n            stoUI.showToast(`Switched to ${mode} mode`, 'success');\r\n        }\r\n    }\r\n    \r\n    updateModeButtons() {\r\n        // Update the active state of mode buttons\r\n        const spaceBtn = document.querySelector('[data-mode=\"space\"]');\r\n        const groundBtn = document.querySelector('[data-mode=\"ground\"]');\r\n        \r\n        if (spaceBtn && groundBtn) {\r\n            spaceBtn.classList.toggle('active', this.currentEnvironment === 'space');\r\n            groundBtn.classList.toggle('active', this.currentEnvironment === 'ground');\r\n        }\r\n    }\r\n\r\n    saveCurrentBuild() {\r\n        const profile = stoStorage.getProfile(this.currentProfile);\r\n        const currentBuild = this.getCurrentProfile();\r\n        \r\n        if (profile && currentBuild) {\r\n            // Ensure builds structure exists\r\n            if (!profile.builds) {\r\n                profile.builds = {\r\n                    space: { keys: {} },\r\n                    ground: { keys: {} }\r\n                };\r\n            }\r\n            \r\n            // Save current build data\r\n            profile.builds[this.currentEnvironment] = {\r\n                keys: currentBuild.keys || {}\r\n                // Note: aliases are profile-level, not build-specific\r\n            };\r\n            \r\n            stoStorage.saveProfile(this.currentProfile, profile);\r\n        }\r\n    }\r\n\r\n    async confirmDeleteKey(keyName) {\r\n        const confirmed = await stoUI.confirm(\r\n            `Are you sure you want to delete the key \"${keyName}\" and all its commands?`,\r\n            'Delete Key',\r\n            'danger'\r\n        );\r\n        \r\n        if (confirmed) {\r\n            this.deleteKey(keyName);\r\n        }\r\n    }\r\n\r\n    async confirmClearChain(keyName) {\r\n        const confirmed = await stoUI.confirm(\r\n            `Are you sure you want to clear all commands for \"${keyName}\"?`,\r\n            'Clear Commands',\r\n            'warning'\r\n        );\r\n        \r\n        if (confirmed) {\r\n            const profile = this.getCurrentProfile();\r\n            profile.keys[keyName] = [];\r\n            this.saveCurrentBuild(); // Use saveCurrentBuild for build-level data\r\n            this.renderCommandChain();\r\n            this.renderKeyGrid();\r\n            this.setModified(true);\r\n            \r\n            stoUI.showToast(`Commands cleared for ${keyName}`, 'success');\r\n        }\r\n    }\r\n\r\n    openProject() {\r\n        const input = document.getElementById('fileInput');\r\n        input.accept = '.json';\r\n        input.onchange = (e) => {\r\n            const file = e.target.files[0];\r\n            if (file) {\r\n                const reader = new FileReader();\r\n                reader.onload = (e) => {\r\n                    try {\r\n                        const success = stoStorage.importData(e.target.result);\r\n                        if (success) {\r\n                            this.loadData();\r\n                            this.renderProfiles();\r\n                            this.renderKeyGrid();\r\n                            this.renderCommandChain();\r\n                            stoUI.showToast('Project loaded successfully', 'success');\r\n                        } else {\r\n                            stoUI.showToast('Failed to load project file', 'error');\r\n                        }\r\n                    } catch (error) {\r\n                        stoUI.showToast('Invalid project file', 'error');\r\n                    }\r\n                };\r\n                reader.readAsText(file);\r\n            }\r\n        };\r\n        input.click();\r\n    }\r\n\r\n    saveProject() {\r\n        const data = stoStorage.exportData();\r\n        const blob = new Blob([data], { type: 'application/json' });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = 'sto_keybinds.json';\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n        \r\n        stoUI.showToast('Project exported successfully', 'success');\r\n    }\r\n\r\n    exportKeybinds() {\r\n        const profile = this.getCurrentProfile();\r\n        if (!profile) return;\r\n\r\n        // Generate keybind file (per-key stabilization handled within export manager)\r\n        const content = stoExport.generateSTOKeybindFile(profile, { environment: this.currentEnvironment });\r\n\r\n        // Download the file\r\n        const blob = new Blob([content], { type: 'text/plain' });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n\r\n        // Include environment in filename\r\n        const safeName = profile.name.replace(/[^a-zA-Z0-9]/g, '_');\r\n        a.download = `${safeName}_${this.currentEnvironment}_keybinds.txt`;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n\r\n        stoUI.showToast(`${this.currentEnvironment} keybinds exported successfully`, 'success');\r\n    }\r\n\r\n    isFirstTime() {\r\n        return !localStorage.getItem('sto_keybind_manager_visited');\r\n    }\r\n\r\n    showWelcomeMessage() {\r\n        localStorage.setItem('sto_keybind_manager_visited', 'true');\r\n        modalManager.show('aboutModal');\r\n    }\r\n\r\n    // Additional Methods\r\n    duplicateKey(keyName) {\r\n        const profile = this.getCurrentProfile();\r\n        const commands = profile.keys[keyName];\r\n        \r\n        if (!commands || commands.length === 0) {\r\n            stoUI.showToast('No commands to duplicate', 'warning');\r\n            return;\r\n        }\r\n        \r\n        // Find a suitable new key name\r\n        let newKeyName = keyName + '_copy';\r\n        let counter = 1;\r\n        \r\n        while (profile.keys[newKeyName]) {\r\n            newKeyName = `${keyName}_copy_${counter}`;\r\n            counter++;\r\n        }\r\n        \r\n        // Clone commands\r\n        const clonedCommands = commands.map(cmd => ({\r\n            ...cmd,\r\n            id: this.generateCommandId()\r\n        }));\r\n        \r\n        profile.keys[newKeyName] = clonedCommands;\r\n        stoStorage.saveProfile(this.currentProfile, profile);\r\n        this.renderKeyGrid();\r\n        this.setModified(true);\r\n        \r\n        stoUI.showToast(`Key \"${keyName}\" duplicated as \"${newKeyName}\"`, 'success');\r\n    }\r\n    \r\n    showTemplateModal() {\r\n        stoUI.showToast('Template system coming soon', 'info');\r\n    }\r\n    \r\n    validateCurrentChain() {\r\n        if (!this.selectedKey) {\r\n            stoUI.showToast('No key selected', 'warning');\r\n            return;\r\n        }\r\n        \r\n        const profile = this.getCurrentProfile();\r\n        const commands = profile.keys[this.selectedKey] || [];\r\n        \r\n        if (commands.length === 0) {\r\n            stoUI.showToast('No commands to validate', 'warning');\r\n            return;\r\n        }\r\n        \r\n        const validation = stoKeybinds.validateKeybind(this.selectedKey, commands);\r\n        \r\n        if (validation.valid) {\r\n            stoUI.showToast('Command chain is valid', 'success');\r\n        } else {\r\n            const errorMsg = 'Validation errors:\\n' + validation.errors.join('\\n');\r\n            stoUI.showToast(errorMsg, 'error', 5000);\r\n        }\r\n    }\r\n    \r\n    filterKeys(filter) {\r\n        const filterLower = filter.toLowerCase();\r\n        \r\n        // Filter grid view keys (.key-item)\r\n        const keyItems = document.querySelectorAll('.key-item');\r\n        keyItems.forEach(item => {\r\n            const keyName = item.dataset.key.toLowerCase();\r\n            const visible = !filter || keyName.includes(filterLower);\r\n            item.style.display = visible ? 'flex' : 'none';\r\n        });\r\n        \r\n        // Filter categorized/key-type view keys (.command-item[data-key])\r\n        const commandItems = document.querySelectorAll('.command-item[data-key]');\r\n        commandItems.forEach(item => {\r\n            const keyName = item.dataset.key.toLowerCase();\r\n            const visible = !filter || keyName.includes(filterLower);\r\n            item.style.display = visible ? 'flex' : 'none';\r\n        });\r\n        \r\n        // Hide/show categories based on whether they have visible keys\r\n        const categories = document.querySelectorAll('.category');\r\n        categories.forEach(category => {\r\n            const visibleKeys = category.querySelectorAll('.command-item[data-key]:not([style*=\"display: none\"])');\r\n            const categoryVisible = !filter || visibleKeys.length > 0;\r\n            category.style.display = categoryVisible ? 'block' : 'none';\r\n        });\r\n    }\r\n    \r\n    filterCommands(filter) {\r\n        const commandItems = document.querySelectorAll('.command-item');\r\n        const filterLower = filter.toLowerCase();\r\n        \r\n        // Filter command items\r\n        commandItems.forEach(item => {\r\n            const text = item.textContent.toLowerCase();\r\n            const visible = !filter || text.includes(filterLower);\r\n            item.style.display = visible ? 'flex' : 'none';\r\n        });\r\n        \r\n        // Hide/show categories based on whether they have visible commands\r\n        const categories = document.querySelectorAll('.category');\r\n        categories.forEach(category => {\r\n            const visibleCommands = category.querySelectorAll('.command-item:not([style*=\"display: none\"])');\r\n            const categoryVisible = !filter || visibleCommands.length > 0;\r\n            category.style.display = categoryVisible ? 'block' : 'none';\r\n        });\r\n    }\r\n    \r\n    showAllKeys() {\r\n        // Show all grid view keys\r\n        const keyItems = document.querySelectorAll('.key-item');\r\n        keyItems.forEach(item => {\r\n            item.style.display = 'flex';\r\n        });\r\n        \r\n        // Show all categorized/key-type view keys\r\n        const commandItems = document.querySelectorAll('.command-item[data-key]');\r\n        commandItems.forEach(item => {\r\n            item.style.display = 'flex';\r\n        });\r\n        \r\n        // Show all categories\r\n        const categories = document.querySelectorAll('.category');\r\n        categories.forEach(category => {\r\n            category.style.display = 'block';\r\n        });\r\n        \r\n        const filterInput = document.getElementById('keyFilter');\r\n        if (filterInput) {\r\n            filterInput.value = '';\r\n        }\r\n    }\r\n    \r\n    toggleLibrary() {\r\n        const content = document.getElementById('libraryContent');\r\n        const btn = document.getElementById('toggleLibraryBtn');\r\n        \r\n        if (content && btn) {\r\n            const isCollapsed = content.style.display === 'none';\r\n            content.style.display = isCollapsed ? 'block' : 'none';\r\n            \r\n            const icon = btn.querySelector('i');\r\n            if (icon) {\r\n                icon.className = isCollapsed ? 'fas fa-chevron-up' : 'fas fa-chevron-down';\r\n            }\r\n        }\r\n    }\r\n    \r\n    saveCommandFromModal() {\r\n        if (!this.selectedKey) {\r\n            stoUI.showToast('Please select a key first', 'warning');\r\n            return;\r\n        }\r\n        \r\n        const command = stoCommands.getCurrentCommand();\r\n        if (!command) {\r\n            stoUI.showToast('Please configure a command', 'warning');\r\n            return;\r\n        }\r\n        \r\n        const validation = stoCommands.validateCommand(command);\r\n        if (!validation.valid) {\r\n            stoUI.showToast(validation.error, 'error');\r\n            return;\r\n        }\r\n        \r\n        this.addCommand(this.selectedKey, command);\r\n        modalManager.hide('addCommandModal');\r\n    }\r\n    \r\n    // Parameter Modal for Customizable Commands\r\n    showParameterModal(categoryId, commandId, commandDef) {\r\n        this.currentParameterCommand = { categoryId, commandId, commandDef };\r\n        \r\n        // Create modal if it doesn't exist\r\n        if (!document.getElementById('parameterModal')) {\r\n            this.createParameterModal();\r\n        }\r\n        \r\n        // Populate modal with parameter inputs\r\n        this.populateParameterModal(commandDef);\r\n        \r\n        // Show modal\r\n        modalManager.show('parameterModal');\r\n    }\r\n    \r\n    createParameterModal() {\r\n        const modal = document.createElement('div');\r\n        modal.className = 'modal';\r\n        modal.id = 'parameterModal';\r\n        modal.innerHTML = `\r\n            <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                    <h3 id=\"parameterModalTitle\">Configure Command Parameters</h3>\r\n                    <button class=\"modal-close\" data-modal=\"parameterModal\">\r\n                        <i class=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n                <div class=\"modal-body\">\r\n                    <div id=\"parameterInputs\">\r\n                        <!-- Parameter inputs will be populated here -->\r\n                    </div>\r\n                    <div class=\"command-preview-modal\">\r\n                        <label>Generated Command:</label>\r\n                        <div class=\"command-preview\" id=\"parameterCommandPreview\">\r\n                            <!-- Command preview will be shown here -->\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <button class=\"btn btn-primary\" id=\"saveParameterCommandBtn\">Add Command</button>\r\n                    <button class=\"btn btn-secondary\" data-modal=\"parameterModal\">Cancel</button>\r\n                </div>\r\n            </div>\r\n        `;\r\n        \r\n        document.body.appendChild(modal);\r\n        \r\n        // Add event listeners\r\n        eventBus.onDom('saveParameterCommandBtn', 'click', 'parameter-command-save', () => {\r\n            this.saveParameterCommand();\r\n        });\r\n        \r\n        // Close modal handlers - handle both X button and Cancel button\r\n        const closeButtons = modal.querySelectorAll('.modal-close, [data-modal=\"parameterModal\"]');\r\n        closeButtons.forEach(button => {\r\n            button.addEventListener('click', () => {\r\n                this.cancelParameterCommand();\r\n            });\r\n        });\r\n    }\r\n    \r\n    cancelParameterCommand() {\r\n        // Clean up state\r\n        this.currentParameterCommand = null;\r\n        \r\n        // Reset modal button text in case we were editing\r\n        const saveBtn = document.getElementById('saveParameterCommandBtn');\r\n        if (saveBtn) {\r\n            saveBtn.textContent = 'Add Command';\r\n        }\r\n        \r\n        // Hide modal\r\n        modalManager.hide('parameterModal');\r\n    }\r\n    \r\n    populateParameterModal(commandDef) {\r\n        const container = document.getElementById('parameterInputs');\r\n        const titleElement = document.getElementById('parameterModalTitle');\r\n        \r\n        titleElement.textContent = `Configure: ${commandDef.name}`;\r\n        container.innerHTML = '';\r\n        \r\n        // Create input for each parameter\r\n        Object.entries(commandDef.parameters).forEach(([paramName, paramDef]) => {\r\n            const inputGroup = document.createElement('div');\r\n            inputGroup.className = 'form-group';\r\n            \r\n            const label = document.createElement('label');\r\n            label.textContent = this.formatParameterName(paramName);\r\n            label.setAttribute('for', `param_${paramName}`);\r\n            \r\n            let input; // Declare input variable outside the if/else blocks\r\n            \r\n            // For message parameters, create input with $Target button\r\n            if (paramName === 'message') {\r\n                const inputContainer = document.createElement('div');\r\n                inputContainer.className = 'input-with-button';\r\n                \r\n                input = document.createElement('input');\r\n                input.type = 'text';\r\n                input.id = `param_${paramName}`;\r\n                input.name = paramName;\r\n                input.value = paramDef.default || '';\r\n                \r\n                if (paramDef.placeholder) {\r\n                    input.placeholder = paramDef.placeholder;\r\n                }\r\n                \r\n                const targetButton = document.createElement('button');\r\n                targetButton.type = 'button';\r\n                targetButton.className = 'btn btn-small insert-target-btn';\r\n                targetButton.title = 'Insert $Target variable';\r\n                targetButton.innerHTML = '<i class=\"fas fa-crosshairs\"></i> $Target';\r\n                \r\n                inputContainer.appendChild(input);\r\n                inputContainer.appendChild(targetButton);\r\n                \r\n                const help = document.createElement('small');\r\n                help.textContent = this.getParameterHelp(paramName, paramDef);\r\n                \r\n                const variableHelp = document.createElement('div');\r\n                variableHelp.className = 'variable-help';\r\n                variableHelp.innerHTML = '<strong>$Target</strong> - Use to include your current target\\'s name in the message';\r\n                \r\n                inputGroup.appendChild(label);\r\n                inputGroup.appendChild(inputContainer);\r\n                inputGroup.appendChild(help);\r\n                inputGroup.appendChild(variableHelp);\r\n                \r\n                // Note: Event handling is done by global event delegation in commands.js\r\n            } else {\r\n                // Handle different parameter types\r\n                if (paramDef.type === 'select') {\r\n                    // Create select dropdown\r\n                    input = document.createElement('select');\r\n                    input.id = `param_${paramName}`;\r\n                    input.name = paramName;\r\n                    \r\n                    // Add options\r\n                    paramDef.options.forEach(option => {\r\n                        const optionElement = document.createElement('option');\r\n                        optionElement.value = option;\r\n                        optionElement.textContent = option === 'STOTrayExecByTray' \r\n                            ? 'STOTrayExecByTray (shows key binding on UI)' \r\n                            : 'TrayExecByTray (no UI indication)';\r\n                        if (option === paramDef.default) {\r\n                            optionElement.selected = true;\r\n                        }\r\n                        input.appendChild(optionElement);\r\n                    });\r\n                } else {\r\n                    // Regular input for non-select parameters\r\n                    input = document.createElement('input');\r\n                    input.type = paramDef.type === 'number' ? 'number' : 'text';\r\n                    input.id = `param_${paramName}`;\r\n                    input.name = paramName;\r\n                    input.value = paramDef.default || '';\r\n                    \r\n                    if (paramDef.placeholder) {\r\n                        input.placeholder = paramDef.placeholder;\r\n                    }\r\n                    \r\n                    if (paramDef.type === 'number') {\r\n                        if (paramDef.min !== undefined) input.min = paramDef.min;\r\n                        if (paramDef.max !== undefined) input.max = paramDef.max;\r\n                        if (paramDef.step !== undefined) input.step = paramDef.step;\r\n                    }\r\n                }\r\n                \r\n                const help = document.createElement('small');\r\n                help.textContent = this.getParameterHelp(paramName, paramDef);\r\n                \r\n                inputGroup.appendChild(label);\r\n                inputGroup.appendChild(input);\r\n                inputGroup.appendChild(help);\r\n            }\r\n            container.appendChild(inputGroup);\r\n            \r\n            // Add real-time preview update\r\n            input.addEventListener('input', () => {\r\n                this.updateParameterPreview();\r\n            });\r\n            \r\n            // Also listen for 'change' event for select elements\r\n            if (input.tagName === 'SELECT') {\r\n                input.addEventListener('change', () => {\r\n                    this.updateParameterPreview();\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Initial preview update\r\n        this.updateParameterPreview();\r\n    }\r\n    \r\n    formatParameterName(paramName) {\r\n        return paramName.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\r\n    }\r\n    \r\n    getParameterHelp(paramName, paramDef) {\r\n        const helps = {\r\n            entityName: 'Name of the entity to target (e.g., ship name, player name)',\r\n            active: 'Whether the command is active (1 = active, 0 = inactive)',\r\n            tray: 'Primary tray number (0-9, where 0 is the first tray)',\r\n            slot: 'Primary slot number (0-9, where 0 is the first slot)',\r\n            backup_tray: 'Backup tray number (0-9, where 0 is the first tray)',\r\n            backup_slot: 'Backup slot number (0-9, where 0 is the first slot)',\r\n            amount: 'Throttle adjustment amount (-1 to 1)',\r\n            position: 'Throttle position (-1 = full reverse, 0 = stop, 1 = full forward)',\r\n            distance: 'Camera distance from target',\r\n            filename: 'Name of the keybind file (without extension)',\r\n            message: 'Text message to send',\r\n            state: 'Enable (1) or disable (0) combat log',\r\n            command_type: 'STOTrayExecByTray shows key binding on UI, TrayExecByTray does not'\r\n        };\r\n        \r\n        return helps[paramName] || `${paramDef.type} value ${paramDef.min !== undefined ? `(${paramDef.min} to ${paramDef.max})` : ''}`;\r\n    }\r\n    \r\n    updateParameterPreview() {\r\n        if (!this.currentParameterCommand) return;\r\n        \r\n        const { categoryId, commandId, commandDef } = this.currentParameterCommand;\r\n        const params = this.getParameterValues();\r\n        \r\n        // Generate command using the command builder\r\n        const command = this.buildParameterizedCommand(categoryId, commandId, commandDef, params);\r\n        \r\n        const preview = document.getElementById('parameterCommandPreview');\r\n        if (preview && command) {\r\n            // Support both single and array command results\r\n            if (Array.isArray(command)) {\r\n                const commandStrings = command.map(cmd => cmd.command);\r\n                preview.textContent = commandStrings.join(' $$ ');\r\n            } else {\r\n                preview.textContent = command.command;\r\n            }\r\n        }\r\n    }\r\n    \r\n    getParameterValues() {\r\n        const params = {};\r\n        const inputs = document.querySelectorAll('#parameterInputs input, #parameterInputs select');\r\n        \r\n        inputs.forEach(input => {\r\n            const paramName = input.name;\r\n            let value = input.value;\r\n            \r\n            if (input.type === 'number') {\r\n                value = parseFloat(value) || 0;\r\n            }\r\n            \r\n            params[paramName] = value;\r\n        });\r\n        \r\n        return params;\r\n    }\r\n    \r\n    buildParameterizedCommand(categoryId, commandId, commandDef, params) {\r\n        // Use the command builder logic from commands.js\r\n        const builders = {\r\n            targeting: (params) => {\r\n                if (commandId === 'target' && params.entityName) {\r\n                    return {\r\n                        command: `${commandDef.command} \"${params.entityName}\"`,\r\n                        text: `Target: ${params.entityName}`\r\n                    };\r\n                }\r\n                return { command: commandDef.command, text: commandDef.name };\r\n            },\r\n            tray: (params) => {\r\n                const tray = params.tray || 0;\r\n                const slot = params.slot || 0;\r\n                \r\n                if (commandId === 'tray_with_backup') {\r\n                    const active = params.active !== undefined ? params.active : 1;\r\n                    const backupTray = params.backup_tray || 0;\r\n                    const backupSlot = params.backup_slot || 0;\r\n                    \r\n                    return {\r\n                        command: `TrayExecByTrayWithBackup ${active} ${tray} ${slot} ${backupTray} ${backupSlot}`,\r\n                        text: `Execute Tray ${tray + 1} Slot ${slot + 1} (backup: Tray ${backupTray + 1} Slot ${backupSlot + 1})`\r\n                    };\r\n                } else if (commandId === 'tray_range') {\r\n                    const startTray = params.start_tray || 0;\r\n                    const startSlot = params.start_slot || 0;\r\n                    const endTray = params.end_tray || 0;\r\n                    const endSlot = params.end_slot || 0;\r\n                    const commandType = params.command_type || 'STOTrayExecByTray';\r\n                    \r\n                    const commands = stoCommands.generateTrayRangeCommands(startTray, startSlot, endTray, endSlot, commandType);\r\n                    \r\n                    // Return array of command objects with slot-specific parameters\r\n                    return commands.map((cmd, index) => {\r\n                        // Attempt to extract tray and slot numbers from the command string\r\n                        let trayParam, slotParam;\r\n                        try {\r\n                            const parts = cmd.replace('+', '').trim().split(/\\s+/);\r\n                            trayParam = parseInt(parts[1]);\r\n                            slotParam = parseInt(parts[2]);\r\n                        } catch (_) {\r\n                            trayParam = undefined;\r\n                            slotParam = undefined;\r\n                        }\r\n\r\n                        return {\r\n                            command: cmd,\r\n                            type: categoryId,\r\n                            icon: commandDef.icon,\r\n                            text: index === 0 ? `Execute Range: Tray ${startTray + 1} Slot ${startSlot + 1} to Tray ${endTray + 1} Slot ${endSlot + 1}` : cmd,\r\n                            id: this.generateCommandId(),\r\n                            parameters: { tray: trayParam, slot: slotParam }\r\n                        };\r\n                    });\r\n                } else if (commandId === 'tray_range_with_backup') {\r\n                    const active = params.active || 1;\r\n                    const startTray = params.start_tray || 0;\r\n                    const startSlot = params.start_slot || 0;\r\n                    const endTray = params.end_tray || 0;\r\n                    const endSlot = params.end_slot || 0;\r\n                    const backupStartTray = params.backup_start_tray || 0;\r\n                    const backupStartSlot = params.backup_start_slot || 0;\r\n                    const backupEndTray = params.backup_end_tray || 0;\r\n                    const backupEndSlot = params.backup_end_slot || 0;\r\n                    \r\n                    const commands = stoCommands.generateTrayRangeWithBackupCommands(\r\n                        active, startTray, startSlot, endTray, endSlot,\r\n                        backupStartTray, backupStartSlot, backupEndTray, backupEndSlot\r\n                    );\r\n                    \r\n                    // Return array with parsed parameters for each command\r\n                    return commands.map((cmd, index) => {\r\n                        let activeParam, primaryTray, primarySlot, backupTrayParam, backupSlotParam;\r\n                        try {\r\n                            const parts = cmd.trim().split(/\\s+/);\r\n                            // TrayExecByTrayWithBackup <active> <tray> <slot> <backup_tray> <backup_slot>\r\n                            activeParam = parseInt(parts[1]);\r\n                            primaryTray = parseInt(parts[2]);\r\n                            primarySlot = parseInt(parts[3]);\r\n                            backupTrayParam = parseInt(parts[4]);\r\n                            backupSlotParam = parseInt(parts[5]);\r\n                        } catch (_) {}\r\n\r\n                        return {\r\n                            command: cmd,\r\n                            type: categoryId,\r\n                            icon: commandDef.icon,\r\n                            text: index === 0 ? `Execute Range with Backup: Tray ${startTray + 1}-${endTray + 1}` : cmd,\r\n                            id: this.generateCommandId(),\r\n                            parameters: {\r\n                                active: activeParam,\r\n                                tray: primaryTray,\r\n                                slot: primarySlot,\r\n                                backup_tray: backupTrayParam,\r\n                                backup_slot: backupSlotParam\r\n                            }\r\n                        };\r\n                    });\r\n                } else if (commandId === 'whole_tray') {\r\n                    const commandType = params.command_type || 'STOTrayExecByTray';\r\n                    const commands = stoCommands.generateWholeTrayCommands(tray, commandType);\r\n                    \r\n                    // Return array of command objects instead of single command with $$\r\n                    return commands.map((cmd, index) => {\r\n                        // Extract slot number\r\n                        let slotParam;\r\n                        try {\r\n                            const parts = cmd.replace('+', '').trim().split(/\\s+/);\r\n                            slotParam = parseInt(parts[2]);\r\n                        } catch (_) {\r\n                            slotParam = undefined;\r\n                        }\r\n\r\n                        return {\r\n                            command: cmd,\r\n                            type: categoryId,\r\n                            icon: commandDef.icon,\r\n                            text: index === 0 ? `Execute Whole Tray ${tray + 1}` : cmd,\r\n                            id: this.generateCommandId(),\r\n                            parameters: { tray, slot: slotParam }\r\n                        };\r\n                    });\r\n                } else if (commandId === 'whole_tray_with_backup') {\r\n                    const active = params.active || 1;\r\n                    const backupTray = params.backup_tray || 0;\r\n                    \r\n                    const commands = stoCommands.generateWholeTrayWithBackupCommands(active, tray, backupTray);\r\n                    \r\n                    // Return array with parsed parameters for each command\r\n                    return commands.map((cmd, index) => {\r\n                        let activeParam, primaryTray, primarySlot, backupTrayParam, backupSlotParam;\r\n                        try {\r\n                            const parts = cmd.trim().split(/\\s+/);\r\n                            // TrayExecByTrayWithBackup <active> <tray> <slot> <backup_tray> <backup_slot>\r\n                            activeParam = parseInt(parts[1]);\r\n                            primaryTray = parseInt(parts[2]);\r\n                            primarySlot = parseInt(parts[3]);\r\n                            backupTrayParam = parseInt(parts[4]);\r\n                            backupSlotParam = parseInt(parts[5]);\r\n                        } catch (_) {}\r\n\r\n                        return {\r\n                            command: cmd,\r\n                            type: categoryId,\r\n                            icon: commandDef.icon,\r\n                            text: index === 0 ? `Execute Whole Tray ${tray + 1} (with backup Tray ${backupTray + 1})` : cmd,\r\n                            id: this.generateCommandId(),\r\n                            parameters: {\r\n                                active: activeParam,\r\n                                tray: primaryTray,\r\n                                slot: primarySlot,\r\n                                backup_tray: backupTrayParam,\r\n                                backup_slot: backupSlotParam\r\n                            }\r\n                        };\r\n                    });\r\n                } else {\r\n                    // Preserve original command format when editing\r\n                    const isEditing = this.currentParameterCommand && this.currentParameterCommand.isEditing;\r\n                    const commandType = params.command_type || 'STOTrayExecByTray';\r\n                    const prefix = '+';\r\n                    \r\n                    if (isEditing) {\r\n                        const profile = this.getCurrentProfile();\r\n                        const existingCommand = profile.keys[this.selectedKey][this.currentParameterCommand.editIndex];\r\n                        if (existingCommand && (existingCommand.command.startsWith('TrayExecByTray') || existingCommand.command.startsWith('+TrayExecByTray'))) {\r\n                            return {\r\n                                command: `+TrayExecByTray ${tray} ${slot}`,\r\n                                text: `Execute Tray ${tray + 1} Slot ${slot + 1}`\r\n                            };\r\n                        }\r\n                    }\r\n                    \r\n                    return {\r\n                        command: `${prefix}${commandType} ${tray} ${slot}`,\r\n                        text: `Execute Tray ${tray + 1} Slot ${slot + 1}`\r\n                    };\r\n                }\r\n            },\r\n            movement: (params) => {\r\n                let command = commandDef.command;\r\n                if (commandId === 'throttle_adjust' && params.amount !== undefined) {\r\n                    command = `${commandDef.command} ${params.amount}`;\r\n                } else if (commandId === 'throttle_set' && params.position !== undefined) {\r\n                    command = `${commandDef.command} ${params.position}`;\r\n                }\r\n                return { command, text: commandDef.name };\r\n            },\r\n            camera: (params) => {\r\n                let command = commandDef.command;\r\n                if (commandId === 'cam_distance' && params.distance !== undefined) {\r\n                    command = `${commandDef.command} ${params.distance}`;\r\n                }\r\n                return { command, text: commandDef.name };\r\n            },\r\n            communication: (params) => ({\r\n                command: `${commandDef.command} ${params.message || 'Message text here'}`,\r\n                text: `${commandDef.name}: ${params.message || 'Message text here'}`\r\n            }),\r\n            system: (params) => {\r\n                let command = commandDef.command;\r\n                if ((commandId === 'bind_save_file' || commandId === 'bind_load_file') && params.filename) {\r\n                    command = `${commandDef.command} ${params.filename}`;\r\n                } else if (commandId === 'combat_log' && params.state !== undefined) {\r\n                    command = `${commandDef.command} ${params.state}`;\r\n                }\r\n                return { command, text: commandDef.name };\r\n            }\r\n        };\r\n        \r\n        const builder = builders[categoryId];\r\n        if (builder) {\r\n            const result = builder(params);\r\n            // If tray (or other) builder returned an array of command objects, forward it\r\n            if (Array.isArray(result)) {\r\n                return result;\r\n            }\r\n\r\n            // Otherwise wrap single command\r\n            return {\r\n                command: result.command,\r\n                type: categoryId,\r\n                icon: commandDef.icon,\r\n                text: result.text,\r\n                id: this.generateCommandId(),\r\n                parameters: params\r\n            };\r\n        }\r\n        \r\n        return null;\r\n    }\r\n    \r\n    saveParameterCommand() {\r\n        if (!this.selectedKey || !this.currentParameterCommand) return;\r\n        \r\n        const { categoryId, commandId, commandDef, editIndex, isEditing } = this.currentParameterCommand;\r\n        const params = this.getParameterValues();\r\n        \r\n        const command = this.buildParameterizedCommand(categoryId, commandId, commandDef, params);\r\n        \r\n        if (command) {\r\n            if (isEditing && editIndex !== undefined) {\r\n                // For arrays of commands, we need to handle replacement differently\r\n                if (Array.isArray(command)) {\r\n                    const profile = this.getCurrentProfile();\r\n                    const commands = profile.keys[this.selectedKey];\r\n                    \r\n                    // Remove the old command and insert the new array of commands\r\n                    commands.splice(editIndex, 1, ...command);\r\n                    \r\n                    stoStorage.saveProfile(this.currentProfile, profile);\r\n                    this.renderCommandChain();\r\n                    this.setModified(true);\r\n                    stoUI.showToast(`${command.length} commands updated successfully`, 'success');\r\n                } else {\r\n                    // Update existing single command\r\n                    const profile = this.getCurrentProfile();\r\n                    profile.keys[this.selectedKey][editIndex] = command;\r\n                    stoStorage.saveProfile(this.currentProfile, profile);\r\n                    this.renderCommandChain();\r\n                    this.setModified(true);\r\n                    stoUI.showToast('Command updated successfully', 'success');\r\n                }\r\n            } else {\r\n                // Add new command (addCommand already handles arrays)\r\n                this.addCommand(this.selectedKey, command);\r\n            }\r\n            \r\n            modalManager.hide('parameterModal');\r\n            this.currentParameterCommand = null;\r\n            \r\n            // Reset modal button text\r\n            document.getElementById('saveParameterCommandBtn').textContent = 'Add Command';\r\n        }\r\n    }\r\n    \r\n    editCommand(index) {\r\n        if (!this.selectedKey) return;\r\n        \r\n        const profile = this.getCurrentProfile();\r\n        const commands = profile.keys[this.selectedKey];\r\n        \r\n        if (!commands || !commands[index]) return;\r\n        \r\n        const command = commands[index];\r\n        \r\n        // Check if this is a parameterized command that can be edited\r\n        if (command.parameters && command.type) {\r\n            // Find the original command definition\r\n            const commandDef = this.findCommandDefinition(command);\r\n            if (commandDef && commandDef.customizable) {\r\n                this.editParameterizedCommand(index, command, commandDef);\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Also check if command is detectable as parameterized via findCommandDefinition\r\n        const commandDef = this.findCommandDefinition(command);\r\n        if (commandDef && commandDef.customizable) {\r\n            this.editParameterizedCommand(index, command, commandDef);\r\n            return;\r\n        }\r\n        \r\n        // For non-parameterized commands, show command details\r\n        stoUI.showToast(`Command: ${command.command}\\nType: ${command.type}`, 'info', 3000);\r\n    }\r\n    \r\n    findCommandDefinition(command) {\r\n        // Special handling for tray execution commands - detect by command string\r\n        if (command.command.includes('TrayExec')) {\r\n            const trayCategory = STO_DATA.commands.tray;\r\n            if (trayCategory) {\r\n                // Check for multiple TrayExecByTrayWithBackup commands (range with backup)\r\n                if (command.command.includes('TrayExecByTrayWithBackup') && command.command.includes('$$')) {\r\n                    const parts = command.command.split('$$').map(s => s.trim());\r\n                    if (parts.length > 1) {\r\n                        const trayRangeWithBackupDef = trayCategory.commands.tray_range_with_backup;\r\n                        if (trayRangeWithBackupDef) {\r\n                            return { commandId: 'tray_range_with_backup', ...trayRangeWithBackupDef };\r\n                        }\r\n                    }\r\n                }\r\n                // Check for multiple STOTrayExecByTray/TrayExecByTray commands (range)\r\n                else if ((command.command.includes('STOTrayExecByTray') || command.command.includes('TrayExecByTray')) && \r\n                         command.command.includes('$$') && !command.command.includes('WithBackup')) {\r\n                    const parts = command.command.split('$$').map(s => s.trim());\r\n                    if (parts.length > 1) {\r\n                        const trayRangeDef = trayCategory.commands.tray_range;\r\n                        if (trayRangeDef) {\r\n                            return { commandId: 'tray_range', ...trayRangeDef };\r\n                        }\r\n                    }\r\n                }\r\n                // Check for single TrayExecByTrayWithBackup\r\n                else if (command.command.includes('TrayExecByTrayWithBackup')) {\r\n                    const trayWithBackupDef = trayCategory.commands.tray_with_backup;\r\n                    if (trayWithBackupDef) {\r\n                        return { commandId: 'tray_with_backup', ...trayWithBackupDef };\r\n                    }\r\n                }\r\n                // Check for STOTrayExecByTray or TrayExecByTray (both use same dialog)\r\n                else if (command.command.includes('STOTrayExecByTray') || \r\n                         (command.command.includes('TrayExecByTray') && !command.command.includes('WithBackup'))) {\r\n                    const customTrayDef = trayCategory.commands.custom_tray;\r\n                    if (customTrayDef) {\r\n                        return { commandId: 'custom_tray', ...customTrayDef };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        const category = STO_DATA.commands[command.type];\r\n        if (!category) return null;\r\n        \r\n        // First try to find exact command match (for non-customizable commands)\r\n        for (const [commandId, commandDef] of Object.entries(category.commands)) {\r\n            if (commandDef.command === command.command) {\r\n                return { commandId, ...commandDef };\r\n            }\r\n        }\r\n        \r\n        // Then try to find the command by matching the base command string (for customizable commands)\r\n        for (const [commandId, commandDef] of Object.entries(category.commands)) {\r\n            if (commandDef.customizable && command.command.startsWith(commandDef.command.split(' ')[0])) {\r\n                return { commandId, ...commandDef };\r\n            }\r\n        }\r\n        \r\n        return null;\r\n    }\r\n    \r\n    editParameterizedCommand(index, command, commandDef) {\r\n        this.currentParameterCommand = { \r\n            categoryId: command.type, \r\n            commandId: commandDef.commandId, \r\n            commandDef,\r\n            editIndex: index,\r\n            isEditing: true\r\n        };\r\n        \r\n        // Create modal if it doesn't exist\r\n        if (!document.getElementById('parameterModal')) {\r\n            this.createParameterModal();\r\n        }\r\n        \r\n        // Populate modal with existing parameter values\r\n        this.populateParameterModalForEdit(commandDef, command.parameters);\r\n        \r\n        // Change modal title and button text for editing\r\n        document.getElementById('parameterModalTitle').textContent = `Edit: ${commandDef.name}`;\r\n        document.getElementById('saveParameterCommandBtn').textContent = 'Update Command';\r\n        \r\n        // Show modal\r\n        modalManager.show('parameterModal');\r\n    }\r\n    \r\n    populateParameterModalForEdit(commandDef, existingParams) {\r\n        const container = document.getElementById('parameterInputs');\r\n        container.innerHTML = '';\r\n        \r\n        // Create input for each parameter with existing values\r\n        Object.entries(commandDef.parameters).forEach(([paramName, paramDef]) => {\r\n            const inputGroup = document.createElement('div');\r\n            inputGroup.className = 'form-group';\r\n            \r\n            const label = document.createElement('label');\r\n            label.textContent = this.formatParameterName(paramName);\r\n            label.setAttribute('for', `param_${paramName}`);\r\n            \r\n            let input;\r\n            \r\n            // Handle different parameter types\r\n            if (paramDef.type === 'select') {\r\n                // Create select dropdown\r\n                input = document.createElement('select');\r\n                input.id = `param_${paramName}`;\r\n                input.name = paramName;\r\n                \r\n                // Add options\r\n                paramDef.options.forEach(option => {\r\n                    const optionElement = document.createElement('option');\r\n                    optionElement.value = option;\r\n                    optionElement.textContent = option === 'STOTrayExecByTray' \r\n                        ? 'STOTrayExecByTray (shows key binding on UI)' \r\n                        : 'TrayExecByTray (no UI indication)';\r\n                    input.appendChild(optionElement);\r\n                });\r\n                \r\n                // Set existing value or default\r\n                const existingValue = existingParams && existingParams[paramName] !== undefined \r\n                    ? existingParams[paramName] \r\n                    : paramDef.default;\r\n                input.value = existingValue !== undefined && existingValue !== null ? existingValue : paramDef.default;\r\n            } else {\r\n                // Regular input for non-select parameters\r\n                input = document.createElement('input');\r\n                input.type = paramDef.type === 'number' ? 'number' : 'text';\r\n                input.id = `param_${paramName}`;\r\n                input.name = paramName;\r\n                \r\n                // Use existing parameter value or default\r\n                const existingValue = existingParams && existingParams[paramName] !== undefined \r\n                    ? existingParams[paramName] \r\n                    : paramDef.default;\r\n                input.value = existingValue !== undefined && existingValue !== null ? existingValue : '';\r\n                \r\n                if (paramDef.placeholder) {\r\n                    input.placeholder = paramDef.placeholder;\r\n                }\r\n                \r\n                if (paramDef.type === 'number') {\r\n                    if (paramDef.min !== undefined) input.min = paramDef.min;\r\n                    if (paramDef.max !== undefined) input.max = paramDef.max;\r\n                    if (paramDef.step !== undefined) input.step = paramDef.step;\r\n                }\r\n            }\r\n            \r\n            const help = document.createElement('small');\r\n            help.textContent = this.getParameterHelp(paramName, paramDef);\r\n            \r\n            inputGroup.appendChild(label);\r\n            inputGroup.appendChild(input);\r\n            inputGroup.appendChild(help);\r\n            container.appendChild(inputGroup);\r\n            \r\n            // Add real-time preview update\r\n            input.addEventListener('input', () => {\r\n                this.updateParameterPreview();\r\n            });\r\n            \r\n            // Also listen for 'change' event for select elements\r\n            if (input.tagName === 'SELECT') {\r\n                input.addEventListener('change', () => {\r\n                    this.updateParameterPreview();\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Initial preview update\r\n        this.updateParameterPreview();\r\n    }\r\n\r\n    filterCommandLibrary() {\r\n        // Filter commands in the command library based on current environment\r\n        const commandItems = document.querySelectorAll('.command-item');\r\n        \r\n        commandItems.forEach(item => {\r\n            const commandId = item.dataset.command;\r\n            if (!commandId) return;\r\n            \r\n            // Find the command definition\r\n            let commandDef = null;\r\n            let categoryKey = null;\r\n            \r\n            // Search through all categories for this command\r\n            for (const [catKey, category] of Object.entries(STO_DATA.commands)) {\r\n                if (category.commands[commandId]) {\r\n                    commandDef = category.commands[commandId];\r\n                    categoryKey = catKey;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            if (commandDef) {\r\n                let shouldShow = true;\r\n                \r\n                // Check if command has environment restriction\r\n                if (commandDef.environment) {\r\n                    // If command has specific environment, only show it in that environment\r\n                    shouldShow = commandDef.environment === this.currentEnvironment;\r\n                } else {\r\n                    // If no environment specified, show in all environments\r\n                    shouldShow = true;\r\n                }\r\n                \r\n                // Apply visibility\r\n                item.style.display = shouldShow ? 'flex' : 'none';\r\n            }\r\n        });\r\n        \r\n        // Hide/show categories based on whether they have visible commands\r\n        const categories = document.querySelectorAll('.category');\r\n        categories.forEach(category => {\r\n            const visibleCommands = category.querySelectorAll('.command-item:not([style*=\"display: none\"])');\r\n            const categoryVisible = visibleCommands.length > 0;\r\n            category.style.display = categoryVisible ? 'block' : 'none';\r\n        });\r\n    }\r\n\r\n    showKeySelectionModal() {\r\n        this.setupKeySelectionModal();\r\n        modalManager.show('keySelectionModal');\r\n    }\r\n\r\n    setupKeySelectionModal() {\r\n        // Populate common keys\r\n        this.populateCommonKeys();\r\n        \r\n        // Setup \"Find other keys\" button\r\n        const findKeysBtn = document.getElementById('findOtherKeysBtn');\r\n        if (findKeysBtn) {\r\n            findKeysBtn.onclick = () => this.showFullKeyList();\r\n        }\r\n        \r\n        // Setup search functionality\r\n        const searchInput = document.getElementById('keySearchInput');\r\n        if (searchInput) {\r\n            searchInput.oninput = (e) => this.filterKeyList(e.target.value);\r\n        }\r\n    }\r\n\r\n    populateCommonKeys() {\r\n        const commonKeysGrid = document.getElementById('commonKeysGrid');\r\n        if (!commonKeysGrid) return;\r\n\r\n        const commonKeys = STO_DATA.keys.common.keys;\r\n        commonKeysGrid.innerHTML = '';\r\n\r\n        commonKeys.forEach(keyData => {\r\n            const keyButton = document.createElement('div');\r\n            keyButton.className = 'key-button';\r\n            keyButton.onclick = () => this.selectKeyFromModal(keyData.key);\r\n            \r\n            keyButton.innerHTML = `\r\n                <div class=\"key-name\">${keyData.key}</div>\r\n                <div class=\"key-desc\">${keyData.description}</div>\r\n            `;\r\n            \r\n            commonKeysGrid.appendChild(keyButton);\r\n        });\r\n    }\r\n\r\n    showFullKeyList() {\r\n        const fullKeysSection = document.getElementById('fullKeysSection');\r\n        const findKeysBtn = document.getElementById('findOtherKeysBtn');\r\n        \r\n        if (fullKeysSection && findKeysBtn) {\r\n            fullKeysSection.style.display = 'block';\r\n            findKeysBtn.style.display = 'none';\r\n            \r\n            // Populate categories if not already done\r\n            this.populateKeyCategories();\r\n        }\r\n    }\r\n\r\n    populateKeyCategories() {\r\n        const keyCategories = document.getElementById('keyCategories');\r\n        if (!keyCategories) return;\r\n\r\n        keyCategories.innerHTML = '';\r\n\r\n        // Skip common keys since they're already shown above\r\n        Object.entries(STO_DATA.keys).forEach(([categoryId, categoryData]) => {\r\n            if (categoryId === 'common') return;\r\n            \r\n            // Debug logging\r\n            console.log('Processing category:', categoryId, categoryData);\r\n            \r\n            // Validate category data\r\n            if (!categoryData || !categoryData.name || !categoryData.keys) {\r\n                console.warn(`Invalid category data for categoryId: ${categoryId}`, categoryData);\r\n                return;\r\n            }\r\n\r\n            const categoryElement = document.createElement('div');\r\n            categoryElement.className = 'key-category';\r\n            \r\n            const headerElement = document.createElement('div');\r\n            headerElement.className = 'key-category-header';\r\n            headerElement.onclick = () => this.toggleKeySelectionCategory(categoryId);\r\n            \r\n            headerElement.innerHTML = `\r\n                <div>\r\n                    <h5>${categoryData.name}</h5>\r\n                    <div class=\"category-desc\">${categoryData.description || ''}</div>\r\n                </div>\r\n                <i class=\"fas fa-chevron-right category-chevron\"></i>\r\n            `;\r\n            \r\n            const contentElement = document.createElement('div');\r\n            contentElement.className = 'key-category-content collapsed';\r\n            contentElement.id = `key-category-${categoryId}`;\r\n            \r\n            // Populate keys for this category\r\n            if (Array.isArray(categoryData.keys)) {\r\n                categoryData.keys.forEach(keyData => {\r\n                    if (keyData && keyData.key) {\r\n                        const keyButton = document.createElement('div');\r\n                        keyButton.className = 'key-button';\r\n                        keyButton.onclick = () => this.selectKeyFromModal(keyData.key);\r\n                        \r\n                        keyButton.innerHTML = `\r\n                            <div class=\"key-name\">${keyData.key}</div>\r\n                            <div class=\"key-desc\">${keyData.description || ''}</div>\r\n                        `;\r\n                        \r\n                        contentElement.appendChild(keyButton);\r\n                    }\r\n                });\r\n            }\r\n            \r\n            categoryElement.appendChild(headerElement);\r\n            categoryElement.appendChild(contentElement);\r\n            keyCategories.appendChild(categoryElement);\r\n        });\r\n    }\r\n\r\n    toggleKeySelectionCategory(categoryId) {\r\n        const content = document.getElementById(`key-category-${categoryId}`);\r\n        if (!content) {\r\n            console.warn(`Key selection category content not found for categoryId: ${categoryId}`);\r\n            return;\r\n        }\r\n        \r\n        const header = content.previousElementSibling;\r\n        \r\n        if (content && header) {\r\n            const isCollapsed = content.classList.contains('collapsed');\r\n            \r\n            if (isCollapsed) {\r\n                content.classList.remove('collapsed');\r\n                header.classList.remove('collapsed');\r\n                // Update chevron rotation\r\n                const chevron = header.querySelector('.category-chevron');\r\n                if (chevron) {\r\n                    chevron.style.transform = 'rotate(90deg)';\r\n                }\r\n            } else {\r\n                content.classList.add('collapsed');\r\n                header.classList.add('collapsed');\r\n                // Update chevron rotation\r\n                const chevron = header.querySelector('.category-chevron');\r\n                if (chevron) {\r\n                    chevron.style.transform = 'rotate(0deg)';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    filterKeyList(searchTerm) {\r\n        const term = searchTerm.toLowerCase().trim();\r\n        \r\n        // Filter through all key buttons in categories\r\n        const keyButtons = document.querySelectorAll('#keyCategories .key-button');\r\n        \r\n        keyButtons.forEach(button => {\r\n            const keyName = button.querySelector('.key-name').textContent.toLowerCase();\r\n            const keyDesc = button.querySelector('.key-desc').textContent.toLowerCase();\r\n            \r\n            const matches = keyName.includes(term) || keyDesc.includes(term);\r\n            button.style.display = matches ? 'flex' : 'none';\r\n        });\r\n        \r\n        // Show/hide categories based on visible keys\r\n        const categories = document.querySelectorAll('.key-category');\r\n        categories.forEach(category => {\r\n            const visibleKeys = category.querySelectorAll('.key-button:not([style*=\"display: none\"])');\r\n            const hasVisibleKeys = visibleKeys.length > 0;\r\n            \r\n            if (term === '') {\r\n                // If no search term, show all categories but keep them collapsed\r\n                category.style.display = 'block';\r\n            } else {\r\n                // If searching, show categories with matches and expand them\r\n                category.style.display = hasVisibleKeys ? 'block' : 'none';\r\n                \r\n                if (hasVisibleKeys) {\r\n                    const content = category.querySelector('.key-category-content');\r\n                    const header = category.querySelector('.key-category-header');\r\n                    if (content && header) {\r\n                        content.classList.remove('collapsed');\r\n                        header.classList.remove('collapsed');\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    selectKeyFromModal(keyName) {\r\n        modalManager.hide('keySelectionModal');\r\n        this.selectKey(keyName);\r\n    }\r\n\r\n    insertTargetVariable(input) {\r\n        const targetVar = '$Target';\r\n        const cursorPosition = input.selectionStart;\r\n        const value = input.value;\r\n        const newValue = value.slice(0, cursorPosition) + targetVar + value.slice(cursorPosition);\r\n        input.value = newValue;\r\n        input.setSelectionRange(cursorPosition + targetVar.length, cursorPosition + targetVar.length);\r\n        input.focus();\r\n        \r\n        // Trigger input event to update preview\r\n        input.dispatchEvent(new Event('input', { bubbles: true }));\r\n    }\r\n\r\n    // Vertigo VFX Manager Methods\r\n    showVertigoModal() {\r\n        // Load state from root profile (not build-specific view)\r\n        const rootProfile = stoStorage.getProfile(this.currentProfile);\r\n        if (rootProfile) {\r\n            vertigoManager.loadState(rootProfile);\r\n        }\r\n        \r\n        // Store the initial state for potential rollback on cancel\r\n        this.vertigoInitialState = {\r\n            selectedEffects: {\r\n                space: new Set(vertigoManager.selectedEffects.space),\r\n                ground: new Set(vertigoManager.selectedEffects.ground)\r\n            },\r\n            showPlayerSay: vertigoManager.showPlayerSay\r\n        };\r\n        \r\n        this.populateVertigoModal();\r\n        this.setupVertigoEventListeners();\r\n        modalManager.show('vertigoModal');\r\n    }\r\n\r\n    populateVertigoModal() {\r\n        // Populate space effects\r\n        const spaceList = document.getElementById('spaceEffectsList');\r\n        if (spaceList) {\r\n            spaceList.innerHTML = '';\r\n            VFX_EFFECTS.space.forEach(effect => {\r\n                const effectItem = this.createEffectItem('space', effect);\r\n                spaceList.appendChild(effectItem);\r\n            });\r\n        }\r\n\r\n        // Populate ground effects\r\n        const groundList = document.getElementById('groundEffectsList');\r\n        if (groundList) {\r\n            groundList.innerHTML = '';\r\n            VFX_EFFECTS.ground.forEach(effect => {\r\n                const effectItem = this.createEffectItem('ground', effect);\r\n                groundList.appendChild(effectItem);\r\n            });\r\n        }\r\n\r\n        // Update UI state based on loaded data\r\n        this.updateVertigoCheckboxes('space');\r\n        this.updateVertigoCheckboxes('ground');\r\n        \r\n        // Update PlayerSay checkbox\r\n        const playerSayCheckbox = document.getElementById('vertigoShowPlayerSay');\r\n        if (playerSayCheckbox) {\r\n            playerSayCheckbox.checked = vertigoManager.showPlayerSay;\r\n        }\r\n        \r\n        // Update effect counts and preview\r\n        this.updateVertigoEffectCounts();\r\n        this.updateVertigoPreview();\r\n    }\r\n\r\n    createEffectItem(environment, effect) {\r\n        const item = document.createElement('div');\r\n        item.className = 'effect-item';\r\n        item.innerHTML = `\r\n            <input type=\"checkbox\" id=\"effect_${environment}_${effect.effect.replace(/[^a-zA-Z0-9]/g, '_')}\" \r\n                   data-environment=\"${environment}\" \r\n                   data-effect=\"${effect.effect}\">\r\n            <label for=\"effect_${environment}_${effect.effect.replace(/[^a-zA-Z0-9]/g, '_')}\" \r\n                   class=\"effect-label\">${effect.label}</label>\r\n        `;\r\n        \r\n        const checkbox = item.querySelector('input[type=\"checkbox\"]');\r\n        checkbox.addEventListener('change', () => {\r\n            vertigoManager.toggleEffect(environment, effect.effect);\r\n            this.updateVertigoEffectCounts();\r\n            this.updateVertigoPreview();\r\n            item.classList.toggle('selected', checkbox.checked);\r\n            \r\n            // Note: Don't save immediately - only save when \"Generate Aliases\" is clicked\r\n            // This allows for proper transaction behavior with rollback on cancel\r\n        });\r\n\r\n        const label = item.querySelector('.effect-label');\r\n        label.addEventListener('click', () => {\r\n            checkbox.checked = !checkbox.checked;\r\n            checkbox.dispatchEvent(new Event('change'));\r\n        });\r\n\r\n        return item;\r\n    }\r\n\r\n    setupVertigoEventListeners() {\r\n        // Clear existing listeners to avoid duplicates\r\n        const existingListeners = ['spaceSelectAll', 'spaceClearAll', 'groundSelectAll', 'groundClearAll', 'vertigoShowPlayerSay', 'saveVertigoBtn'];\r\n        existingListeners.forEach(id => {\r\n            const element = document.getElementById(id);\r\n            if (element) {\r\n                element.replaceWith(element.cloneNode(true));\r\n            }\r\n        });\r\n\r\n        // Space controls\r\n        eventBus.onDom('spaceSelectAll', 'click', 'vertigo-space-select-all', () => {\r\n            try {\r\n                vertigoManager.selectAllEffects('space');\r\n                this.updateVertigoCheckboxes('space');\r\n                this.updateVertigoEffectCounts();\r\n                this.updateVertigoPreview();\r\n                \r\n                // Note: Don't save immediately - only save when \"Generate Aliases\" is clicked\r\n            } catch (error) {\r\n                if (error instanceof InvalidEnvironmentError) {\r\n                    stoUI.showToast(`Error: ${error.message}`, 'error');\r\n                } else {\r\n                    stoUI.showToast('Failed to select all space effects', 'error');\r\n                    console.error('Error selecting all space effects:', error);\r\n                }\r\n            }\r\n        });\r\n\r\n        eventBus.onDom('spaceClearAll', 'click', 'vertigo-space-clear-all', () => {\r\n            vertigoManager.selectedEffects.space.clear();\r\n            this.updateVertigoCheckboxes('space');\r\n            this.updateVertigoEffectCounts();\r\n            this.updateVertigoPreview();\r\n            \r\n            // Note: Don't save immediately - only save when \"Generate Aliases\" is clicked\r\n        });\r\n\r\n        // Ground controls\r\n        eventBus.onDom('groundSelectAll', 'click', 'vertigo-ground-select-all', () => {\r\n            try {\r\n                vertigoManager.selectAllEffects('ground');\r\n                this.updateVertigoCheckboxes('ground');\r\n                this.updateVertigoEffectCounts();\r\n                this.updateVertigoPreview();\r\n                \r\n                // Note: Don't save immediately - only save when \"Generate Aliases\" is clicked\r\n            } catch (error) {\r\n                if (error instanceof InvalidEnvironmentError) {\r\n                    stoUI.showToast(`Error: ${error.message}`, 'error');\r\n                } else {\r\n                    stoUI.showToast('Failed to select all ground effects', 'error');\r\n                    console.error('Error selecting all ground effects:', error);\r\n                }\r\n            }\r\n        });\r\n\r\n        eventBus.onDom('groundClearAll', 'click', 'vertigo-ground-clear-all', () => {\r\n            vertigoManager.selectedEffects.ground.clear();\r\n            this.updateVertigoCheckboxes('ground');\r\n            this.updateVertigoEffectCounts();\r\n            this.updateVertigoPreview();\r\n            \r\n            // Note: Don't save immediately - only save when \"Generate Aliases\" is clicked\r\n        });\r\n\r\n        // Show Player Say toggle\r\n        eventBus.onDom('vertigoShowPlayerSay', 'change', 'vertigo-show-playersay', (e) => {\r\n            vertigoManager.showPlayerSay = e.target.checked;\r\n            this.updateVertigoPreview();\r\n            \r\n            // Note: Don't save immediately - only save when \"Generate Aliases\" is clicked\r\n        });\r\n\r\n        // Generate aliases button\r\n        eventBus.onDom('saveVertigoBtn', 'click', 'vertigo-save', () => {\r\n            this.generateVertigoAliases();\r\n        });\r\n    }\r\n\r\n    updateVertigoCheckboxes(environment) {\r\n        const checkboxes = document.querySelectorAll(`input[data-environment=\"${environment}\"]`);\r\n        checkboxes.forEach(checkbox => {\r\n            const effectName = checkbox.dataset.effect;\r\n            const isSelected = vertigoManager.isEffectSelected(environment, effectName);\r\n            checkbox.checked = isSelected;\r\n            checkbox.closest('.effect-item').classList.toggle('selected', isSelected);\r\n        });\r\n    }\r\n\r\n    updateVertigoEffectCounts() {\r\n        const spaceCount = vertigoManager.getEffectCount('space');\r\n        const groundCount = vertigoManager.getEffectCount('ground');\r\n        \r\n        const spaceCounter = document.getElementById('spaceEffectCount');\r\n        const groundCounter = document.getElementById('groundEffectCount');\r\n        \r\n        if (spaceCounter) {\r\n            spaceCounter.textContent = `${spaceCount} selected`;\r\n        }\r\n        \r\n        if (groundCounter) {\r\n            groundCounter.textContent = `${groundCount} selected`;\r\n        }\r\n    }\r\n\r\n    updateVertigoPreview() {\r\n        const spacePreview = document.getElementById('spaceAliasCommand');\r\n        const groundPreview = document.getElementById('groundAliasCommand');\r\n        \r\n        // Update space preview\r\n        if (spacePreview) {\r\n            try {\r\n                const spaceAlias = vertigoManager.generateAlias('space');\r\n                spacePreview.textContent = spaceAlias || 'No space effects selected';\r\n            } catch (error) {\r\n                if (error instanceof InvalidEnvironmentError) {\r\n                    spacePreview.textContent = 'Error: Invalid environment';\r\n                    stoUI.showToast(`Space preview error: ${error.message}`, 'error');\r\n                } else {\r\n                    spacePreview.textContent = 'Error generating preview';\r\n                    console.error('Error generating space alias preview:', error);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Update ground preview\r\n        if (groundPreview) {\r\n            try {\r\n                const groundAlias = vertigoManager.generateAlias('ground');\r\n                groundPreview.textContent = groundAlias || 'No ground effects selected';\r\n            } catch (error) {\r\n                if (error instanceof InvalidEnvironmentError) {\r\n                    groundPreview.textContent = 'Error: Invalid environment';\r\n                    stoUI.showToast(`Ground preview error: ${error.message}`, 'error');\r\n                } else {\r\n                    groundPreview.textContent = 'Error generating preview';\r\n                    console.error('Error generating ground alias preview:', error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    generateVertigoAliases() {\r\n        let spaceAlias = '';\r\n        let groundAlias = '';\r\n        \r\n        // Generate aliases with error handling\r\n        try {\r\n            spaceAlias = vertigoManager.generateAlias('space');\r\n        } catch (error) {\r\n            if (error instanceof InvalidEnvironmentError) {\r\n                stoUI.showToast(`Space alias error: ${error.message}`, 'error');\r\n                return;\r\n            } else {\r\n                stoUI.showToast('Failed to generate space alias', 'error');\r\n                console.error('Error generating space alias:', error);\r\n                return;\r\n            }\r\n        }\r\n        \r\n        try {\r\n            groundAlias = vertigoManager.generateAlias('ground');\r\n        } catch (error) {\r\n            if (error instanceof InvalidEnvironmentError) {\r\n                stoUI.showToast(`Ground alias error: ${error.message}`, 'error');\r\n                return;\r\n            } else {\r\n                stoUI.showToast('Failed to generate ground alias', 'error');\r\n                console.error('Error generating ground alias:', error);\r\n                return;\r\n            }\r\n        }\r\n        \r\n        if (!spaceAlias && !groundAlias) {\r\n            stoUI.showToast('No effects selected. Please select at least one effect to generate aliases.', 'warning');\r\n            return;\r\n        }\r\n\r\n        const currentProfile = this.getCurrentProfile();\r\n        if (!currentProfile) {\r\n            stoUI.showToast('No profile selected', 'error');\r\n            return;\r\n        }\r\n\r\n        // Get the root profile object (not the build-specific view)\r\n        const rootProfile = stoStorage.getProfile(this.currentProfile);\r\n        if (!rootProfile) {\r\n            stoUI.showToast('No profile found', 'error');\r\n            return;\r\n        }\r\n\r\n        let addedCount = 0;\r\n\r\n        // Ensure aliases structure exists at profile level (not build-specific)\r\n        if (!rootProfile.aliases) {\r\n            rootProfile.aliases = {};\r\n        }\r\n\r\n        // Add space alias if effects are selected\r\n        if (spaceAlias) {\r\n            const spaceAliasName = 'dynFxSetFXExlusionList_Space';\r\n            // Extract commands from the full alias (remove the alias name and brackets)\r\n            // spaceAlias format: 'alias aliasName <& commands&>'\r\n            const match = spaceAlias.match(/alias\\s+\\w+\\s+<&\\s+(.+?)&>/);\r\n            const spaceCommands = match ? match[1] : '';\r\n            \r\n            rootProfile.aliases[spaceAliasName] = {\r\n                name: spaceAliasName,\r\n                description: 'VFX - Disable Space Visual Effects',\r\n                commands: spaceCommands,\r\n                created: new Date().toISOString(),\r\n                lastModified: new Date().toISOString()\r\n            };\r\n            addedCount++;\r\n        }\r\n\r\n        // Add ground alias if effects are selected\r\n        if (groundAlias) {\r\n            const groundAliasName = 'dynFxSetFXExlusionList_Ground';\r\n            // Extract commands from the full alias (remove the alias name and brackets)\r\n            // groundAlias format: 'alias aliasName <& commands&>'\r\n            const match = groundAlias.match(/alias\\s+\\w+\\s+<&\\s+(.+?)&>/);\r\n            const groundCommands = match ? match[1] : '';\r\n            \r\n            rootProfile.aliases[groundAliasName] = {\r\n                name: groundAliasName,\r\n                description: 'VFX - Disable Ground Visual Effects',\r\n                commands: groundCommands,\r\n                created: new Date().toISOString(),\r\n                lastModified: new Date().toISOString()\r\n            };\r\n            addedCount++;\r\n        }\r\n\r\n        // Save current state to root profile so it persists (commit the transaction)\r\n        vertigoManager.saveState(rootProfile);\r\n\r\n        // Save the root profile to storage\r\n        stoStorage.saveProfile(this.currentProfile, rootProfile);\r\n\r\n        // Save the changes - follow the same pattern as aliases.js\r\n        this.saveProfile();\r\n        this.setModified(true);\r\n\r\n        // Update the command library to show the new VFX aliases\r\n        if (typeof stoAliases !== 'undefined' && stoAliases.updateCommandLibrary) {\r\n            stoAliases.updateCommandLibrary();\r\n        }\r\n\r\n        // Update the stored initial state to the new saved state\r\n        this.vertigoInitialState = {\r\n            selectedEffects: {\r\n                space: new Set(vertigoManager.selectedEffects.space),\r\n                ground: new Set(vertigoManager.selectedEffects.ground)\r\n            },\r\n            showPlayerSay: vertigoManager.showPlayerSay\r\n        };\r\n\r\n        // Set flag to indicate we're saving (not canceling)\r\n        this.vertigoSaving = true;\r\n\r\n        // Close modal and show success message\r\n        modalManager.hide('vertigoModal');\r\n        stoUI.showToast(`Generated ${addedCount} Vertigo alias${addedCount > 1 ? 'es' : ''}! Check the Alias Manager to bind them to keys.`, 'success');\r\n    }\r\n\r\n    // Theme Management\r\n    applyTheme() {\r\n        const settings = stoStorage.getSettings();\r\n        const theme = settings.theme || 'default';\r\n        \r\n        if (theme === 'dark') {\r\n            document.documentElement.setAttribute('data-theme', 'dark');\r\n        } else {\r\n            document.documentElement.removeAttribute('data-theme');\r\n        }\r\n        \r\n        this.updateThemeToggleButton(theme);\r\n    }\r\n\r\n    toggleTheme() {\r\n        const settings = stoStorage.getSettings();\r\n        const currentTheme = settings.theme || 'default';\r\n        const newTheme = currentTheme === 'dark' ? 'default' : 'dark';\r\n        \r\n        settings.theme = newTheme;\r\n        stoStorage.saveSettings(settings);\r\n        \r\n        this.applyTheme();\r\n        \r\n        const themeName = newTheme === 'dark' ? 'Dark Mode' : 'Light Mode';\r\n        stoUI.showToast(`Switched to ${themeName}`, 'success');\r\n    }\r\n\r\n    updateThemeToggleButton(theme) {\r\n        const themeToggleBtn = document.getElementById('themeToggleBtn');\r\n        const themeToggleText = document.getElementById('themeToggleText');\r\n        const themeIcon = themeToggleBtn?.querySelector('i');\r\n        \r\n        if (themeToggleBtn && themeToggleText && themeIcon) {\r\n            if (theme === 'dark') {\r\n                themeIcon.className = 'fas fa-sun';\r\n                themeToggleText.textContent = 'Light Mode';\r\n            } else {\r\n                themeIcon.className = 'fas fa-moon';\r\n                themeToggleText.textContent = 'Dark Mode';\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Initialize application\r\n\r\n"],"names":["DISPLAY_VERSION","global","listeners","on","event","handler","Set","add","off","delete","emit","detail","err","console","error","eventBus","onDom","target","domEvent","busEvent","document","getElementById","addEventListener","domHandler","e","removeEventListener","window","this","STO_DATA","commands","targeting","name","icon","description","command","syntax","customizable","parameters","entityName","type","default","placeholder","target_enemy_near","target_friend_near","target_self","target_clear","target_teammate_1","target_teammate_2","target_teammate_3","target_teammate_4","combat","fire_all","environment","warning","fire_phasers","fire_torps","fire_mines","fire_phasers_torps","fire_projectiles","tray","custom_tray","min","max","slot","command_type","options","tray_with_backup","active","backup_tray","backup_slot","tray_range","start_tray","start_slot","end_tray","end_slot","tray_range_with_backup","backup_start_tray","backup_start_slot","backup_end_tray","backup_end_slot","whole_tray","whole_tray_with_backup","power","distribute_shields","reroute_shields_rear","reroute_shields_left","reroute_shields_right","reroute_shields_forward","movement","full_impulse","reverse","throttle_adjust","amount","step","throttle_set","position","throttle_toggle","turn_left","turn_right","pitch_up","pitch_down","strafe_left","strafe_right","forward","backward","auto_forward","follow","follow_cancel","camera","zoom_in","zoom_out","zoom_in_small","zoom_out_small","cam_distance","distance","cam_reset","cam_target_lock","cam_cycle_distance","cam_mouse_look","cam_turn_to_face","look_up","look_down","communication","team_message","message","local_message","zone_message","system","toggle_hud","screenshot","screenshot_jpg","autofire_toggle","bind_save_file","filename","bind_load_file","combat_log","state","missions","inventory","map","templates","space_combat","basic_attack","defensive_sequence","alpha_strike","healing_sequence","ground_combat","basic_ground_attack","defaultProfiles","default_space","currentEnvironment","builds","space","keys","Space","text","id","aliases","AttackCall","TargetReport","HealCall","ground","tactical_space","F1","common","key","letters","numbers","function","arrows","modifiers","symbols","mouse","gamepad","validation","keyNamePattern","aliasNamePattern","maxCommandsPerKey","maxKeysPerProfile","settings","version","autoSave","maxUndoSteps","defaultMode","variables","variable","example","usableIn","notes","COMMAND_CATEGORIES","COMMANDS","Object","entries","forEach","categoryKey","category","commandKey","KEY_LAYOUTS","keyLayouts","qwerty","rows","display","DEFAULT_SETTINGS","keyLayout","showTooltips","exportFormat","SAMPLE_PROFILES","values","profile","toLowerCase","replace","mode","keybinds","created","Date","toISOString","modified","SAMPLE_ALIASES","attack_sequence","heal_sequence","TRAY_CONFIG","maxTrays","slotsPerTray","defaultTray","maxCommandsPerSlot","getCommandsByCategory","STOError","Error","constructor","code","super","VertigoError","effectName","InvalidEnvironmentError","InvalidEffectError","VFX_EFFECTS","label","effect","appVersionElement","textContent","aboutVersionElement","stoStorage","storageKey","backupKey","settingsKey","init","migrateData","ensureStorageStructure","getAllData","data","localStorage","getItem","resetFlag","removeItem","getEmptyData","getDefaultData","parsed","JSON","parse","isValidDataStructure","saveAllData","createBackup","dataWithMeta","lastModified","lastBackup","setItem","stringify","getProfile","profileId","profiles","saveProfile","deleteProfile","currentProfile","remainingProfiles","length","getSettings","getDefaultSettings","saveSettings","currentData","backup","timestamp","restoreFromBackup","exportData","importData","jsonString","SyntaxError","includes","clearAllData","getStorageInfo","dataSize","backupSize","settingsSize","totalSize","available","getAvailableStorage","globalAliases","theme","confirmDeletes","compactView","required","prop","isValidProfile","env","build","log","testKey","testData","testSize","low","high","mid","Math","floor","repeat","loadDefaultData","defaultData","stoProfiles","currentModal","setupEventListeners","profileSelect","app","switchProfile","value","showNewProfileModal","showCloneProfileModal","showRenameProfileModal","confirmDeleteProfile","handleProfileSave","stopPropagation","toggleSettingsMenu","toggleKeybindsMenu","toggleAliasesMenu","importKeybinds","closeKeybindsMenu","exportKeybinds","importAliases","closeAliasesMenu","exportAliases","closeSettingsMenu","confirmResetApp","modalManager","show","toggleTheme","title","nameInput","descInput","getCurrentProfile","stoUI","showToast","trim","focus","find","p","createNewProfile","cloneCurrentProfile","renameCurrentProfile","hide","generateProfileId","renderProfiles","clonedProfile","oldName","setModified","confirm","deleteCurrentProfile","profileName","settingsBtn","dropdown","closest","classList","toggle","remove","keybindsBtn","aliasesBtn","input","accept","onchange","file","files","reader","FileReader","onload","stoKeybinds","importKeybindFile","result","readAsText","click","stoExport","exportSTOKeybindFile","createElement","content","importAliasFile","stoAliases","renderAliasList","resetApplication","selectedKey","renderKeyGrid","renderCommandChain","updateProfileInfo","getProfileAnalysis","analysis","keyCount","commandCount","aliasCount","commandTypes","keyTypes","number","letter","special","modifier","complexity","recommendations","test","generateRecommendations","push","priority","spaceCommands","hasSpaceCommands","some","cmd","sc","getProfileTemplates","basic_space","Tab","advanced_tactical","F2","AlphaStrike","createProfileFromTemplate","templateId","template","counter","generateCommandId","exportProfile","exported","blob","Blob","url","URL","createObjectURL","a","href","download","revokeObjectURL","importProfile","jsonData","existingData","imported","keybindPatterns","standard","bind","alias","comment","validKeys","generateValidKeys","i","toString","String","fromCharCode","baseKeys","Array","from","sort","parseKeybindFile","lines","split","comments","errors","line","index","trimmed","match","aliasName","quotedCommands","bracketCommands","commandString","optionalParam","parseCommandString","raw","cleanCommandString","generateMirroredCommandString","join","commandStrings","reversedWithoutLast","slice","detectAndUnmirrorCommands","isMirrored","originalCommands","filter","midIndex","firstHalf","secondHalf","expectedReverse","every","commandObj","stoCommands","detectCommandType","getCommandIcon","getCommandText","now","parseInt","actualProfile","success","buildKeys","keybindData","mirrorInfo","keybindMetadata","stabilizeExecutionOrder","aliasData","updateCommandLibrary","output","toLocaleString","compareKeys","shouldStabilize","b","aIsF","bIsF","aIsNum","bIsNum","aIsLetter","bIsLetter","localeCompare","specialOrder","aSpecial","indexOf","bSpecial","isValidKey","validKey","isValidAliasName","validateKeybind","valid","suggestKeys","filterLower","getCommonKeys","handleKeybindFileImport","generateKeybindId","random","substr","cloneKeybind","keybind","getProfileStats","stats","totalKeys","totalCommands","totalAliases","mostUsedCommands","currentAlias","showAliasManager","showEditAliasModal","saveAlias","updateAliasPreview","contains","preventDefault","textareaContainer","textarea","querySelector","insertTargetVariable","container","innerHTML","createAliasCard","querySelectorAll","card","dataset","editAlias","confirmDeleteAlias","useAlias","commandPreview","substring","commandsInput","disabled","deleteAlias","addCommand","validateAlias","action","preview","categories","existingAliasCategory","existingVertigoCategory","allAliases","regularAliases","startsWith","vertigoAliases","aliasCategory","createAliasCategoryElement","appendChild","vertigoCategory","categoryType","iconClass","element","className","isCollapsed","isVertigo","itemIcon","itemClass","toggleAliasCategory","addAliasToKey","header","chevron","style","transform","getAliasTemplates","AttackRun","DefensiveMode","HealSelf","GroundAttack","GroundHeal","TeamReady","NeedHealing","Incoming","createAliasFromTemplate","getAliasUsage","usage","context","targetVar","cursorPosition","selectionStart","newValue","setSelectionRange","dispatchEvent","Event","bubbles","exportFormats","sto_keybind","json_profile","json_project","csv_data","html_report","showExportOptions","copyCommandPreview","generateSTOKeybindFile","downloadFile","generateFileName","generateFileHeader","generateKeybindSection","generateFileFooter","toUpperCase","generateAliasSection","sortedKeys","keyGroups","groupKeysByType","groupName","groupKeys","globalStabilize","perKeyStabilize","envMeta","groups","exportJSONProfile","sanitizeProfileForExport","exportCompleteProject","exportCSVData","csvContent","generateCSVData","csv","row","escapeCSV","exportHTMLReport","htmlContent","generateHTMLReport","generateHTMLKeybindSection","generateHTMLAliasSection","html","copyToClipboard","extension","safeName","mimeType","body","removeChild","sanitized","exportAllProfiles","setTimeout","importFromFile","Promise","resolve","reject","pop","importJSONFile","onerror","generateAliasFile","generateAliasFileName","overlayId","getOverlay","modal","overlay","firstInput","toastQueue","dragState","isDragging","dragElement","dragData","setupGlobalEventListeners","setupTooltips","duration","toast","createToast","requestAnimationFrame","removeToast","iconMap","info","hideToast","parentNode","showModal","modalId","populateModalData","hideModal","clearModalData","hideAllModals","checked","showLoading","originalContent","hideLoading","confirmModal","createConfirmModal","confirmId","handleConfirm","danger","initDragAndDrop","dragSelector","dropZoneSelector","onDragStart","onDragEnd","onDrop","matches","dataTransfer","effectAllowed","dropZone","validateForm","formElement","fieldName","isValidEmail","isValid","email","navigator","clipboard","writeText","textArea","select","execCommand","fallbackErr","fadeIn","opacity","start","animate","progress","fadeOut","debounce","func","wait","timeout","args","clearTimeout","throttle","limit","inThrottle","arguments","apply","hasAttribute","getAttribute","showTooltip","hideTooltip","tooltip","rect","getBoundingClientRect","tooltipRect","left","width","top","height","innerWidth","bottom","currentCommand","commandBuilders","Map","setupCommandBuilders","set","commandId","params","getUI","createTargetingUI","createCombatUI","backupTray","backupSlot","startTray","startSlot","endTray","endSlot","commandType","generateTrayRangeCommands","undefined","backupStartTray","backupStartSlot","backupEndTray","backupEndSlot","generateTrayRangeWithBackupCommands","generateWholeTrayCommands","generateWholeTrayWithBackupCommands","createTrayUI","createPowerUI","createMovementUI","createCameraUI","createCommunicationUI","createSystemUI","alias_name","createAliasUI","createCustomUI","_","aliasEntries","handleCommandTypeChange","updateTrayVisual","updateCommandPreview","inputContainer","builder","saveBtn","has","ui","get","setupTypeSpecificListeners","trayCommandType","updateTrayConfigSections","inputId","powerSelect","showPowerWarning","combatSelect","showCombatWarning","aliasSelect","createBtn","sections","singleTrayConfig","backupConfig","rangeConfig","backupRangeConfig","commandTypeConfig","section","warningDiv","warningText","previewSection","buildCurrentCommand","isArray","typeSelect","parseFloat","visual","trayNum","slotNum","slotSelect","prefix","primarySlots","generateTraySlotList","backupSlots","primary","slots","getCurrentCommand","validateCommand","cmdString","dangerous","hasUnquotedPipeCharacter","inQuotes","quoteChar","char","backslashCount","j","getTemplateCommands","scenarioId","scenario","categoryId","cmdId","stoFileExplorer","treeId","contentId","openExplorer","node","selectNode","contentEl","buildTree","treeEl","profileNode","createNode","childrenContainer","spaceNode","groundNode","aliasNode","k","v","setAttribute","prevSel","profileid","exportContent","generateBuildExport","generateAliasExport","rootProfile","tempProfile","aggregatedAliases","vertigoManager","selectedEffects","showPlayerSay","generateAlias","effects","charAt","getSelectedEffects","toggleEffect","clearAllEffects","clear","selectAllEffects","getEffectCount","size","isEffectSelected","saveState","vertigoSettings","loadState","assign","VERTIGO_EFFECTS","currentMode","isModified","undoStack","redoStack","commandIdCounter","eventListeners","readyState","loadData","applyTheme","setupCommandLibrary","setupDragAndDrop","updateThemeToggleButton","isFirstTime","showWelcomeMessage","profileData","saveCurrentProfile","saveData","indicator","getCurrentBuild","currentBuild","createProfile","cloneProfile","sourceProfileId","newName","sourceProfile","base","selectKey","keyName","stabilizeCheckbox","flag","updateChainActions","addKey","isValidKeyName","deleteKey","deleteCommand","commandIndex","splice","moveCommand","fromIndex","toIndex","option","selected","btn","count","grid","allKeys","viewMode","renderCategorizedKeyView","renderKeyTypeView","renderSimpleKeyGrid","updateViewToggleButton","filterInput","filterKeys","keyElement","createKeyElement","categorizedKeys","categorizeKeys","aId","aData","bId","bData","categoryData","categoryElement","createKeyCategoryElement","keysWithCommands","unknown","keyCategories","detectedType","custom","createKeyElementHTML","toggleKeyCategory","isActive","keyLength","lengthClass","formatKeyName","detectKeyTypes","types","part","baseKey","categorizeKeysByType","alphanumeric","numberpad","navigation","other","keyType","getKeyPriority","priorityA","priorityB","isSelected","formattedKeyName","parts","longestPart","toggleBtn","toggleKeyView","newMode","emptyState","createCommandElement","draggable","commandDef","findCommandDefinition","isParameterized","displayName","displayIcon","warningInfo","getCommandWarning","warningIcon","parameterIndicator","cmdData","createCategoryElement","filterCommandLibrary","toggleCommandCategory","addCommandFromLibrary","showParameterModal","commandList","hasSelectedKey","btnId","switchMode","openProject","saveProject","showVertigoModal","showKeySelectionModal","confirmDeleteKey","duplicateKey","showTemplateModal","confirmClearChain","validateCurrentChain","storedProfile","filterCommands","showAllKeys","toggleLibrary","setupModalHandlers","setInterval","saveCommandFromModal","vertigoInitialState","vertigoSaving","virtualProfile","saveCurrentBuild","updatedProfile","updateModeButtons","spaceBtn","groundBtn","newKeyName","clonedCommands","errorMsg","item","visible","visibleKeys","categoryVisible","commandItems","visibleCommands","currentParameterCommand","createParameterModal","populateParameterModal","saveParameterCommand","button","cancelParameterCommand","paramName","paramDef","inputGroup","formatParameterName","targetButton","help","getParameterHelp","variableHelp","optionElement","updateParameterPreview","tagName","l","getParameterValues","buildParameterizedCommand","builders","trayParam","slotParam","activeParam","primaryTray","primarySlot","backupTrayParam","backupSlotParam","isEditing","existingCommand","editIndex","editCommand","editParameterizedCommand","trayCategory","s","trayRangeWithBackupDef","trayRangeDef","trayWithBackupDef","customTrayDef","populateParameterModalForEdit","existingParams","existingValue","catKey","shouldShow","setupKeySelectionModal","populateCommonKeys","findKeysBtn","onclick","showFullKeyList","searchInput","oninput","filterKeyList","commonKeysGrid","commonKeys","keyData","keyButton","selectKeyFromModal","fullKeysSection","populateKeyCategories","warn","headerElement","toggleKeySelectionCategory","contentElement","previousElementSibling","searchTerm","term","keyDesc","hasVisibleKeys","populateVertigoModal","setupVertigoEventListeners","spaceList","effectItem","createEffectItem","groundList","updateVertigoCheckboxes","playerSayCheckbox","updateVertigoEffectCounts","updateVertigoPreview","checkbox","replaceWith","cloneNode","generateVertigoAliases","spaceCount","groundCount","spaceCounter","groundCounter","spacePreview","groundPreview","spaceAlias","groundAlias","addedCount","spaceAliasName","groundAliasName","groundCommands","documentElement","removeAttribute","newTheme","themeName","themeToggleBtn","themeToggleText","themeIcon"],"mappings":"AAKO,MAGMA,EAAkB,yBCR/B,SAAWC,GACT,MAAMC,EAAY,CAAA,EAElB,SAASC,EAAGC,EAAOC,GACZH,EAAUE,KACbF,EAAUE,GAAS,IAAIE,KAEzBJ,EAAUE,GAAOG,IAAIF,EACzB,CAEE,SAASG,EAAIJ,EAAOC,GACdH,EAAUE,IACZF,EAAUE,GAAOK,OAAOJ,EAE9B,CAEE,SAASK,EAAKN,EAAOO,GACnB,GAAKT,EAAUE,GACf,IAAK,MAAMC,KAAWH,EAAUE,GAC9B,IACEC,EAAQM,EAChB,CAAQ,MAAOC,GACPC,QAAQC,MAAMF,EACtB,CAEA,CAwBEX,EAAOc,SAAW,CAAEZ,KAAIK,MAAKE,OAAMM,MAtBnC,SAAeC,EAAQC,EAAUC,EAAUd,GAIzC,GAHsB,iBAAXY,IACTA,EAASG,SAASC,eAAeJ,KAE9BA,IAAWA,EAAOK,iBAAkB,MAAO,OACxB,mBAAbH,IACTd,EAAUc,EACVA,EAAWD,GAERC,IAAUA,EAAWD,GAE1B,MAAMK,EAAcC,GAAMd,EAAKS,EAAUK,GAKzC,OAJAP,EAAOK,iBAAiBJ,EAAUK,GAE9BlB,GAASF,EAAGgB,EAAUd,GAEnB,KACLY,EAAOQ,oBAAoBP,EAAUK,GACjClB,GAASG,EAAIW,EAAUd,GAEjC,EAGC,CAlDD,CAkDqB,oBAAXqB,OAAyBA,YAASC,GC/C5C,MAAMC,EAAW,CAEbC,SAAU,CACNC,UAAW,CACPC,KAAM,YACNC,KAAM,oBACNC,YAAa,kCACbJ,SAAU,CACNZ,OAAQ,CACJc,KAAM,iBACNG,QAAS,SACTD,YAAa,0CACbE,OAAQ,sBACRH,KAAM,KACNI,cAAc,EACdC,WAAY,CACRC,WAAY,CAAEC,KAAM,OAAQC,QAAS,aAAcC,YAAa,uBAGxEC,kBAAmB,CACfX,KAAM,uBACNG,QAAS,oBACTD,YAAa,mCACbE,OAAQ,oBACRH,KAAM,MAEVW,mBAAoB,CAChBZ,KAAM,wBACNG,QAAS,qBACTD,YAAa,qCACbE,OAAQ,qBACRH,KAAM,MAEVY,YAAa,CACTb,KAAM,cACNG,QAAS,cACTD,YAAa,iCACbE,OAAQ,cACRH,KAAM,MAEVa,aAAc,CACVd,KAAM,eACNG,QAAS,eACTD,YAAa,6BACbE,OAAQ,eACRH,KAAM,KAEVc,kBAAmB,CACff,KAAM,oBACNG,QAAS,oBACTD,YAAa,2BACbE,OAAQ,oBACRH,KAAM,MAEVe,kBAAmB,CACfhB,KAAM,oBACNG,QAAS,oBACTD,YAAa,4BACbE,OAAQ,oBACRH,KAAM,MAEVgB,kBAAmB,CACfjB,KAAM,oBACNG,QAAS,oBACTD,YAAa,2BACbE,OAAQ,oBACRH,KAAM,MAEViB,kBAAmB,CACflB,KAAM,oBACNG,QAAS,oBACTD,YAAa,4BACbE,OAAQ,oBACRH,KAAM,QAKlBkB,OAAQ,CACJnB,KAAM,SACNC,KAAM,cACNC,YAAa,mCACbJ,SAAU,CACNsB,SAAU,CACNpB,KAAM,mBACNG,QAAS,UACTD,YAAa,mBACbE,OAAQ,UACRiB,YAAa,QACbpB,KAAM,KACNqB,QAAS,oEAEbC,aAAc,CACVvB,KAAM,sBACNG,QAAS,cACTD,YAAa,0BACbE,OAAQ,cACRiB,YAAa,QACbpB,KAAM,IACNqB,QAAS,oEAEbE,WAAY,CACRxB,KAAM,iBACNG,QAAS,YACTD,YAAa,oBACbE,OAAQ,YACRiB,YAAa,QACbpB,KAAM,KACNqB,QAAS,oEAEbG,WAAY,CACRzB,KAAM,aACNG,QAAS,YACTD,YAAa,iBACbE,OAAQ,YACRiB,YAAa,QACbpB,KAAM,KACNqB,QAAS,oEAEbI,mBAAoB,CAChB1B,KAAM,2BACNG,QAAS,mBACTD,YAAa,0BACbE,OAAQ,mBACRiB,YAAa,QACbpB,KAAM,KACNqB,QAAS,oEAEbK,iBAAkB,CACd3B,KAAM,mBACNG,QAAS,kBACTD,YAAa,wBACbE,OAAQ,kBACRiB,YAAa,QACbpB,KAAM,KACNqB,QAAS,sEAKrBM,KAAM,CACF5B,KAAM,iBACNC,KAAM,YACNC,YAAa,sCACbJ,SAAU,CACN+B,YAAa,CACT7B,KAAM,iBACNG,QAAS,yBACTD,YAAa,6BACbE,OAAQ,mCACRH,KAAM,IACNI,cAAc,EACdC,WAAY,CACRsB,KAAM,CAAEpB,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACjDuB,KAAM,CAAExB,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACjDwB,aAAc,CAAEzB,KAAM,SAAU0B,QAAS,CAAC,oBAAqB,kBAAmBzB,QAAS,uBAGnG0B,iBAAkB,CACdnC,KAAM,6BACNG,QAAS,qCACTD,YAAa,iDACbE,OAAQ,8EACRH,KAAM,IACNI,cAAc,EACdC,WAAY,CACR8B,OAAQ,CAAE5B,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACnDmB,KAAM,CAAEpB,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACjDuB,KAAM,CAAExB,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACjD4B,YAAa,CAAE7B,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACxD6B,YAAa,CAAE9B,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,KAGhE8B,WAAY,CACRvC,KAAM,uBACNG,QAAS,yBACTD,YAAa,gCACbE,OAAQ,kDACRH,KAAM,IACNI,cAAc,EACdC,WAAY,CACRkC,WAAY,CAAEhC,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACvDgC,WAAY,CAAEjC,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACvDiC,SAAU,CAAElC,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACrDkC,SAAU,CAAEnC,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACrDwB,aAAc,CAAEzB,KAAM,SAAU0B,QAAS,CAAC,oBAAqB,kBAAmBzB,QAAS,uBAGnGmC,uBAAwB,CACpB5C,KAAM,yBACNG,QAAS,qCACTD,YAAa,sDACbE,OAAQ,6FACRH,KAAM,IACNI,cAAc,EACdC,WAAY,CACR8B,OAAQ,CAAE5B,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACnD+B,WAAY,CAAEhC,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACvDgC,WAAY,CAAEjC,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACvDiC,SAAU,CAAElC,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACrDkC,SAAU,CAAEnC,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACrDoC,kBAAmB,CAAErC,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GAC9DqC,kBAAmB,CAAEtC,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GAC9DsC,gBAAiB,CAAEvC,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GAC5DuC,gBAAiB,CAAExC,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,KAGpEwC,WAAY,CACRjD,KAAM,uBACNG,QAAS,yBACTD,YAAa,8BACbE,OAAQ,sDACRH,KAAM,IACNI,cAAc,EACdC,WAAY,CACRsB,KAAM,CAAEpB,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACjDwB,aAAc,CAAEzB,KAAM,SAAU0B,QAAS,CAAC,oBAAqB,kBAAmBzB,QAAS,uBAGnGyC,uBAAwB,CACpBlD,KAAM,yBACNG,QAAS,qCACTD,YAAa,+CACbE,OAAQ,iGACRH,KAAM,IACNI,cAAc,EACdC,WAAY,CACR8B,OAAQ,CAAE5B,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACnDmB,KAAM,CAAEpB,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,GACjD4B,YAAa,CAAE7B,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,OAMxE0C,MAAO,CACHnD,KAAM,oBACNC,KAAM,oBACNC,YAAa,2CACbJ,SAAU,CACNsD,mBAAoB,CAChBpD,KAAM,qBACNG,QAAS,iCACTD,YAAa,uFACbE,OAAQ,iCACRiB,YAAa,QACbpB,KAAM,MACNqB,QAAS,oEAEb+B,qBAAsB,CAClBrD,KAAM,uBACNG,QAAS,mCACTD,YAAa,oCACbE,OAAQ,mCACRiB,YAAa,QACbpB,KAAM,OAEVqD,qBAAsB,CAClBtD,KAAM,uBACNG,QAAS,mCACTD,YAAa,kCACbE,OAAQ,mCACRiB,YAAa,QACbpB,KAAM,OAEVsD,sBAAuB,CACnBvD,KAAM,wBACNG,QAAS,oCACTD,YAAa,mCACbE,OAAQ,oCACRiB,YAAa,QACbpB,KAAM,OAEVuD,wBAAyB,CACrBxD,KAAM,0BACNG,QAAS,sCACTD,YAAa,uCACbE,OAAQ,sCACRiB,YAAa,QACbpB,KAAM,SAKlBwD,SAAU,CACNzD,KAAM,WACNC,KAAM,oBACNC,YAAa,+BACbJ,SAAU,CACN4D,aAAc,CACV1D,KAAM,eACNG,QAAS,eACTD,YAAa,4BACbE,OAAQ,eACRiB,YAAa,QACbpB,KAAM,MAEV0D,QAAS,CACL3D,KAAM,UACNG,QAAS,WACTD,YAAa,kBACbE,OAAQ,WACRH,KAAM,MAEV2D,gBAAiB,CACb5D,KAAM,kBACNG,QAAS,iBACTD,YAAa,8CACbE,OAAQ,0BACRH,KAAM,IACNI,cAAc,EACdC,WAAY,CACRuD,OAAQ,CAAErD,KAAM,SAAUsB,KAAK,EAAIC,IAAK,EAAGtB,QAAS,IAAMqD,KAAM,OAGxEC,aAAc,CACV/D,KAAM,eACNG,QAAS,cACTD,YAAa,yEACbE,OAAQ,yBACRH,KAAM,MACNI,cAAc,EACdC,WAAY,CACR0D,SAAU,CAAExD,KAAM,SAAUsB,KAAK,EAAIC,IAAK,EAAGtB,QAAS,EAAGqD,KAAM,MAGvEG,gBAAiB,CACbjE,KAAM,kBACNG,QAAS,iBACTD,YAAa,iDACbE,OAAQ,iBACRH,KAAM,MAEViE,UAAW,CACPlE,KAAM,YACNG,QAAS,YACTD,YAAa,yCACbE,OAAQ,YACRH,KAAM,MAEVkE,WAAY,CACRnE,KAAM,aACNG,QAAS,aACTD,YAAa,0CACbE,OAAQ,aACRH,KAAM,MAEVmE,SAAU,CACNpE,KAAM,WACNG,QAAS,MACTD,YAAa,6CACbE,OAAQ,MACRH,KAAM,MAEVoE,WAAY,CACRrE,KAAM,aACNG,QAAS,QACTD,YAAa,+CACbE,OAAQ,QACRH,KAAM,MAEVqE,YAAa,CACTtE,KAAM,cACNG,QAAS,QACTD,YAAa,mBACbE,OAAQ,QACRH,KAAM,MAEVsE,aAAc,CACVvE,KAAM,eACNG,QAAS,SACTD,YAAa,oBACbE,OAAQ,SACRH,KAAM,MAEVuE,QAAS,CACLxE,KAAM,UACNG,QAAS,WACTD,YAAa,eACbE,OAAQ,WACRH,KAAM,MAEVwE,SAAU,CACNzE,KAAM,WACNG,QAAS,YACTD,YAAa,gBACbE,OAAQ,YACRH,KAAM,MAEVyE,aAAc,CACV1E,KAAM,eACNG,QAAS,cACTD,YAAa,4DACbE,OAAQ,cACRiB,YAAa,SACbpB,KAAM,MAEV0E,OAAQ,CACJ3E,KAAM,gBACNG,QAAS,SACTD,YAAa,6BACbE,OAAQ,SACRH,KAAM,MAEV2E,cAAe,CACX5E,KAAM,gBACNG,QAAS,gBACTD,YAAa,6CACbE,OAAQ,gBACRH,KAAM,OAKlB4E,OAAQ,CACJ7E,KAAM,SACNC,KAAM,eACNC,YAAa,qCACbJ,SAAU,CACNgF,QAAS,CACL9E,KAAM,UACNG,QAAS,YACTD,YAAa,qBACbE,OAAQ,YACRH,KAAM,MAEV8E,SAAU,CACN/E,KAAM,WACNG,QAAS,aACTD,YAAa,sBACbE,OAAQ,aACRH,KAAM,MAEV+E,cAAe,CACXhF,KAAM,gBACNG,QAAS,iBACTD,YAAa,8BACbE,OAAQ,iBACRH,KAAM,MAEVgF,eAAgB,CACZjF,KAAM,iBACNG,QAAS,kBACTD,YAAa,+BACbE,OAAQ,kBACRH,KAAM,MAEViF,aAAc,CACVlF,KAAM,sBACNG,QAAS,UACTD,YAAa,2CACbE,OAAQ,qBACRH,KAAM,KACNI,cAAc,EACdC,WAAY,CACR6E,SAAU,CAAE3E,KAAM,SAAUsB,IAAK,EAAGC,IAAK,IAAKtB,QAAS,MAG/D2E,UAAW,CACPpF,KAAM,eACNG,QAAS,WACTD,YAAa,uCACbE,OAAQ,WACRH,KAAM,MAEVoF,gBAAiB,CACbrF,KAAM,wBACNG,QAAS,qBACTD,YAAa,0CACbE,OAAQ,qBACRH,KAAM,MAEVqF,mBAAoB,CAChBtF,KAAM,wBACNG,QAAS,eACTD,YAAa,0DACbE,OAAQ,eACRH,KAAM,MAEVsF,eAAgB,CACZvF,KAAM,aACNG,QAAS,gBACTD,YAAa,mCACbE,OAAQ,gBACRH,KAAM,OAEVuF,iBAAkB,CACdxF,KAAM,sBACNG,QAAS,iBACTD,YAAa,qCACbE,OAAQ,iBACRH,KAAM,MAEVwF,QAAS,CACLzF,KAAM,UACNG,QAAS,SACTD,YAAa,2CACbE,OAAQ,SACRH,KAAM,MAEVyF,UAAW,CACP1F,KAAM,YACNG,QAAS,WACTD,YAAa,6CACbE,OAAQ,WACRH,KAAM,QAKlB0F,cAAe,CACX3F,KAAM,gBACNC,KAAM,kBACNC,YAAa,8BACbJ,SAAU,CACN8F,aAAc,CACV5F,KAAM,eACNG,QAAS,OACTD,YAAa,uBACbE,OAAQ,eACRH,KAAM,KACNI,cAAc,EACdC,WAAY,CACRuF,QAAS,CAAErF,KAAM,OAAQC,QAAS,uBAG1CqF,cAAe,CACX9F,KAAM,gBACNG,QAAS,MACTD,YAAa,6BACbE,OAAQ,cACRH,KAAM,KACNI,cAAc,EACdC,WAAY,CACRuF,QAAS,CAAErF,KAAM,OAAQC,QAAS,uBAG1CsF,aAAc,CACV/F,KAAM,eACNG,QAAS,OACTD,YAAa,uBACbE,OAAQ,eACRH,KAAM,KACNI,cAAc,EACdC,WAAY,CACRuF,QAAS,CAAErF,KAAM,OAAQC,QAAS,yBAMlDuF,OAAQ,CACJhG,KAAM,SACNC,KAAM,aACNC,YAAa,yBACbJ,SAAU,CACNmG,WAAY,CACRjG,KAAM,aACNG,QAAS,gBACTD,YAAa,wBACbE,OAAQ,gBACRH,KAAM,OAEViG,WAAY,CACRlG,KAAM,aACNG,QAAS,aACTD,YAAa,oBACbE,OAAQ,aACRH,KAAM,MAEVkG,eAAgB,CACZnG,KAAM,iBACNG,QAAS,iBACTD,YAAa,2BACbE,OAAQ,iBACRH,KAAM,MAEVmG,gBAAiB,CACbpG,KAAM,kBACNG,QAAS,qBACTD,YAAa,yBACbE,OAAQ,qBACRH,KAAM,MAEVoG,eAAgB,CACZrG,KAAM,qBACNG,QAAS,iBACTD,YAAa,qCACbE,OAAQ,4BACRH,KAAM,KACNI,cAAc,EACdC,WAAY,CACRgG,SAAU,CAAE9F,KAAM,OAAQC,QAAS,kBAG3C8F,eAAgB,CACZvG,KAAM,uBACNG,QAAS,iBACTD,YAAa,mCACbE,OAAQ,4BACRH,KAAM,KACNI,cAAc,EACdC,WAAY,CACRgG,SAAU,CAAE9F,KAAM,OAAQC,QAAS,kBAG3C+F,WAAY,CACRxG,KAAM,oBACNG,QAAS,YACTD,YAAa,iDACbE,OAAQ,kBACRH,KAAM,KACNI,cAAc,EACdC,WAAY,CACRmG,MAAO,CAAEjG,KAAM,SAAUsB,IAAK,EAAGC,IAAK,EAAGtB,QAAS,KAG1DiG,SAAU,CACN1G,KAAM,qBACNG,QAAS,WACTD,YAAa,gCACbE,OAAQ,WACRH,KAAM,MAEV0G,UAAW,CACP3G,KAAM,sBACNG,QAAS,YACTD,YAAa,2BACbE,OAAQ,YACRH,KAAM,MAEV2G,IAAK,CACD5G,KAAM,gBACNG,QAAS,MACTD,YAAa,2BACbE,OAAQ,MACRH,KAAM,UAOtB4G,UAAW,CACPC,aAAc,CACVC,aAAc,CACV/G,KAAM,wBACNE,YAAa,oCACbJ,SAAU,CACN,oBACA,YAGRkH,mBAAoB,CAChBhH,KAAM,qBACNE,YAAa,+CACbJ,SAAU,CACN,cACA,mCAGRmH,aAAc,CACVjH,KAAM,eACNE,YAAa,qCACbJ,SAAU,CACN,oBACA,YAGRoH,iBAAkB,CACdlH,KAAM,oBACNE,YAAa,kCACbJ,SAAU,CACN,cACA,oCAIZqH,cAAe,CACXC,oBAAqB,CACjBpH,KAAM,sBACNE,YAAa,+CACbJ,SAAU,CACN,oBACA,6BAOhBuH,gBAAiB,CACbC,cAAe,CACXtH,KAAM,gBACNE,YAAa,mCACbqH,mBAAoB,QACpBC,OAAQ,CACJC,MAAO,CACHC,KAAM,CACFC,MAAO,CACH,CACIxH,QAAS,oBACTK,KAAM,YACNP,KAAM,KACN2H,KAAM,uBACNC,GAAI,SAER,CACI1H,QAAS,UACTK,KAAM,SACNP,KAAM,KACN2H,KAAM,mBACNC,GAAI,WAIhBC,QAAS,CACLC,WAAY,CACR7H,YAAa,iCACbJ,SAAU,0CAEdkI,aAAc,CACV9H,YAAa,gCACbJ,SAAU,kCAEdmI,SAAU,CACN/H,YAAa,6BACbJ,SAAU,qCAItBoI,OAAQ,CACJR,KAAM,CACFC,MAAO,CACH,CACIxH,QAAS,oBACTK,KAAM,YACNP,KAAM,KACN2H,KAAM,uBACNC,GAAI,UAER,CACI1H,QAAS,yBACTK,KAAM,OACNP,KAAM,IACN2H,KAAM,iBACNC,GAAI,YAIhBC,QAAS,CAAA,KAIrBK,eAAgB,CACZnI,KAAM,iBACNE,YAAa,qCACbqH,mBAAoB,QACpBC,OAAQ,CACJC,MAAO,CACHC,KAAM,CACFC,MAAO,CACH,CACIxH,QAAS,oBACTK,KAAM,YACNP,KAAM,KACN2H,KAAM,uBACNC,GAAI,SAER,CACI1H,QAAS,yBACTK,KAAM,OACNP,KAAM,IACN2H,KAAM,wBACNC,GAAI,SAER,CACI1H,QAAS,UACTK,KAAM,SACNP,KAAM,KACN2H,KAAM,mBACNC,GAAI,SAER,CACI1H,QAAS,iCACTK,KAAM,QACNP,KAAM,MACN2H,KAAM,qBACNC,GAAI,UAGZ,EAAK,CACD,CACI1H,QAAS,yBACTK,KAAM,OACNP,KAAM,IACN2H,KAAM,wBACNC,GAAI,UAGZO,GAAI,CACA,CACIjI,QAAS,cACTK,KAAM,YACNP,KAAM,KACN2H,KAAM,cACNC,GAAI,SAER,CACI1H,QAAS,yBACTK,KAAM,OACNP,KAAM,IACN2H,KAAM,wBACNC,GAAI,WAIhBC,QAAS,CAAA,GAEbI,OAAQ,CACJR,KAAM,CACFC,MAAO,CACH,CACIxH,QAAS,oBACTK,KAAM,YACNP,KAAM,KACN2H,KAAM,uBACNC,GAAI,UAER,CACI1H,QAAS,yBACTK,KAAM,OACNP,KAAM,IACN2H,KAAM,iBACNC,GAAI,WAGZ,EAAK,CACD,CACI1H,QAAS,yBACTK,KAAM,OACNP,KAAM,IACN2H,KAAM,mBACNC,GAAI,WAGZO,GAAI,CACA,CACIjI,QAAS,cACTK,KAAM,YACNP,KAAM,KACN2H,KAAM,cACNC,GAAI,UAER,CACI1H,QAAS,yBACTK,KAAM,OACNP,KAAM,KACN2H,KAAM,YACNC,GAAI,YAIhBC,QAAS,CAAA,MAOzBJ,KAAM,CACFW,OAAQ,CACJrI,KAAM,cACNE,YAAa,4BACbwH,KAAM,CACF,CAAEY,IAAK,QAASpI,YAAa,YAC7B,CAAEoI,IAAK,IAAKpI,YAAa,YACzB,CAAEoI,IAAK,IAAKpI,YAAa,YACzB,CAAEoI,IAAK,IAAKpI,YAAa,YACzB,CAAEoI,IAAK,IAAKpI,YAAa,YACzB,CAAEoI,IAAK,IAAKpI,YAAa,YACzB,CAAEoI,IAAK,KAAMpI,YAAa,kBAC1B,CAAEoI,IAAK,KAAMpI,YAAa,kBAC1B,CAAEoI,IAAK,KAAMpI,YAAa,kBAC1B,CAAEoI,IAAK,KAAMpI,YAAa,kBAC1B,CAAEoI,IAAK,MAAOpI,YAAa,OAC3B,CAAEoI,IAAK,QAASpI,YAAa,kBAC7B,CAAEoI,IAAK,QAASpI,YAAa,SAC7B,CAAEoI,IAAK,UAAWpI,YAAa,WAC/B,CAAEoI,IAAK,MAAOpI,YAAa,SAGnCqI,QAAS,CACLvI,KAAM,cACNE,YAAa,uBACbwH,KAAM,CACF,CAAEY,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,SACzB,CAAEoI,IAAK,IAAKpI,YAAa,WAGjCsI,QAAS,CACLxI,KAAM,cACNE,YAAa,wBACbwH,KAAM,CACF,CAAEY,IAAK,IAAKpI,YAAa,YACzB,CAAEoI,IAAK,IAAKpI,YAAa,YACzB,CAAEoI,IAAK,IAAKpI,YAAa,YACzB,CAAEoI,IAAK,IAAKpI,YAAa,YACzB,CAAEoI,IAAK,IAAKpI,YAAa,YACzB,CAAEoI,IAAK,UAAWpI,YAAa,sBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,sBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,sBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,sBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,sBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,sBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,sBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,sBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,sBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,sBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,4BAC/B,CAAEoI,IAAK,SAAUpI,YAAa,2BAC9B,CAAEoI,IAAK,WAAYpI,YAAa,gBAChC,CAAEoI,IAAK,WAAYpI,YAAa,gBAChC,CAAEoI,IAAK,MAAOpI,YAAa,WAC3B,CAAEoI,IAAK,cAAepI,YAAa,4BAG3CuI,SAAU,CACNzI,KAAM,gBACNE,YAAa,uBACbwH,KAAM,CACF,CAAEY,IAAK,KAAMpI,YAAa,kBAC1B,CAAEoI,IAAK,KAAMpI,YAAa,kBAC1B,CAAEoI,IAAK,KAAMpI,YAAa,kBAC1B,CAAEoI,IAAK,KAAMpI,YAAa,kBAC1B,CAAEoI,IAAK,KAAMpI,YAAa,kBAC1B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,mBAC3B,CAAEoI,IAAK,MAAOpI,YAAa,qBAGnCwI,OAAQ,CACJ1I,KAAM,qBACNE,YAAa,4BACbwH,KAAM,CACF,CAAEY,IAAK,KAAMpI,YAAa,iBAC1B,CAAEoI,IAAK,OAAQpI,YAAa,mBAC5B,CAAEoI,IAAK,OAAQpI,YAAa,mBAC5B,CAAEoI,IAAK,QAASpI,YAAa,oBAC7B,CAAEoI,IAAK,OAAQpI,YAAa,QAC5B,CAAEoI,IAAK,MAAOpI,YAAa,OAC3B,CAAEoI,IAAK,SAAUpI,YAAa,WAC9B,CAAEoI,IAAK,WAAYpI,YAAa,aAChC,CAAEoI,IAAK,SAAUpI,YAAa,UAC9B,CAAEoI,IAAK,SAAUpI,YAAa,YAGtCyI,UAAW,CACP3I,KAAM,gBACNE,YAAa,8BACbwH,KAAM,CACF,CAAEY,IAAK,OAAQpI,YAAa,cAC5B,CAAEoI,IAAK,OAAQpI,YAAa,eAC5B,CAAEoI,IAAK,QAASpI,YAAa,kBAC7B,CAAEoI,IAAK,QAASpI,YAAa,qBAGrC0I,QAAS,CACL5I,KAAM,cACNE,YAAa,0BACbwH,KAAM,CACF,CAAEY,IAAK,IAAKpI,YAAa,KACzB,CAAEoI,IAAK,IAAKpI,YAAa,KACzB,CAAEoI,IAAK,KAAMpI,YAAa,MAC1B,CAAEoI,IAAK,IAAKpI,YAAa,aACzB,CAAEoI,IAAK,IAAKpI,YAAa,cACzB,CAAEoI,IAAK,IAAKpI,YAAa,cACzB,CAAEoI,IAAK,IAAKpI,YAAa,mBAGjC2I,MAAO,CACH7I,KAAM,iBACNE,YAAa,2BACbwH,KAAM,CACF,CAAEY,IAAK,UAAWpI,YAAa,oBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,qBAC/B,CAAEoI,IAAK,cAAepI,YAAa,sBACnC,CAAEoI,IAAK,UAAWpI,YAAa,kBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,kBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,kBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,kBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,kBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,kBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,kBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,kBAC/B,CAAEoI,IAAK,UAAWpI,YAAa,kBAC/B,CAAEoI,IAAK,WAAYpI,YAAa,mBAChC,CAAEoI,IAAK,YAAapI,YAAa,mBACjC,CAAEoI,IAAK,aAAcpI,YAAa,uBAG1C4I,QAAS,CACL9I,KAAM,kBACNE,YAAa,wBACbwH,KAAM,CACF,CAAEY,IAAK,OAAQpI,YAAa,sBAC5B,CAAEoI,IAAK,OAAQpI,YAAa,qBAC5B,CAAEoI,IAAK,OAAQpI,YAAa,gCAC5B,CAAEoI,IAAK,OAAQpI,YAAa,gCAC5B,CAAEoI,IAAK,OAAQpI,YAAa,4BAC5B,CAAEoI,IAAK,OAAQpI,YAAa,6BAC5B,CAAEoI,IAAK,OAAQpI,YAAa,6BAC5B,CAAEoI,IAAK,OAAQpI,YAAa,8BAC5B,CAAEoI,IAAK,OAAQpI,YAAa,yBAC5B,CAAEoI,IAAK,QAASpI,YAAa,yBAC7B,CAAEoI,IAAK,QAASpI,YAAa,yBAC7B,CAAEoI,IAAK,QAASpI,YAAa,yBAC7B,CAAEoI,IAAK,YAAapI,YAAa,uBACjC,CAAEoI,IAAK,cAAepI,YAAa,yBACnC,CAAEoI,IAAK,cAAepI,YAAa,yBACnC,CAAEoI,IAAK,eAAgBpI,YAAa,0BACpC,CAAEoI,IAAK,YAAapI,YAAa,8BACjC,CAAEoI,IAAK,cAAepI,YAAa,gCACnC,CAAEoI,IAAK,cAAepI,YAAa,gCACnC,CAAEoI,IAAK,eAAgBpI,YAAa,iCACpC,CAAEoI,IAAK,YAAapI,YAAa,+BACjC,CAAEoI,IAAK,cAAepI,YAAa,iCACnC,CAAEoI,IAAK,cAAepI,YAAa,iCACnC,CAAEoI,IAAK,eAAgBpI,YAAa,qCAMhD6I,WAAY,CACRC,eAAgB,uBAChBC,iBAAkB,2BAClBC,kBAAmB,GACnBC,kBAAmB,KAIvBC,SAAU,CACNC,QAAS,QACTC,UAAU,EACVC,aAAc,GACdC,YAAa,SAIjBC,UAAW,CACPvK,OAAQ,CACJwK,SAAU,UACVxJ,YAAa,gDACWyJ,QAAS,wBACjCC,SAAU,CAAC,gBAAiB,SAAU,WACtCC,MAAO,yFAMnBlK,OAAOE,SAAWA,EAGlBF,OAAOmK,mBAAqBjK,EAASC,SAGrCH,OAAOoK,SAAW,CAAA,EAClBC,OAAOC,QAAQpK,EAASC,UAAUoK,QAAQ,EAAEC,EAAaC,MACrDJ,OAAOC,QAAQG,EAAStK,UAAUoK,QAAQ,EAAEG,EAAYlK,MACpDR,OAAOoK,SAASM,GAAc,IACvBlK,EACHiK,SAAUD,EACV7B,IAAK+B,OAMjB1K,OAAO2K,YAAczK,EAAS0K,YAAc,CACxCC,OAAQ,CACJxK,KAAM,SACNyK,KAAM,CACF,CACI,CAAEnC,IAAK,SAAUoC,QAAS,OAC1B,CAAEpC,IAAK,KAAMoC,QAAS,MACtB,CAAEpC,IAAK,KAAMoC,QAAS,MACtB,CAAEpC,IAAK,KAAMoC,QAAS,MACtB,CAAEpC,IAAK,KAAMoC,QAAS,MACtB,CAAEpC,IAAK,KAAMoC,QAAS,MACtB,CAAEpC,IAAK,KAAMoC,QAAS,MACtB,CAAEpC,IAAK,KAAMoC,QAAS,MACtB,CAAEpC,IAAK,KAAMoC,QAAS,MACtB,CAAEpC,IAAK,KAAMoC,QAAS,MACtB,CAAEpC,IAAK,MAAOoC,QAAS,OACvB,CAAEpC,IAAK,MAAOoC,QAAS,OACvB,CAAEpC,IAAK,MAAOoC,QAAS,QAE3B,CACI,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,YAAaoC,QAAS,cAEjC,CACI,CAAEpC,IAAK,MAAOoC,QAAS,OACvB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,KAAMoC,QAAS,OAE1B,CACI,CAAEpC,IAAK,WAAYoC,QAAS,QAC5B,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,QAASoC,QAAS,UAE7B,CACI,CAAEpC,IAAK,QAASoC,QAAS,SACzB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,IAAKoC,QAAS,KACrB,CAAEpC,IAAK,QAASoC,QAAS,UAE7B,CACI,CAAEpC,IAAK,OAAQoC,QAAS,QACxB,CAAEpC,IAAK,MAAOoC,QAAS,OACvB,CAAEpC,IAAK,QAASoC,QAAS,SACzB,CAAEpC,IAAK,MAAOoC,QAAS,OACvB,CAAEpC,IAAK,OAAQoC,QAAS,YAOxC/K,OAAOgL,iBAAmB,CACtBC,UAAW,SACXtB,SAAUzJ,EAASuJ,UAAUE,WAAY,EACzCuB,cAAc,EACdC,aAAc,MACdvB,aAAc1J,EAASuJ,UAAUG,cAAgB,GACjDC,YAAa3J,EAASuJ,UAAUI,aAAe,SAInD7J,OAAOoL,gBAAkBf,OAAOgB,OAAOnL,EAASwH,iBAAiBT,IAAIqE,IAAO,CACxEpD,GAAIoD,EAAQjL,KAAKkL,cAAcC,QAAQ,OAAQ,KAC/CnL,KAAMiL,EAAQjL,KACdE,YAAa+K,EAAQ/K,YACrBqH,mBAAoB0D,EAAQ1D,oBAAsB,QAClDC,OAAQyD,EAAQzD,QAAU,CACtBC,MAAO,CAAEC,KAAM,IACfQ,OAAQ,CAAER,KAAM,CAAA,IAGpB0D,KAAMH,EAAQ1D,oBAAsB,QACpC8D,SAAUJ,EAAQzD,QAAQC,OAAOC,MAAQ,CAAA,EACzCI,QAASmD,EAAQzD,QAAQC,OAAOK,SAAW,CAAA,EAC3CwD,SAAS,IAAIC,MAAOC,cACpBC,UAAU,IAAIF,MAAOC,iBAIzB7L,OAAO+L,eAAiB,CACpBC,gBAAiB,CACb3L,KAAM,kBACNF,SAAU,CAAC,oBAAqB,WAChCI,YAAa,mCAEjB8G,mBAAoB,CAChBhH,KAAM,qBACNF,SAAU,CAAC,cAAe,kCAC1BI,YAAa,gDAEjB0L,cAAe,CACX5L,KAAM,mBACNF,SAAU,CAAC,cAAe,oDAC1BI,YAAa,0CAKrBP,OAAOkM,YAAc,CACjBC,SAAU,GACVC,aAAc,GACdC,YAAa,EACbC,mBAAoB,GAIxBtM,OAAOuM,sBAAwB,SAAS9B,GACpC,OAAKA,GAAavK,EAASC,SAASsK,GAG7BJ,OAAOgB,OAAOnL,EAASC,SAASsK,GAAUtK,UAFtC,EAGf,ECnvCA,MAAMqM,UAAiBC,MACnB,WAAAC,CAAYxG,EAASyG,EAAO,aACxBC,MAAM1G,GACNjG,KAAKI,KAAO,WACZJ,KAAK0M,KAAOA,CACpB,EAGA,MAAME,UAAqBL,EACvB,WAAAE,CAAYxG,EAASyG,EAAO,aACxBC,MAAM1G,EAASyG,GACf1M,KAAKI,KAAO,cACpB,QAGA,cAAsCwM,EAClC,WAAAH,CAAYhL,GACRkL,MAAM,wBAAwBlL,4CAAuD,uBACrFzB,KAAKyB,YAAcA,CAC3B,KAGA,cAAiCmL,EAC7B,WAAAH,CAAYI,EAAYpL,GACpBkL,MAAM,mBAAmBE,uBAAgCpL,KAAgB,kBACzEzB,KAAK6M,WAAaA,EAClB7M,KAAKyB,YAAcA,CAC3B,GAKsB,oBAAX1B,SACPA,OAAOwM,SAAWA,EAClBxM,OAAO6M,aAAeA,EACtB7M,OAAO+M,wBAA0BA,EACjC/M,OAAOgN,mBAAqBA,GCnCzB,MAAMC,EAAc,CACvBnF,MAAO,CACH,CAAEoF,MAAO,2CAA4CC,OAAQ,qDAC7D,CAAED,MAAO,oBAAqBC,OAAQ,uCACtC,CAAED,MAAO,uBAAwBC,OAAQ,kCACzC,CAAED,MAAO,sBAAuBC,OAAQ,iCACxC,CAAED,MAAO,uBAAwBC,OAAQ,kCACzC,CAAED,MAAO,uBAAwBC,OAAQ,kCACzC,CAAED,MAAO,oBAAqBC,OAAQ,qCACtC,CAAED,MAAO,eAAgBC,OAAQ,sGACjC,CAAED,MAAO,mBAAoBC,OAAQ,yDACrC,CAAED,MAAO,uBAAwBC,OAAQ,wCACzC,CAAED,MAAO,2BAA4BC,OAAQ,wFAC7C,CAAED,MAAO,iCAAkCC,OAAQ,8BACnD,CAAED,MAAO,wBAAyBC,OAAQ,+FAC1C,CAAED,MAAO,yBAA0BC,OAAQ,wEAC3C,CAAED,MAAO,0BAA2BC,OAAQ,kDAC5C,CAAED,MAAO,sBAAuBC,OAAQ,kDACxC,CAAED,MAAO,eAAgBC,OAAQ,sCACjC,CAAED,MAAO,+BAAgCC,OAAQ,wDACjD,CAAED,MAAO,uCAAwCC,OAAQ,+GACzD,CAAED,MAAO,8BAA+BC,OAAQ,4HAChD,CAAED,MAAO,2BAA4BC,OAAQ,qCAC7C,CAAED,MAAO,uBAAwBC,OAAQ,qCACzC,CAAED,MAAO,wBAAyBC,OAAQ,gDAC1C,CAAED,MAAO,mBAAoBC,OAAQ,0CACrC,CAAED,MAAO,qBAAsBC,OAAQ,wCACvC,CAAED,MAAO,eAAgBC,OAAQ,wCACjC,CAAED,MAAO,mBAAoBC,OAAQ,yBACrC,CAAED,MAAO,qBAAsBC,OAAQ,kCACvC,CAAED,MAAO,kBAAmBC,OAAQ,mCACpC,CAAED,MAAO,kBAAmBC,OAAQ,0CACpC,CAAED,MAAO,8BAA+BC,OAAQ,mGAChD,CAAED,MAAO,6BAA8BC,OAAQ,wDAC/C,CAAED,MAAO,sBAAuBC,OAAQ,wDACxC,CAAED,MAAO,gCAAiCC,OAAQ,mEAClD,CAAED,MAAO,kCAAmCC,OAAQ,kGACpD,CAAED,MAAO,gCAAiCC,OAAQ,wCAClD,CAAED,MAAO,kCAAmCC,OAAQ,0CACpD,CAAED,MAAO,8BAA+BC,OAAQ,sCAChD,CAAED,MAAO,mCAAoCC,OAAQ,0CACrD,CAAED,MAAO,kCAAmCC,OAAQ,2CACpD,CAAED,MAAO,mCAAoCC,OAAQ,2CACrD,CAAED,MAAO,qBAAsBC,OAAQ,wBACvC,CAAED,MAAO,gCAAiCC,OAAQ,gEAClD,CAAED,MAAO,6BAA8BC,OAAQ,uDAC/C,CAAED,MAAO,2BAA4BC,OAAQ,2IAC7C,CAAED,MAAO,yCAA0CC,OAAQ,2BAC3D,CAAED,MAAO,+BAAgCC,OAAQ,yDACjD,CAAED,MAAO,2BAA4BC,OAAQ,qDAC7C,CAAED,MAAO,0BAA2BC,OAAQ,oDAC5C,CAAED,MAAO,0CAA2CC,OAAQ,oIAC5D,CAAED,MAAO,mBAAoBC,OAAQ,yBACrC,CAAED,MAAO,yCAA0CC,OAAQ,wCAC3D,CAAED,MAAO,mBAAoBC,OAAQ,6DACrC,CAAED,MAAO,qBAAsBC,OAAQ,2CACvC,CAAED,MAAO,mBAAoBC,OAAQ,mCACrC,CAAED,MAAO,wBAAyBC,OAAQ,2CAC1C,CAAED,MAAO,oCAAqCC,OAAQ,0FACtD,CAAED,MAAO,iCAAkCC,OAAQ,8BACnD,CAAED,MAAO,wBAAyBC,OAAQ,mCAC1C,CAAED,MAAO,2BAA4BC,OAAQ,2EAC7C,CAAED,MAAO,wBAAyBC,OAAQ,mCAC1C,CAAED,MAAO,iBAAkBC,OAAQ,wFACnC,CAAED,MAAO,0BAA2BC,OAAQ,qEAC5C,CAAED,MAAO,qBAAsBC,OAAQ,qCACvC,CAAED,MAAO,sCAAuCC,OAAQ,wEACxD,CAAED,MAAO,wBAAyBC,OAAQ,8EAC1C,CAAED,MAAO,eAAgBC,OAAQ,oDACjC,CAAED,MAAO,qBAAsBC,OAAQ,wCACvC,CAAED,MAAO,0BAA2BC,OAAQ,2CAC5C,CAAED,MAAO,mBAAoBC,OAAQ,2EACrC,CAAED,MAAO,eAAgBC,OAAQ,sCACjC,CAAED,MAAO,oBAAqBC,OAAQ,4CACtC,CAAED,MAAO,0CAA2CC,OAAQ,+JAC5D,CAAED,MAAO,0BAA2BC,OAAQ,gDAC5C,CAAED,MAAO,kCAAmCC,OAAQ,sDACpD,CAAED,MAAO,sBAAuBC,OAAQ,oCACxC,CAAED,MAAO,mBAAoBC,OAAQ,uCACrC,CAAED,MAAO,qBAAsBC,OAAQ,6CACvC,CAAED,MAAO,sBAAuBC,OAAQ,6BACxC,CAAED,MAAO,gBAAiBC,OAAQ,uCAClC,CAAED,MAAO,0BAA2BC,OAAQ,4CAC5C,CAAED,MAAO,kBAAmBC,OAAQ,4CACpC,CAAED,MAAO,wBAAyBC,OAAQ,yFAC1C,CAAED,MAAO,iCAAkCC,OAAQ,uJACnD,CAAED,MAAO,kDAAmDC,OAAQ,4FACpE,CAAED,MAAO,sBAAuBC,OAAQ,sCACxC,CAAED,MAAO,qCAAsCC,OAAQ,iDACvD,CAAED,MAAO,iCAAkCC,OAAQ,2DAEvD5E,OAAQ,CACJ,CAAE2E,MAAO,wBAAyBC,OAAQ,kDAC1C,CAAED,MAAO,mBAAoBC,OAAQ,mEACrC,CAAED,MAAO,iBAAkBC,OAAQ,kDACnC,CAAED,MAAO,cAAeC,OAAQ,4BAChC,CAAED,MAAO,6BAA8BC,OAAQ,6BAC/C,CAAED,MAAO,0BAA2BC,OAAQ,6BAC5C,CAAED,MAAO,4BAA6BC,OAAQ,4CAC9C,CAAED,MAAO,mCAAoCC,OAAQ,6CACrD,CAAED,MAAO,gBAAiBC,OAAQ,8EAClC,CAAED,MAAO,yCAA0CC,OAAQ,8EAC3D,CAAED,MAAO,aAAcC,OAAQ,oGAC/B,CAAED,MAAO,gCAAiCC,OAAQ,sCAClD,CAAED,MAAO,kCAAmCC,OAAQ,wCACpD,CAAED,MAAO,8BAA+BC,OAAQ,oCAChD,CAAED,MAAO,mCAAoCC,OAAQ,wCACrD,CAAED,MAAO,kCAAmCC,OAAQ,yCACpD,CAAED,MAAO,mCAAoCC,OAAQ,yCACrD,CAAED,MAAO,8BAA+BC,OAAQ,mEAChD,CAAED,MAAO,sBAAuBC,OAAQ,wCACxC,CAAED,MAAO,oCAAqCC,OAAQ,+CACtD,CAAED,MAAO,YAAaC,OAAQ,8BAC9B,CAAED,MAAO,6BAA8BC,OAAQ,+CAC/C,CAAED,MAAO,uCAAwCC,OAAQ,yCACzD,CAAED,MAAO,gBAAiBC,OAAQ,2DAClC,CAAED,MAAO,gBAAiBC,OAAQ,+DAClC,CAAED,MAAO,0BAA2BC,OAAQ,wDAC5C,CAAED,MAAO,uCAAwCC,OAAQ,iCACzD,CAAED,MAAO,kCAAmCC,OAAQ,qDACpD,CAAED,MAAO,kCAAmCC,OAAQ,sEACpD,CAAED,MAAO,+BAAgCC,OAAQ,kEACjD,CAAED,MAAO,qBAAsBC,OAAQ,kDACvC,CAAED,MAAO,yBAA0BC,OAAQ,mCC3HnDzN,SAASE,iBAAiB,mBAAoB,KAE1C,MAAMwN,EAAoB1N,SAASC,eAAe,cAC9CyN,IACAA,EAAkBC,YAAc/O,GAIpC,MAAMgP,EAAsB5N,SAASC,eAAe,gBAChD2N,IACAA,EAAoBD,YAAc/O,KCE1C,MAAMiP,EAAa,ICdJ,MACX,WAAAb,GACIzM,KAAKuN,WAAa,sBAClBvN,KAAKwN,UAAY,6BACjBxN,KAAKyN,YAAc,uBACnBzN,KAAKyJ,QAAU,QAEfzJ,KAAK0N,MACb,CAEI,IAAAA,GAEI1N,KAAK2N,cAGL3N,KAAK4N,wBACb,CAGI,UAAAC,GACI,IACI,MAAMC,EAAOC,aAAaC,QAAQhO,KAAKuN,YACjCU,EAAYF,aAAaC,QAAQ,iBAEvC,IAAKF,EAED,OAAIG,GACAF,aAAaG,WAAW,iBACjBlO,KAAKmO,gBAETnO,KAAKoO,iBAGhB,MAAMC,EAASC,KAAKC,MAAMT,GAG1B,OAAK9N,KAAKwO,qBAAqBH,GAIxBA,EAHIrO,KAAKoO,gBAI5B,CAAU,MAAOjP,GAEL,OADAD,QAAQC,MAAM,mCAAoCA,GAC3Ca,KAAKoO,gBACxB,CACA,CAGI,WAAAK,CAAYX,GACR,IAEI9N,KAAK0O,eAGL,MAAMC,EAAe,IACdb,EACHrE,QAASzJ,KAAKyJ,QACdmF,cAAc,IAAIjD,MAAOC,cACzBiD,YAAY,IAAIlD,MAAOC,eAI3B,OADAmC,aAAae,QAAQ9O,KAAKuN,WAAYe,KAAKS,UAAUJ,KAC9C,CACnB,CAAU,MAAOxP,GAEL,OADAD,QAAQC,MAAM,gCAAiCA,IACxC,CACnB,CACA,CAGI,UAAA6P,CAAWC,GAEP,OADajP,KAAK6N,aACNqB,SAASD,IAAc,IAC3C,CAGI,WAAAE,CAAYF,EAAW5D,GACnB,MAAMyC,EAAO9N,KAAK6N,aAKlB,OAJAC,EAAKoB,SAASD,GAAa,IACpB5D,EACHuD,cAAc,IAAIjD,MAAOC,eAEtB5L,KAAKyO,YAAYX,EAChC,CAGI,aAAAsB,CAAcH,GACV,MAAMnB,EAAO9N,KAAK6N,aAClB,GAAIC,EAAKoB,SAASD,GAAY,CAI1B,UAHOnB,EAAKoB,SAASD,GAGjBnB,EAAKuB,iBAAmBJ,EAAW,CACnC,MAAMK,EAAoBlF,OAAOtC,KAAKgG,EAAKoB,UAC3CpB,EAAKuB,eAAiBC,EAAkBC,OAAS,EAAID,EAAkB,GAAK,IAC5F,CAEY,OAAOtP,KAAKyO,YAAYX,EACpC,CACQ,OAAO,CACf,CAGI,WAAA0B,GACI,IACI,MAAMhG,EAAWuE,aAAaC,QAAQhO,KAAKyN,aAC3C,OAAOjE,EAAW8E,KAAKC,MAAM/E,GAAYxJ,KAAKyP,oBAC1D,CAAU,MAAOtQ,GAEL,OADAD,QAAQC,MAAM,0BAA2BA,GAClCa,KAAKyP,oBACxB,CACA,CAGI,YAAAC,CAAalG,GACT,IAEI,OADAuE,aAAae,QAAQ9O,KAAKyN,YAAaa,KAAKS,UAAUvF,KAC/C,CACnB,CAAU,MAAOrK,GAEL,OADAD,QAAQC,MAAM,yBAA0BA,IACjC,CACnB,CACA,CAGI,YAAAuP,GACI,IACI,MAAMiB,EAAc5B,aAAaC,QAAQhO,KAAKuN,YAC9C,GAAIoC,EAAa,CACb,MAAMC,EAAS,CACX9B,KAAM6B,EACNE,WAAW,IAAIlE,MAAOC,cACtBnC,QAASzJ,KAAKyJ,SAElBsE,aAAae,QAAQ9O,KAAKwN,UAAWc,KAAKS,UAAUa,GACpE,CACA,CAAU,MAAOzQ,GACLD,QAAQC,MAAM,yBAA0BA,EACpD,CACA,CAGI,iBAAA2Q,GACI,IACI,MAAMF,EAAS7B,aAAaC,QAAQhO,KAAKwN,WACzC,GAAIoC,EAAQ,CACR,MAAMvB,EAASC,KAAKC,MAAMqB,GAE1B,OADA7B,aAAae,QAAQ9O,KAAKuN,WAAYc,EAAOP,OACtC,CACvB,CACA,CAAU,MAAO3O,GACLD,QAAQC,MAAM,+BAAgCA,EAC1D,CACQ,OAAO,CACf,CAGI,UAAA4Q,GACI,MAAMjC,EAAO9N,KAAK6N,aAClB,OAAOS,KAAKS,UAAUjB,EAAM,KAAM,EAC1C,CAGI,UAAAkC,CAAWC,GACP,IACI,MAAMnC,EAAOQ,KAAKC,MAAM0B,GAExB,QAAKjQ,KAAKwO,qBAAqBV,IAKxB9N,KAAKyO,YAAYX,EACpC,CAAU,MAAO3O,GAKL,OAHMA,aAAiB+Q,aAAeD,EAAWE,SAAS,YACtDjR,QAAQC,MAAM,wBAAyBA,IAEpC,CACnB,CACA,CAGI,YAAAiR,GACI,IAQI,OAPArC,aAAaG,WAAWlO,KAAKuN,YAC7BQ,aAAaG,WAAWlO,KAAKwN,WAC7BO,aAAaG,WAAWlO,KAAKyN,aAG7BM,aAAae,QAAQ,gBAAiB,SAE/B,CACnB,CAAU,MAAO3P,GAEL,OADAD,QAAQC,MAAM,uBAAwBA,IAC/B,CACnB,CACA,CAGI,cAAAkR,GACI,IACI,MAAMC,EAAWvC,aAAaC,QAAQhO,KAAKuN,aAAagC,QAAU,EAC5DgB,EAAaxC,aAAaC,QAAQhO,KAAKwN,YAAY+B,QAAU,EAC7DiB,EAAezC,aAAaC,QAAQhO,KAAKyN,cAAc8B,QAAU,EAEvE,MAAO,CACHkB,UAAWH,EAAWC,EAAaC,EACnCF,WACAC,aACAC,eACAE,UAAW1Q,KAAK2Q,sBAEhC,CAAU,MAAOxR,GAEL,OADAD,QAAQC,MAAM,8BAA+BA,GACtC,IACnB,CACA,CAII,cAAAiP,GACI,MAAO,CACH3E,QAASzJ,KAAKyJ,QACdiC,SAAS,IAAIC,MAAOC,cACpBgD,cAAc,IAAIjD,MAAOC,cACzByD,eAAgB,gBAChBH,SAAU,CACNxH,cAAe,IAAKzH,SAASwH,gBAAgBC,eAC7Ca,eAAgB,IAAKtI,SAASwH,gBAAgBc,iBAElDqI,cAAe,CAAA,EACfpH,SAAUxJ,KAAKyP,qBAE3B,CAEI,YAAAtB,GACI,MAAO,CACH1E,QAASzJ,KAAKyJ,QACdiC,SAAS,IAAIC,MAAOC,cACpBgD,cAAc,IAAIjD,MAAOC,cACzByD,eAAgB,KAChBH,SAAU,CAAA,EACV0B,cAAe,CAAA,EACfpH,SAAUxJ,KAAKyP,qBAE3B,CAEI,kBAAAA,GACI,MAAO,CACHoB,MAAO,UACPnH,UAAU,EACVuB,cAAc,EACd6F,gBAAgB,EAChBnH,aAAc,GACdC,YAAa,QACbmH,aAAa,EAEzB,CAEI,oBAAAvC,CAAqBV,GACjB,IAAKA,GAAwB,iBAATA,EAAmB,OAAO,EAG9C,MAAMkD,EAAW,CAAC,WAAY,kBAC9B,IAAK,MAAMC,KAAQD,EACf,KAAMC,KAAQnD,GAAO,OAAO,EAIhC,GAA6B,iBAAlBA,EAAKoB,SAAuB,OAAO,EAG9C,IAAK,MAAOD,EAAW5D,KAAYjB,OAAOC,QAAQyD,EAAKoB,UACnD,IAAKlP,KAAKkR,eAAe7F,GAErB,OAAO,EAIf,OAAO,CACf,CAEI,cAAA6F,CAAe7F,GACX,IAAKA,GAA8B,iBAAZA,EAAsB,OAAO,EAGpD,GAAIA,EAAQzD,OAAQ,CAChB,IAAKyD,EAAQjL,MAAkC,iBAAnBiL,EAAQzD,OAAqB,OAAO,EAGhE,MAAMA,EAASyD,EAAQzD,OACvB,IAAKA,EAAOC,QAAUD,EAAOU,OAAQ,OAAO,EAG5C,IAAK,MAAO6I,EAAKC,KAAUhH,OAAOC,QAAQzC,GACtC,GAAY,UAARuJ,GAA2B,WAARA,EAAkB,CACrC,IAAKC,GAA0B,iBAAVA,EAAoB,OAAO,EAChD,IAAKA,EAAMtJ,MAA8B,iBAAfsJ,EAAMtJ,KAAmB,OAAO,CAC9E,CAGY,OAAO,CACnB,CAGQ,MAAMkJ,EAAW,CAAC,OAAQ,OAAQ,QAClC,IAAK,MAAMC,KAAQD,EACf,KAAMC,KAAQ5F,GAAU,OAAO,EAGnC,MAA4B,iBAAjBA,EAAQvD,IAG3B,CAEI,sBAAA8F,GACI,MAAME,EAAO9N,KAAK6N,aAGbC,EAAK8C,gBAAe9C,EAAK8C,cAAgB,CAAA,GACzC9C,EAAKtE,WAAUsE,EAAKtE,SAAWxJ,KAAKyP,sBAGC,IAAtCrF,OAAOtC,KAAKgG,EAAKoB,UAAUK,QAAwC,OAAxBzB,EAAKuB,iBAChDvB,EAAKoB,SAAW,CACZxH,cAAe,IAAKzH,SAASwH,gBAAgBC,gBAEjDoG,EAAKuB,eAAiB,iBAItBjF,OAAOtC,KAAKgG,EAAKoB,UAAUK,OAAS,IAAMzB,EAAKoB,SAASpB,EAAKuB,kBAC7DvB,EAAKuB,eAAiBjF,OAAOtC,KAAKgG,EAAKoB,UAAU,IAGrDlP,KAAKyO,YAAYX,EACzB,CAEI,WAAAH,GAEI,MAAMG,EAAO9N,KAAK6N,aAEdC,EAAKrE,UAAYzJ,KAAKyJ,UACtBvK,QAAQmS,IAAI,uBAAuBvD,EAAKrE,cAAczJ,KAAKyJ,WAI3DqE,EAAKrE,QAAUzJ,KAAKyJ,QACpBzJ,KAAKyO,YAAYX,GAE7B,CAEI,mBAAA6C,GACI,IAEI,IAAIW,EAAU,eACVC,EAAW,IACXC,EAAW,EAGXC,EAAM,EACNC,EAAO,SAEX,KAAOD,GAAOC,GAAM,CAChB,IAAIC,EAAMC,KAAKC,OAAOJ,EAAMC,GAAQ,GACpCH,EAAW,IAAIO,OAAOH,GAEtB,IACI5D,aAAae,QAAQwC,EAASC,GAC9BxD,aAAaG,WAAWoD,GACxBE,EAAWG,EACXF,EAAME,EAAM,CAChC,CAAkB,MAAO9R,GACL6R,EAAOC,EAAM,CACjC,CACA,CAEY,OAAOH,CACnB,CAAU,MAAOrS,GACL,OAAO,CACnB,CACA,CAGI,eAAA4S,GACI,MAAMC,EAAchS,KAAKoO,iBACzB,OAAOpO,KAAKyO,YAAYuD,EAChC,GDrXMC,EAAc,IEfL,MACX,WAAAxF,GACIzM,KAAKkS,aAAe,IAE5B,CAEI,IAAAxE,GACI1N,KAAKmS,qBACb,CAEI,mBAAAA,GAEI,MAAMC,EAAgB3S,SAASC,eAAe,iBAC1C0S,GACAA,EAAczS,iBAAiB,SAAWE,IACtCwS,IAAIC,cAAczS,EAAEP,OAAOiT,SAKnCnT,SAASC,MAAM,gBAAiB,QAAS,cAAe,KACpDW,KAAKwS,wBAGTpT,SAASC,MAAM,kBAAmB,QAAS,gBAAiB,KACxDW,KAAKyS,0BAGTrT,SAASC,MAAM,mBAAoB,QAAS,iBAAkB,KAC1DW,KAAK0S,2BAGTtT,SAASC,MAAM,mBAAoB,QAAS,iBAAkB,KAC1DW,KAAK2S,yBAITvT,SAASC,MAAM,iBAAkB,QAAS,eAAgB,KACtDW,KAAK4S,sBAITxT,SAASC,MAAM,cAAe,QAAS,gBAAkBQ,IACrDA,EAAEgT,kBACF7S,KAAK8S,uBAIT1T,SAASC,MAAM,cAAe,QAAS,gBAAkBQ,IACrDA,EAAEgT,kBACF7S,KAAK+S,uBAIT3T,SAASC,MAAM,aAAc,QAAS,eAAiBQ,IACnDA,EAAEgT,kBACF7S,KAAKgT,sBAGT5T,SAASC,MAAM,oBAAqB,QAAS,kBAAmB,KAC5DW,KAAKiT,iBACLjT,KAAKkT,sBAGT9T,SAASC,MAAM,oBAAqB,QAAS,kBAAmB,KAC5DW,KAAKmT,iBACLnT,KAAKkT,sBAGT9T,SAASC,MAAM,mBAAoB,QAAS,iBAAkB,KAC1DW,KAAKoT,gBACLpT,KAAKqT,qBAGTjU,SAASC,MAAM,mBAAoB,QAAS,iBAAkB,KAC1DW,KAAKsT,gBACLtT,KAAKqT,qBAGTjU,SAASC,MAAM,qBAAsB,QAAS,oBAAqB,KAC/DW,KAAK+R,kBACL/R,KAAKuT,sBAGTnU,SAASC,MAAM,cAAe,QAAS,YAAa,KAChDW,KAAKwT,kBACLxT,KAAKuT,sBAGTnU,SAASC,MAAM,WAAY,QAAS,aAAc,KAC9CoU,aAAaC,KAAK,gBAGtBtU,SAASC,MAAM,iBAAkB,QAAS,eAAgB,KACtDgT,IAAIsB,cACJ3T,KAAKuT,sBAIT9T,SAASE,iBAAiB,QAAS,KAC/BK,KAAKuT,oBACLvT,KAAKkT,oBACLlT,KAAKqT,oBAEjB,CAGI,mBAAAb,GACkB/S,SAASC,eAAe,gBACtC,MAAMkU,EAAQnU,SAASC,eAAe,qBAChCmU,EAAYpU,SAASC,eAAe,eACpCoU,EAAYrU,SAASC,eAAe,sBAEtCkU,IAAOA,EAAMxG,YAAc,eAC3ByG,IACAA,EAAUtB,MAAQ,GAClBsB,EAAU/S,YAAc,sBAExBgT,IACAA,EAAUvB,MAAQ,IAGtBvS,KAAKkS,aAAe,MACpBuB,aAAaC,KAAK,eAC1B,CAEI,qBAAAjB,GACI,MAAMpD,EAAiBgD,IAAI0B,oBAC3B,IAAK1E,EAED,YADA2E,MAAMC,UAAU,+BAAgC,WAItCxU,SAASC,eAAe,gBACtC,MAAMkU,EAAQnU,SAASC,eAAe,qBAChCmU,EAAYpU,SAASC,eAAe,eACpCoU,EAAYrU,SAASC,eAAe,sBAEtCkU,IAAOA,EAAMxG,YAAc,iBAC3ByG,IACAA,EAAUtB,MAAQ,GAAGlD,EAAejP,YACpCyT,EAAU/S,YAAc,0BAExBgT,IACAA,EAAUvB,MAAQ,WAAWlD,EAAejP,QAGhDJ,KAAKkS,aAAe,QACpBuB,aAAaC,KAAK,eAC1B,CAEI,sBAAAhB,GACI,MAAMrD,EAAiBgD,IAAI0B,oBAC3B,IAAK1E,EAED,YADA2E,MAAMC,UAAU,gCAAiC,WAIvCxU,SAASC,eAAe,gBACtC,MAAMkU,EAAQnU,SAASC,eAAe,qBAChCmU,EAAYpU,SAASC,eAAe,eACpCoU,EAAYrU,SAASC,eAAe,sBAEtCkU,IAAOA,EAAMxG,YAAc,kBAC3ByG,IACAA,EAAUtB,MAAQlD,EAAejP,KACjCyT,EAAU/S,YAAc,sBAExBgT,IACAA,EAAUvB,MAAQlD,EAAe/O,aAAe,IAGpDN,KAAKkS,aAAe,SACpBuB,aAAaC,KAAK,eAC1B,CAEI,iBAAAd,GACI,MAAMiB,EAAYpU,SAASC,eAAe,eACpCoU,EAAYrU,SAASC,eAAe,sBAE1C,IAAKmU,EAAW,OAEhB,MAAMzT,EAAOyT,EAAUtB,MAAM2B,OACvB5T,EAAcwT,GAAWvB,MAAM2B,QAAU,GAE/C,IAAK9T,EAGD,OAFA4T,MAAMC,UAAU,2BAA4B,cAC5CJ,EAAUM,QAId,GAAI/T,EAAKmP,OAAS,GAGd,OAFAyE,MAAMC,UAAU,+CAAgD,cAChEJ,EAAUM,QAKd,MAAMrG,EAAOR,WAAWO,aAMxB,GALwBzD,OAAOgB,OAAO0C,EAAKoB,UAAUkF,KAAKC,GACtDA,EAAEjU,KAAKkL,gBAAkBlL,EAAKkL,gBACP,WAAtBtL,KAAKkS,cAA6BmC,EAAEjU,OAASiS,IAAI0B,qBAAqB3T,OAMvE,OAFA4T,MAAMC,UAAU,0CAA2C,cAC3DJ,EAAUM,QAId,IACI,OAAQnU,KAAKkS,cACT,IAAK,MACDlS,KAAKsU,iBAAiBlU,EAAME,GAC5B,MACJ,IAAK,QACDN,KAAKuU,oBAAoBnU,EAAME,GAC/B,MACJ,IAAK,SACDN,KAAKwU,qBAAqBpU,EAAME,GAIxCmT,aAAagB,KAAK,gBAClBzU,KAAKkS,aAAe,IAChC,CAAU,MAAO/S,GACL6U,MAAMC,UAAU,2BAA6B9U,EAAM8G,QAAS,QACxE,CACA,CAEI,gBAAAqO,CAAiBlU,EAAME,GACnB,MAAM2O,EAAYoD,IAAIqC,kBAAkBtU,GAClCiL,EAAU,CACZjL,OACAE,cACAkL,KAAM,QACN1D,KAAM,CAAA,EACNI,QAAS,CAAA,EACTwD,SAAS,IAAIC,MAAOC,cACpBgD,cAAc,IAAIjD,MAAOC,eAG7B,IAAI0B,WAAW6B,YAAYF,EAAW5D,GAKlC,MAAM,IAAImB,MAAM,0BAJhB6F,IAAIC,cAAcrD,GAClBoD,IAAIsC,iBACJX,MAAMC,UAAU,YAAY7T,aAAiB,UAIzD,CAEI,mBAAAmU,CAAoBnU,EAAME,GACtB,MAAM+O,EAAiBgD,IAAI0B,oBAC3B,IAAK1E,EACD,MAAM,IAAI7C,MAAM,uBAGpB,MAAMyC,EAAYoD,IAAIqC,kBAAkBtU,GAClCwU,EAAgB,IACftG,KAAKC,MAAMD,KAAKS,UAAUM,IAC7BjP,OACAE,cACAoL,SAAS,IAAIC,MAAOC,cACpBgD,cAAc,IAAIjD,MAAOC,eAG7B,IAAI0B,WAAW6B,YAAYF,EAAW2F,GAKlC,MAAM,IAAIpI,MAAM,iCAJhB6F,IAAIC,cAAcrD,GAClBoD,IAAIsC,iBACJX,MAAMC,UAAU,YAAY7T,oBAAuBiP,EAAejP,QAAS,UAIvF,CAEI,oBAAAoU,CAAqBpU,EAAME,GACvB,MAAM+O,EAAiBgD,IAAI0B,oBAC3B,IAAK1E,EACD,MAAM,IAAI7C,MAAM,wBAGpB,MAAMqI,EAAUxF,EAAejP,KAK/B,GAJAiP,EAAejP,KAAOA,EACtBiP,EAAe/O,YAAcA,EAC7B+O,EAAeT,cAAe,IAAIjD,MAAOC,eAErC0B,WAAW6B,YAAYkD,IAAIhD,eAAgBA,GAK3C,MAAM,IAAI7C,MAAM,kCAJhB6F,IAAIsC,iBACJtC,IAAIyC,aAAY,GAChBd,MAAMC,UAAU,yBAAyBY,UAAgBzU,KAAS,UAI9E,CAEI,0BAAMuS,GACF,MAAMtD,EAAiBgD,IAAI0B,oBAC3B,IAAK1E,EAED,YADA2E,MAAMC,UAAU,gCAAiC,WAIrD,MAAMnG,EAAOR,WAAWO,aAGxB,GAFqBzD,OAAOtC,KAAKgG,EAAKoB,UAAUK,QAE5B,EAEhB,YADAyE,MAAMC,UAAU,iCAAkC,iBAI9BD,MAAMe,QAC1B,gDAAgD1F,EAAejP,0CAC/D,iBACA,WAIAJ,KAAKgV,sBAEjB,CAEI,oBAAAA,GACI,MAAM3F,EAAiBgD,IAAI0B,oBAC3B,IAAK1E,EAAgB,OAErB,MAAM4F,EAAc5F,EAAejP,KAE/BiS,IAAIjD,cAAciD,IAAIhD,gBACtB2E,MAAMC,UAAU,YAAYgB,aAAwB,WAEpDjB,MAAMC,UAAU,2BAA4B,QAExD,CAGI,kBAAAnB,GACI,MAAMoC,EAAczV,SAASC,eAAe,eAC5C,GAAIwV,EAAa,CACb,MAAMC,EAAWD,EAAYE,QAAQ,aACrCD,GACAA,EAASE,UAAUC,OAAO,SAEtC,CACA,CAEI,iBAAA/B,GACI,MAAM2B,EAAczV,SAASC,eAAe,eAC5C,GAAIwV,EAAa,CACb,MAAMC,EAAWD,EAAYE,QAAQ,aACrCD,GACAA,EAASE,UAAUE,OAAO,SAEtC,CACA,CAGI,kBAAAxC,GAEI/S,KAAKuT,oBACLvT,KAAKqT,mBAEL,MAAMmC,EAAc/V,SAASC,eAAe,eAC5C,GAAI8V,EAAa,CACb,MAAML,EAAWK,EAAYJ,QAAQ,aACjCD,GACAA,EAASE,UAAUC,OAAO,SAE1C,CACA,CAEI,iBAAApC,GACI,MAAMsC,EAAc/V,SAASC,eAAe,eAC5C,GAAI8V,EAAa,CACb,MAAML,EAAWK,EAAYJ,QAAQ,aACjCD,GACAA,EAASE,UAAUE,OAAO,SAE1C,CACA,CAGI,iBAAAvC,GAEIhT,KAAKuT,oBACLvT,KAAKkT,oBAEL,MAAMuC,EAAahW,SAASC,eAAe,cAC3C,GAAI+V,EAAY,CACZ,MAAMN,EAAWM,EAAWL,QAAQ,aAChCD,GACAA,EAASE,UAAUC,OAAO,SAE1C,CACA,CAEI,gBAAAjC,GACI,MAAMoC,EAAahW,SAASC,eAAe,cAC3C,GAAI+V,EAAY,CACZ,MAAMN,EAAWM,EAAWL,QAAQ,aAChCD,GACAA,EAASE,UAAUE,OAAO,SAE1C,CACA,CAGI,cAAAtC,GACI,MAAMyC,EAAQjW,SAASC,eAAe,aAClCgW,IACAA,EAAMC,OAAS,OACfD,EAAME,SAAY/V,IACd,MAAMgW,EAAOhW,EAAEP,OAAOwW,MAAM,GAC5B,GAAID,EAAM,CACN,MAAME,EAAS,IAAIC,WACnBD,EAAOE,OAAUpW,IACb,IACIqW,YAAYC,kBAAkBtW,EAAEP,OAAO8W,OACnE,CAA0B,MAAOjX,GACL6U,MAAMC,UAAU,kCAAoC9U,EAAM8G,QAAS,QAC/F,GAEoB8P,EAAOM,WAAWR,EACtC,CAEgBhW,EAAEP,OAAOiT,MAAQ,IAErBmD,EAAMY,QAElB,CAEI,cAAAnD,GACI,MAAM9H,EAAUgH,IAAI0B,oBACf1I,EAKAA,EAAQvD,MAA6C,IAArCsC,OAAOtC,KAAKuD,EAAQvD,MAAMyH,OAK/CgH,UAAUC,qBAAqBnL,GAJ3B2I,MAAMC,UAAU,wBAAyB,WALzCD,MAAMC,UAAU,gCAAiC,UAU7D,CAEI,aAAAb,GACI,MAAMsC,EAAQjW,SAASgX,cAAc,SACrCf,EAAM9U,KAAO,OACb8U,EAAMC,OAAS,OACfD,EAAME,SAAY/V,IACd,MAAMgW,EAAOhW,EAAEP,OAAOwW,MAAM,GAC5B,GAAID,EAAM,CACN,MAAME,EAAS,IAAIC,WACnBD,EAAOE,OAAUpW,IACb,IACI,MAAM6W,EAAU7W,EAAEP,OAAO8W,OACzBF,YAAYS,gBAAgBD,GAGxB3W,OAAO6W,YAA2D,mBAAtC7W,OAAO6W,WAAWC,iBAC9C9W,OAAO6W,WAAWC,iBAE9C,CAAsB,MAAO1X,GACL6U,MAAMC,UAAU,6BAA+B9U,EAAM8G,QAAS,QACtF,GAEgB8P,EAAOM,WAAWR,EAClC,GAEQH,EAAMY,OACd,CAEI,aAAAhD,GACI,MAAMjI,EAAUgH,IAAI0B,oBACf1I,EAKAA,EAAQnD,SAAmD,IAAxCkC,OAAOtC,KAAKuD,EAAQnD,SAASqH,OAKrDgH,UAAUjD,cAAcjI,GAJpB2I,MAAMC,UAAU,uBAAwB,WALxCD,MAAMC,UAAU,gCAAiC,UAU7D,CAEI,qBAAMT,SACsBQ,MAAMe,QAC1B,0IACA,oBACA,WAIA/U,KAAK8W,kBAEjB,CAEI,gBAAAA,GACI,IAEIxJ,WAAW8C,eAGXiC,IAAIhD,eAAiB,KACrBgD,IAAI0E,YAAc,KAClB1E,IAAIyC,aAAY,GAGhBzC,IAAIsC,iBACJtC,IAAI2E,gBACJ3E,IAAI4E,qBACJ5E,IAAI6E,oBAEJlD,MAAMC,UAAU,oDAAqD,UACjF,CAAU,MAAO9U,GACL6U,MAAMC,UAAU,gCAAkC9U,EAAM8G,QAAS,QAC7E,CACA,CAGI,eAAA8L,GACI,IACI,GAAIzE,WAAWyE,kBAAmB,CAE9B,MAAMjE,EAAOR,WAAWO,aACxBwE,IAAIhD,eAAiBvB,EAAKuB,eAC1BgD,IAAI0E,YAAc,KAClB1E,IAAIyC,aAAY,GAGhBzC,IAAIsC,iBACJtC,IAAI2E,gBACJ3E,IAAI4E,qBACJ5E,IAAI6E,oBAEJlD,MAAMC,UAAU,wCAAyC,UACzE,MACgBD,MAAMC,UAAU,8BAA+B,QAE/D,CAAU,MAAO9U,GACL6U,MAAMC,UAAU,gCAAkC9U,EAAM8G,QAAS,QAC7E,CACA,CAGI,kBAAAkR,CAAmB9L,GACf,MAAM+L,EAAW,CACbC,SAAUjN,OAAOtC,KAAKuD,EAAQvD,MAAMyH,OACpC+H,aAAc,EACdC,WAAYnN,OAAOtC,KAAKuD,EAAQnD,SAAW,CAAA,GAAIqH,OAC/CiI,aAAc,CAAA,EACdC,SAAU,CACN5O,SAAU,EACV6O,OAAQ,EACRC,OAAQ,EACRC,QAAS,EACTC,SAAU,GAEdC,WAAY,SACZC,gBAAiB,IAoCrB,OAhCA3N,OAAOC,QAAQgB,EAAQvD,MAAMwC,QAAQ,EAAE5B,EAAKxI,MACxCkX,EAASE,cAAgBpX,EAASqP,OAG9B,SAASyI,KAAKtP,GACd0O,EAASK,SAAS5O,WACX,QAAQmP,KAAKtP,GACpB0O,EAASK,SAASC,SACX,UAAUM,KAAKtP,GACtB0O,EAASK,SAASE,SACXjP,EAAIyH,SAAS,KACpBiH,EAASK,SAASI,WAElBT,EAASK,SAASG,UAItB1X,EAASoK,QAAQ/J,IACb6W,EAASI,aAAajX,EAAQK,OAASwW,EAASI,aAAajX,EAAQK,OAAS,GAAK,MAKvFwW,EAASE,aAAe,GACxBF,EAASU,WAAa,UACfV,EAASE,aAAe,KAC/BF,EAASU,WAAa,YAI1B9X,KAAKiY,wBAAwBb,EAAU/L,GAEhC+L,CACf,CAEI,uBAAAa,CAAwBb,EAAU/L,GAC9B,MAAM0M,EAAkB,GAGnBX,EAASI,aAAarX,WAAciX,EAASI,aAAajW,QAC3DwW,EAAgBG,KAAK,CACjBtX,KAAM,QACNgT,MAAO,4BACPtT,YAAa,gFACb6X,SAAU,SAKbf,EAASI,aAAajU,OACvBwU,EAAgBG,KAAK,CACjBtX,KAAM,YACNgT,MAAO,0BACPtT,YAAa,8EACb6X,SAAU,WAKdf,EAASK,SAASI,SAAW,GAAKT,EAASC,SAAW,IACtDU,EAAgBG,KAAK,CACjBtX,KAAM,aACNgT,MAAO,oBACPtT,YAAa,2FACb6X,SAAU,QAKU,IAAxBf,EAASG,YAAoBH,EAASE,aAAe,IACrDS,EAAgBG,KAAK,CACjBtX,KAAM,eACNgT,MAAO,yBACPtT,YAAa,wEACb6X,SAAU,WAKlB,MAAMC,EAAgB,CAAC,UAAW,uBAAwB,gBACpDC,EAAmBjO,OAAOgB,OAAOC,EAAQvD,MAAMwQ,KAAKpY,GACtDA,EAASoY,KAAKC,GAAOH,EAAcE,KAAKE,GAAMD,EAAIhY,QAAQ4P,SAASqI,MAGlD,WAAjBnN,EAAQG,MAAqB6M,GAC7BN,EAAgBG,KAAK,CACjBtX,KAAM,OACNgT,MAAO,qBACPtT,YAAa,yEACb6X,SAAU,WAIlBf,EAASW,gBAAkBA,CACnC,CAGI,mBAAAU,GACI,MAAO,CACHC,YAAa,CACTtY,KAAM,qBACNE,YAAa,kDACbkL,KAAM,QACN1D,KAAM,CACFC,MAAS,CACL,CAAExH,QAAS,uBAAwBK,KAAM,YAAaP,KAAM,KAAM2H,KAAM,wBACxE,CAAEzH,QAAS,UAAWK,KAAM,SAAUP,KAAM,KAAM2H,KAAM,qBAE5D2Q,IAAO,CACH,CAAEpY,QAAS,wBAAyBK,KAAM,YAAaP,KAAM,KAAM2H,KAAM,0BAE7EQ,GAAM,CACF,CAAEjI,QAAS,cAAeK,KAAM,YAAaP,KAAM,KAAM2H,KAAM,eAC/D,CAAEzH,QAAS,iCAAkCK,KAAM,QAASP,KAAM,MAAO2H,KAAM,wBAGvFE,QAAS,CAAA,GAGb0Q,kBAAmB,CACfxY,KAAM,oBACNE,YAAa,wCACbkL,KAAM,QACN1D,KAAM,CACFC,MAAS,CACL,CAAExH,QAAS,uBAAwBK,KAAM,YAAaP,KAAM,KAAM2H,KAAM,wBACxE,CAAEzH,QAAS,yBAA0BK,KAAM,OAAQP,KAAM,IAAK2H,KAAM,yBACpE,CAAEzH,QAAS,UAAWK,KAAM,SAAUP,KAAM,KAAM2H,KAAM,qBAE5D,EAAK,CACD,CAAEzH,QAAS,yBAA0BK,KAAM,OAAQP,KAAM,IAAK2H,KAAM,0BAExE,EAAK,CACD,CAAEzH,QAAS,yBAA0BK,KAAM,OAAQP,KAAM,IAAK2H,KAAM,0BAExEQ,GAAM,CACF,CAAEjI,QAAS,cAAeK,KAAM,YAAaP,KAAM,KAAM2H,KAAM,gBAEnE6Q,GAAM,CACF,CAAEtY,QAAS,cAAeK,KAAM,YAAaP,KAAM,KAAM2H,KAAM,iBAGvEE,QAAS,CACL4Q,YAAe,CACX1Y,KAAM,cACNF,SAAU,2EACVI,YAAa,gCAKzBiH,cAAe,CACXnH,KAAM,gBACNE,YAAa,uCACbkL,KAAM,SACN1D,KAAM,CACFC,MAAS,CACL,CAAExH,QAAS,uBAAwBK,KAAM,YAAaP,KAAM,KAAM2H,KAAM,wBACxE,CAAEzH,QAAS,yBAA0BK,KAAM,OAAQP,KAAM,IAAK2H,KAAM,mBAExE,EAAK,CACD,CAAEzH,QAAS,yBAA0BK,KAAM,OAAQP,KAAM,IAAK2H,KAAM,qBAExE,EAAK,CACD,CAAEzH,QAAS,yBAA0BK,KAAM,OAAQP,KAAM,IAAK2H,KAAM,kBAExEQ,GAAM,CACF,CAAEjI,QAAS,cAAeK,KAAM,YAAaP,KAAM,KAAM2H,KAAM,eAC/D,CAAEzH,QAAS,yBAA0BK,KAAM,OAAQP,KAAM,KAAM2H,KAAM,eAG7EE,QAAS,CAAA,GAGzB,CAEI,yBAAA6Q,CAA0BC,GACtB,MACMC,EADYjZ,KAAKyY,sBACIO,GAE3B,IAAKC,EAED,YADAjF,MAAMC,UAAU,qBAAsB,SAK1C,IAAIgB,EAAcgE,EAAS7Y,KACvB8Y,EAAU,EACd,MAAMpL,EAAOR,WAAWO,aAExB,KAAOzD,OAAOgB,OAAO0C,EAAKoB,UAAUoJ,KAAKjE,GAAKA,EAAEjU,OAAS6U,IACrDA,EAAc,GAAGgE,EAAS7Y,QAAQ8Y,IAClCA,IAIJ,MAAMjK,EAAYoD,IAAIqC,kBAAkBO,GAClC5J,EAAU,IACT4N,EACH7Y,KAAM6U,EACNvJ,SAAS,IAAIC,MAAOC,cACpBgD,cAAc,IAAIjD,MAAOC,eAI7BxB,OAAOgB,OAAOC,EAAQvD,MAAMwC,QAAQpK,IAChCA,EAASoK,QAAQ/J,IACbA,EAAQ0H,GAAKoK,IAAI8G,wBAIrB7L,WAAW6B,YAAYF,EAAW5D,IAClCgH,IAAIC,cAAcrD,GAClBoD,IAAIsC,iBACJX,MAAMC,UAAU,YAAYgB,2BAAsC,YAElEjB,MAAMC,UAAU,yCAA0C,QAEtE,CAGI,aAAAmF,CAAcnK,GACV,MAAM5D,EAAUiC,WAAW0B,WAAWC,GACtC,IAAK5D,EAED,YADA2I,MAAMC,UAAU,oBAAqB,SAIzC,MAAMlE,EAAa,CACftG,QAAS,QACT4P,UAAU,IAAI1N,MAAOC,cACrBP,QAASA,GAGPiO,EAAO,IAAIC,KAAK,CAACjL,KAAKS,UAAUgB,EAAY,KAAM,IAAK,CAAEnP,KAAM,qBAC/D4Y,EAAMC,IAAIC,gBAAgBJ,GAC1BK,EAAIla,SAASgX,cAAc,KACjCkD,EAAEC,KAAOJ,EACTG,EAAEE,SAAW,GAAGxO,EAAQjL,KAAKmL,QAAQ,gBAAiB,oBACtDoO,EAAErD,QACFmD,IAAIK,gBAAgBN,GAEpBxF,MAAMC,UAAU,YAAY5I,EAAQjL,iBAAkB,UAC9D,CAEI,mBAAM2Z,CAAcC,GAChB,IACI,MAAMlM,EAAOQ,KAAKC,MAAMyL,GAExB,IAAKlM,EAAKzC,QACN,MAAM,IAAImB,MAAM,+BAGpB,MAAMnB,EAAUyC,EAAKzC,QAGrB,IAAI4J,EAAc5J,EAAQjL,KACtB8Y,EAAU,EACd,MAAMe,EAAe3M,WAAWO,aAEhC,KAAOzD,OAAOgB,OAAO6O,EAAa/K,UAAUoJ,KAAKjE,GAAKA,EAAEjU,OAAS6U,IAC7DA,EAAc,GAAG5J,EAAQjL,SAAS8Y,KAClCA,IAGJ7N,EAAQjL,KAAO6U,EACf5J,EAAQ6O,UAAW,IAAIvO,MAAOC,cAC9BP,EAAQuD,cAAe,IAAIjD,MAAOC,cAElC,MAAMqD,EAAYoD,IAAIqC,kBAAkBO,GAExC,GAAI3H,WAAW6B,YAAYF,EAAW5D,GAGlC,OAFAgH,IAAIsC,iBACJX,MAAMC,UAAU,YAAYgB,2BAAsC,YAC3D,EAEP,MAAM,IAAIzI,MAAM,kCAEhC,CAAU,MAAOrN,GAEL,OADA6U,MAAMC,UAAU,6BAA+B9U,EAAM8G,QAAS,UACvD,CACnB,CACA,GF/zBMiQ,EAAc,IGhBL,MACX,WAAAzJ,GACIzM,KAAKma,gBAAkB,CAEnBC,SAAU,0DAEVC,KAAM,6CAENC,MAAO,qEAEPC,QAAS,YAGbva,KAAKwa,UAAYxa,KAAKya,mBAE9B,CAEI,IAAA/M,GACI1N,KAAKmS,qBACb,CAGI,iBAAAsI,GACI,MAAM3S,EAAO,IAAInJ,IAGjB,IAAK,IAAI+b,EAAI,EAAGA,GAAK,GAAIA,IACrB5S,EAAKlJ,IAAI,IAAI8b,KAIjB,IAAK,IAAIA,EAAI,EAAGA,GAAK,EAAGA,IACpB5S,EAAKlJ,IAAI8b,EAAEC,YAIf,IAAK,IAAID,EAAI,GAAIA,GAAK,GAAIA,IACtB5S,EAAKlJ,IAAIgc,OAAOC,aAAaH,IAIb,CAChB,QAAS,MAAO,QAAS,SAAU,YAAa,SAChD,SAAU,OAAQ,MAAO,SAAU,WACnC,KAAM,OAAQ,OAAQ,QACtB,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,cAAe,aAAc,cAAe,iBAAkB,eAE9D,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,SAAU,WAEV,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,WAAY,YAAa,cAC1D,aAAc,YAAa,aAC3B,YAAa,SAAU,QAAS,QAAS,SAAU,QACnD,QAAS,cAAe,YAAa,eAAgB,QAErD,IAAK,KAGGpQ,QAAQ5B,GAAOZ,EAAKlJ,IAAI8J,IAGpC,MACMoS,EAAWC,MAAMC,KAAKlT,GAyB5B,MA1BkB,CAAC,OAAQ,MAAO,QAAS,WAGjCwC,QAAQuN,IACdiD,EAASxQ,QAAQ5B,IACbZ,EAAKlJ,IAAI,GAAGiZ,KAAYnP,SAOhCZ,EAAKlJ,IAAI,YACTkJ,EAAKlJ,IAAI,cACTkJ,EAAKlJ,IAAI,aACTkJ,EAAKlJ,IAAI,eACTkJ,EAAKlJ,IAAI,iBAETkc,EAASxQ,QAAQ5B,IACbZ,EAAKlJ,IAAI,YAAY8J,KACrBZ,EAAKlJ,IAAI,cAAc8J,KACvBZ,EAAKlJ,IAAI,aAAa8J,KACtBZ,EAAKlJ,IAAI,eAAe8J,KACxBZ,EAAKlJ,IAAI,iBAAiB8J,OAGvBqS,MAAMC,KAAKlT,GAAMmT,MAChC,CAGI,gBAAAC,CAAiBxE,GACb,MAAMyE,EAAQzE,EAAQ0E,MAAM,MACtBhF,EAAS,CACX3K,SAAU,CAAA,EACVvD,QAAS,CAAA,EACTmT,SAAU,GACVC,OAAQ,IAuEZ,OApEAH,EAAM7Q,QAAQ,CAACiR,EAAMC,KACjB,MAAMC,EAAUF,EAAKrH,OACrB,GAAKuH,EAEL,IACI,GAAIzb,KAAKma,gBAAgBI,QAAQvC,KAAKyD,GAClCrF,EAAOiF,SAASnD,KAAK,CACjBqD,KAAMC,EAAQ,EACd9E,QAAS+E,SAEV,GAAIzb,KAAKma,gBAAgBG,MAAMtC,KAAKyD,GAAU,CACjD,MAAMC,EAAQD,EAAQC,MAAM1b,KAAKma,gBAAgBG,OACjD,GAAIoB,EAAO,CACP,MAAM,CAAGC,EAAWC,EAAgBC,GAAmBH,EAEjDxb,EAAW0b,GAAkBC,EACnCzF,EAAOlO,QAAQyT,GAAa,CACxBvb,KAAMub,EACNzb,SAAUA,EACVqb,KAAMC,EAAQ,EAE1C,CACA,MAAuB,GAAIxb,KAAKma,gBAAgBC,SAASpC,KAAKyD,GAAU,CACpD,MAAMC,EAAQD,EAAQC,MAAM1b,KAAKma,gBAAgBC,UACjD,GAAIsB,EAAO,CACP,MAAM,CAAGhT,EAAKoT,EAAeC,GAAiBL,EACxCxb,EAAWF,KAAKgc,mBAAmBF,GAEzC1F,EAAO3K,SAAS/C,GAAO,CACnBA,IAAKA,EACLxI,SAAUA,EACVqb,KAAMC,EAAQ,EACdS,IAAKH,EAELC,cAAeA,GAAiB,KAE5D,CACA,MAAuB,GAAI/b,KAAKma,gBAAgBE,KAAKrC,KAAKyD,GAAU,CAChD,MAAMC,EAAQD,EAAQC,MAAM1b,KAAKma,gBAAgBE,MACjD,GAAIqB,EAAO,CACP,OAAShT,EAAKoT,GAAiBJ,EAEzBQ,EAAqBJ,EAAcvQ,QAAQ,WAAY,MACvDrL,EAAWF,KAAKgc,mBAAmBE,GAEzC9F,EAAO3K,SAAS/C,GAAO,CACnBA,IAAKA,EACLxI,SAAUA,EACVqb,KAAMC,EAAQ,EACdS,IAAKC,EAEjC,CACA,MACoB9F,EAAOkF,OAAOpD,KAAK,CACfqD,KAAMC,EAAQ,EACd9E,QAAS+E,EACTtc,MAAO,0BAG/B,CAAc,MAAOA,GACLiX,EAAOkF,OAAOpD,KAAK,CACfqD,KAAMC,EAAQ,EACd9E,QAAS+E,EACTtc,MAAOA,EAAM8G,SAEjC,IAGemQ,CACf,CAGI,6BAAA+F,CAA8Bjc,GAC1B,IAAKA,GAAYA,EAASqP,QAAU,EAChC,OAAOrP,EAAS8G,IAAIuR,GAAOA,EAAIhY,SAAWgY,GAAK6D,KAAK,QAIxD,MAAMC,EAAiBnc,EAAS8G,IAAIuR,GAAOA,EAAIhY,SAAWgY,GAMpD+D,EADW,IAAID,GAAgBtY,UACAwY,MAAM,GAG3C,MAFiB,IAAIF,KAAmBC,GAExBF,KAAK,OAC7B,CAGI,yBAAAI,CAA0BV,GACtB,IAAKA,GAA0C,iBAAlBA,EACzB,MAAO,CAAEW,YAAY,EAAOC,iBAAkB,IAGlD,MAAMxc,EAAW4b,EAAcV,MAAM,QAAQpU,IAAIuR,GAAOA,EAAIrE,QAAQyI,OAAOpE,GAAOA,GAGlF,GAAIrY,EAASqP,QAAU,EACnB,MAAO,CAAEkN,YAAY,EAAOC,iBAAkBxc,GAKlD,GAAIA,EAASqP,OAAS,GAAKrP,EAASqP,OAAS,GAAM,EAC/C,MAAO,CAAEkN,YAAY,EAAOC,iBAAkBxc,GAGlD,MAAM0c,EAAWhL,KAAKC,MAAM3R,EAASqP,OAAS,GACxCsN,EAAY3c,EAASqc,MAAM,EAAGK,EAAW,GACzCE,EAAa5c,EAASqc,MAAMK,EAAW,GAGvCG,EAAkBF,EAAUN,MAAM,GAAG,GAAIxY,UAE/C,OAAI+Y,EAAWvN,SAAWwN,EAAgBxN,QACtCuN,EAAWE,MAAM,CAACzE,EAAKiD,IAAUjD,IAAQwE,EAAgBvB,IAClD,CACHiB,YAAY,EACZC,iBAAkBG,GAInB,CAAEJ,YAAY,EAAOC,iBAAkBxc,EACtD,CAGI,kBAAA8b,CAAmBF,GAGf,OAFiBA,EAAcV,MAAM,MAAMpU,IAAIuR,GAAOA,EAAIrE,QAE1ClN,IAAI,CAACzG,EAASib,KAC1B,MAAMyB,EAAa,CACf1c,QAASA,EACTK,KAAMb,OAAOmd,YAAcnd,OAAOmd,YAAYC,kBAAkB5c,GAAW,SAC3EF,KAAMN,OAAOmd,YAAcnd,OAAOmd,YAAYE,eAAe7c,GAAW,KACxEyH,KAAMjI,OAAOmd,YAAcnd,OAAOmd,YAAYG,eAAe9c,GAAWA,EACxE0H,GAAI,YAAY0D,KAAK2R,SAAS9B,KAIlC,GAAIjb,EAAQ4P,SAAS,sBAAuB,CACxC,MAAMuL,EAAQnb,EAAQmb,MAAM,uCACxBA,IACAuB,EAAWvc,WAAa,CACpBsB,KAAMub,SAAS7B,EAAM,IACrBtZ,KAAMmb,SAAS7B,EAAM,KAEzBuB,EAAWjV,KAAO,gBAAgBuV,SAAS7B,EAAM,IAAM,UAAU6B,SAAS7B,EAAM,IAAM,IAE1G,MAAmB,GAAInb,EAAQ4P,SAAS,KAAM,CAE9B,MAAMuL,EAAQnb,EAAQmb,MAAM,uBACxBA,IACAuB,EAAWvc,WAAa,CACpBuF,QAASyV,EAAM,IAEnBuB,EAAWjV,KAAO,GAAGiV,EAAWjV,SAAS0T,EAAM,KAEnE,CAEY,OAAOuB,GAEnB,CAGI,iBAAA9G,CAAkBO,GAEd,MAAM8G,EAAgBlQ,WAAW0B,WAAWqD,IAAIhD,gBAChD,IAAKmO,EAED,OADAxJ,MAAMC,UAAU,iCAAkC,WAC3C,CAAEwJ,SAAS,EAAOte,MAAO,qBAGpC,IACI,MAAMkP,EAASrO,KAAKkb,iBAAiBxE,GAG/BW,EAAWjN,OAAOtC,KAAKuG,EAAO5C,UAAU8D,OAE9C,GAAiB,IAAb8H,EAEA,OADArD,MAAMC,UAAU,4BAA6B,WACtC,CAAEwJ,SAAS,EAAOte,MAAO,qBAI/Bqe,EAAc5V,SACf4V,EAAc5V,OAAS,CACnBC,MAAO,CAAEC,KAAM,IACfQ,OAAQ,CAAER,KAAM,MAKnB0V,EAAc5V,OAAOyK,IAAI1K,sBAC1B6V,EAAc5V,OAAOyK,IAAI1K,oBAAsB,CAAEG,KAAM,KAI3D,MAAM4V,EAAYF,EAAc5V,OAAOyK,IAAI1K,oBAAoBG,KAG/DsC,OAAOC,QAAQgE,EAAO5C,UAAUnB,QAAQ,EAAE5B,EAAKiV,MAE3C,MAAM7B,EAAgB6B,EAAYzd,SAAS8G,IAAIuR,GAAOA,EAAIhY,SAAS6b,KAAK,QAClEwB,EAAa5d,KAAKwc,0BAA0BV,GAElD,GAAI8B,EAAWnB,WAAY,CAEvBiB,EAAUhV,GAAO1I,KAAKgc,mBAAmB4B,EAAWlB,iBAAiBN,KAAK,SAE1E,MAAMjL,EAAMkB,IAAI1K,mBACX6V,EAAcK,kBACfL,EAAcK,gBAAkB,IAE/BL,EAAcK,gBAAgB1M,KAC/BqM,EAAcK,gBAAgB1M,GAAO,IAEzCqM,EAAcK,gBAAgB1M,GAAKzI,GAAO,CACtCoV,yBAAyB,EAEjD,MAEoBJ,EAAUhV,GAAOiV,EAAYzd,WAKrCoN,WAAW6B,YAAYkD,IAAIhD,eAAgBmO,GAC3CnL,IAAIyC,aAAY,GAGhBzC,IAAI2E,gBAEJ,MAAM/Q,EAAU,qBAAqBoR,aAOrC,OANIjN,OAAOtC,KAAKuG,EAAOnG,SAASqH,OAAS,EACrCyE,MAAMC,UAAUhO,EAAU,KAAKmE,OAAOtC,KAAKuG,EAAOnG,SAASqH,+CAAgD,WAE3GyE,MAAMC,UAAUhO,EAAS,WAGtB,CACHwX,SAAS,EACTvD,SAAU,CACNpS,KAAMuP,GAEViE,OAAQjN,EAAOiN,OAE/B,CAAU,MAAOnc,GAEL,OADA6U,MAAMC,UAAU,kBAAoB9U,EAAM8G,QAAS,SAC5C,CAAEwX,SAAS,EAAOte,MAAOA,EAAM8G,QAClD,CACA,CAGI,eAAA0Q,CAAgBD,GAEZ,IADgBrE,IAAI0B,oBAGhB,OADAC,MAAMC,UAAU,iCAAkC,WAC3C,CAAEwJ,SAAS,EAAOte,MAAO,qBAGpC,IACI,MAAMkP,EAASrO,KAAKkb,iBAAiBxE,GAG/Ba,EAAanN,OAAOtC,KAAKuG,EAAOnG,SAASqH,OAE/C,GAAmB,IAAfgI,EAEA,OADAvD,MAAMC,UAAU,2BAA4B,WACrC,CAAEwJ,SAAS,EAAOte,MAAO,oBAIpC,MAAMqe,EAAgBlQ,WAAW0B,WAAWqD,IAAIhD,gBAChD,IAAKmO,EAED,OADAxJ,MAAMC,UAAU,mCAAoC,SAC7C,CAAEwJ,SAAS,EAAOte,MAAO,qBAI/Bqe,EAActV,UACfsV,EAActV,QAAU,CAAA,GAI5BkC,OAAOC,QAAQgE,EAAOnG,SAASoC,QAAQ,EAAElK,EAAM2d,MAC3CP,EAActV,QAAQ9H,GAAQ,CAC1BF,SAAU6d,EAAU7d,SACpBI,YAAayd,EAAUzd,aAAe,MAK9CgN,WAAW6B,YAAYkD,IAAIhD,eAAgBmO,GAC3CnL,IAAIyC,aAAY,GAGZ/U,OAAO6W,YAAgE,mBAA3C7W,OAAO6W,WAAWoH,sBAC9Cje,OAAO6W,WAAWoH,uBAGtB,MAAM/X,EAAU,qBAAqBsR,YAGzC,OAFIvD,MAAMC,UAAUhO,EAAS,WAEtB,CACHwX,SAAS,EACLvD,SAAU,CACNhS,QAASqP,GAEjB+D,OAAQjN,EAAOiN,OAE3B,CAAU,MAAOnc,GAEL,OADA6U,MAAMC,UAAU,kBAAoB9U,EAAM8G,QAAS,SAC5C,CAAEwX,SAAS,EAAOte,MAAOA,EAAM8G,QAClD,CACA,CAGI,aAAAmT,CAAc/N,GACV,IAAI4S,EAAS,GAGbA,GAAU,KAAK5S,EAAQjL,UAAUiL,EAAQG,cACzCyS,GAAU,6CACVA,GAAU,MAAK,IAAItS,MAAOuS,uBAG1BD,GAAU,uBAkCV,OAjCmB7T,OAAOtC,KAAKuD,EAAQvD,MAAMmT,KAAKjb,KAAKme,YAAY9D,KAAKra,OAE7DsK,QAAQ5B,IACf,MAAMxI,EAAWmL,EAAQvD,KAAKY,GAC9B,GAAIxI,GAAYA,EAASqP,OAAS,EAAG,CACjC,IAAIuM,EAGAsC,GAAkB,EACtB,GAAI/S,EAAQwS,gBAAiB,CACzB,MAAM1M,EAAM9F,EAAQG,MAAQ,QACxBH,EAAQwS,gBAAgB1M,IAAQ9F,EAAQwS,gBAAgB1M,GAAKzI,GAC7D0V,IAAoB/S,EAAQwS,gBAAgB1M,GAAKzI,GAAKoV,wBAC/CzS,EAAQwS,gBAAgBnV,KAE/B0V,IAAoB/S,EAAQwS,gBAAgBnV,GAAKoV,wBAEzE,CAGoBhC,EADAsC,GAAmBle,EAASqP,OAAS,EACrBvP,KAAKmc,8BAA8Bjc,GAEnCA,EAAS8G,IAAIuR,GAAOA,EAAIhY,SAAS6b,KAAK,QAI1D6B,GAAU,GAAGvV,MAAQoT,SACrC,MAEgBmC,GAAU,GAAGvV,cAIduV,CACf,CAGI,WAAAE,CAAYxE,EAAG0E,GAEX,MAAMC,EAAO3E,EAAE+B,MAAM,YACf6C,EAAOF,EAAE3C,MAAM,YAErB,GAAI4C,GAAQC,EACR,OAAOhB,SAASe,EAAK,IAAMf,SAASgB,EAAK,IAE7C,GAAID,IAASC,EAAM,SACnB,IAAKD,GAAQC,EAAM,OAAO,EAG1B,MAAMC,EAAS,QAAQxG,KAAK2B,GACtB8E,EAAS,QAAQzG,KAAKqG,GAE5B,GAAIG,GAAUC,EACV,OAAOlB,SAAS5D,GAAK4D,SAASc,GAElC,GAAIG,IAAWC,EAAQ,SACvB,IAAKD,GAAUC,EAAQ,OAAO,EAG9B,MAAMC,EAAY,UAAU1G,KAAK2B,GAC3BgF,EAAY,UAAU3G,KAAKqG,GAEjC,GAAIK,GAAaC,EACb,OAAOhF,EAAEiF,cAAcP,GAE3B,GAAIK,IAAcC,EAAW,SAC7B,IAAKD,GAAaC,EAAW,OAAO,EAGpC,MAAME,EAAe,CAAC,QAAS,MAAO,QAAS,UACzCC,EAAWD,EAAaE,QAAQpF,GAChCqF,EAAWH,EAAaE,QAAQV,GAEtC,OAAiB,IAAbS,QAAmBE,EACZF,EAAWE,GAEL,IAAbF,IAAgC,IAAbE,GAAwB,GAC9B,IAAbF,IAAgC,IAAbE,EAAwB,EAGxCrF,EAAEiF,cAAcP,EAC/B,CAGI,UAAAY,CAAWvW,GAEP,SAAKA,GAAsB,iBAARA,IAKZ1I,KAAKwa,UAAUlC,KAAK4G,GAAYA,EAAS5T,gBAAkB5C,EAAI4C,cAC9E,CAEI,gBAAA6T,CAAiB/e,GACb,OAAOH,SAASkJ,WAAWE,iBAAiB2O,KAAK5X,EACzD,CAEI,eAAAgf,CAAgB1W,EAAKxI,GACjB,MAAMob,EAAS,GAuBf,OApBKtb,KAAKif,WAAWvW,IACjB4S,EAAOpD,KAAK,qBAAqBxP,KAIhCxI,GAAgC,IAApBA,EAASqP,OAGtBrP,EAASoK,QAAQ,CAAC/J,EAASib,KAClBjb,EAAQA,SAA6C,IAAlCA,EAAQA,QAAQ2T,OAAO3E,QAC3C+L,EAAOpD,KAAK,WAAWsD,EAAQ,gBAJvCF,EAAOpD,KAAK,oCAUZhY,GAAYA,EAASqP,OAAStP,SAASkJ,WAAWG,mBAClDgS,EAAOpD,KAAK,0BAA0BjY,SAASkJ,WAAWG,sBAGvD,CACH+V,MAAyB,IAAlB/D,EAAO/L,OACd+L,SAEZ,CAGI,WAAAgE,CAAY3C,EAAS,IACjB,MAAM4C,EAAc5C,EAAOrR,cAE3B,OAAOtL,KAAKwa,UAAUmC,OAAOjU,GACzBA,EAAI4C,cAAc6E,SAASoP,IAC7BhD,MAAM,EAAG,GACnB,CAEI,aAAAiD,GACI,MAAO,CACH,QAAS,MAAO,QAChB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,SAAU,SAAU,SAAU,SAC9B,QAAS,QAAS,QAAS,QAC3B,UAAW,UAAW,UAAW,UAE7C,CAGI,mBAAArN,GAGJ,CAEI,uBAAAsN,CAAwBhhB,GACpB,MAAMoX,EAAOpX,EAAMa,OAAOwW,MAAM,GAChC,IAAKD,EAAM,OAEX,MAAME,EAAS,IAAIC,WACnBD,EAAOE,OAAUpW,IACb,IACIG,KAAKmW,kBAAkBtW,EAAEP,OAAO8W,OAChD,CAAc,MAAOjX,GACL6U,MAAMC,UAAU,kCAAoC9U,EAAM8G,QAAS,QACnF,GAEQ8P,EAAOM,WAAWR,GAGlBpX,EAAMa,OAAOiT,MAAQ,EAC7B,CAGI,iBAAAmN,GACI,MAAO,WAAa/T,KAAK2R,MAAQ,IAAM1L,KAAK+N,SAAShF,SAAS,IAAIiF,OAAO,EAAG,EACpF,CAEI,YAAAC,CAAaC,GACT,OAAOxR,KAAKC,MAAMD,KAAKS,UAAU+Q,GACzC,CAGI,eAAAC,CAAgB1U,GACZ,MAAM2U,EAAQ,CACVC,UAAW7V,OAAOtC,KAAKuD,EAAQvD,MAAMyH,OACrC2Q,cAAe,EACfC,aAAc/V,OAAOtC,KAAKuD,EAAQnD,SAAW,CAAA,GAAIqH,OACjDiI,aAAc,CAAA,EACd4I,iBAAkB,CAAA,GAetB,OAZAhW,OAAOgB,OAAOC,EAAQvD,MAAMwC,QAAQpK,IAChC8f,EAAME,eAAiBhgB,EAASqP,OAEhCrP,EAASoK,QAAQ/J,IAEbyf,EAAMxI,aAAajX,EAAQK,OAASof,EAAMxI,aAAajX,EAAQK,OAAS,GAAK,EAG7Eof,EAAMI,iBAAiB7f,EAAQA,UAAYyf,EAAMI,iBAAiB7f,EAAQA,UAAY,GAAK,MAI5Fyf,CACf,GH5mBMpJ,EAAa,IIjBJ,MACX,WAAAnK,GACIzM,KAAKqgB,aAAe,IAE5B,CAEI,IAAA3S,GACI1N,KAAKmS,sBAELnS,KAAKge,sBACb,CAEI,mBAAA7L,GAEI/S,SAASC,MAAM,cAAe,QAAS,qBAAsB,KACzDW,KAAKsgB,qBAITlhB,SAASC,MAAM,cAAe,QAAS,YAAa,KAChDW,KAAKugB,uBAITnhB,SAASC,MAAM,eAAgB,QAAS,aAAc,KAClDW,KAAKwgB,cAIT/gB,SAASE,iBAAiB,QAAUE,IAC5B,CAAC,YAAa,gBAAiB,oBAAoBsQ,SAAStQ,EAAEP,OAAO2I,KACrEjI,KAAKygB,uBAKbhhB,SAASE,iBAAiB,QAAUE,IAChC,GAAIA,EAAEP,OAAO+V,UAAUqL,SAAS,sBAAwB7gB,EAAEP,OAAO8V,QAAQ,sBAAuB,CAC5FvV,EAAE8gB,iBACF,MACMC,GADS/gB,EAAEP,OAAO+V,UAAUqL,SAAS,qBAAuB7gB,EAAEP,OAASO,EAAEP,OAAO8V,QAAQ,uBAC7DA,QAAQ,yBACnCyL,EAAWD,EAAoBA,EAAkBE,cAAc,YAAc,KAE/ED,GACA7gB,KAAK+gB,qBAAqBF,EAE9C,GAEA,CAGI,gBAAAP,GACItgB,KAAK6W,kBACLpD,aAAaC,KAAK,oBAC1B,CAEI,eAAAmD,GACI,MAAMmK,EAAYvhB,SAASC,eAAe,aAC1C,IAAKshB,EAAW,OAEhB,MAAM3V,EAAUgH,IAAI0B,oBACpB,IAAK1I,IAAYA,EAAQnD,QAQrB,YAPA8Y,EAAUC,UAAY,yQAU1B,MAAM/Y,EAAUkC,OAAOC,QAAQgB,EAAQnD,SAEhB,IAAnBA,EAAQqH,QAWZyR,EAAUC,UAAY,2DAEZ/Y,EAAQlB,IAAI,EAAE5G,EAAMka,KAAWta,KAAKkhB,gBAAgB9gB,EAAMka,IAAQ8B,KAAK,oCAKjF4E,EAAUG,iBAAiB,eAAe7W,QAAQ8W,IAC9C,MAAMzF,EAAYyF,EAAKC,QAAQ/G,MAE/B8G,EAAKN,cAAc,oBAAoBnhB,iBAAiB,QAAS,KAC7DK,KAAKshB,UAAU3F,KAGnByF,EAAKN,cAAc,sBAAsBnhB,iBAAiB,QAAS,KAC/DK,KAAKuhB,mBAAmB5F,KAG5ByF,EAAKN,cAAc,mBAAmBnhB,iBAAiB,QAAS,KAC5DK,KAAKwhB,SAAS7F,QA7BlBqF,EAAUC,UAAY,uQAgClC,CAEI,eAAAC,CAAgB9gB,EAAMka,GAClB,MAAMmH,EAAiBnH,EAAMpa,SAASqP,OAAS,GACzC+K,EAAMpa,SAASwhB,UAAU,EAAG,IAAM,MAClCpH,EAAMpa,SAEZ,MAAO,qDACmCE,4EAExBA,6vBAcJka,EAAMha,aAAe,qHAGfmhB,iHAGOrhB,gEAInC,CAGI,kBAAAmgB,CAAmB5E,EAAY,MAC3B,MAAM/H,EAAQnU,SAASC,eAAe,kBAChCmU,EAAYpU,SAASC,eAAe,aACpCoU,EAAYrU,SAASC,eAAe,oBACpCiiB,EAAgBliB,SAASC,eAAe,iBAE9C,GAAIic,EAAW,CAEX,MACMrB,EADUjI,IAAI0B,oBACE7L,QAAQyT,GAE1B/H,IAAOA,EAAMxG,YAAc,cAC3ByG,IACAA,EAAUtB,MAAQoJ,EAClB9H,EAAU+N,UAAW,GAErB9N,IAAWA,EAAUvB,MAAQ+H,EAAMha,aAAe,IAClDqhB,IAAeA,EAAcpP,MAAQ+H,EAAMpa,UAE/CF,KAAKqgB,aAAe1E,CAChC,MAEgB/H,IAAOA,EAAMxG,YAAc,aAC3ByG,IACAA,EAAUtB,MAAQ,GAClBsB,EAAU+N,UAAW,GAErB9N,IAAWA,EAAUvB,MAAQ,IAC7BoP,IAAeA,EAAcpP,MAAQ,IAEzCvS,KAAKqgB,aAAe,KAGxBrgB,KAAKygB,qBACLhN,aAAagB,KAAK,qBAClBhB,aAAaC,KAAK,iBAC1B,CAEI,SAAA4N,CAAU3F,GACN3b,KAAKugB,mBAAmB5E,EAChC,CAEI,wBAAM4F,CAAmB5F,SACG3H,MAAMe,QAC1B,8CAA8C4G,MAC9C,eACA,WAIA3b,KAAK6hB,YAAYlG,EAE7B,CAEI,WAAAkG,CAAYlG,GACR,MAAMtQ,EAAUgH,IAAI0B,oBAChB1I,GAAWA,EAAQnD,SAAWmD,EAAQnD,QAAQyT,YACvCtQ,EAAQnD,QAAQyT,GACvBtJ,IAAIlD,cACJkD,IAAIyC,aAAY,GAEhB9U,KAAK6W,kBACL7W,KAAKge,uBAELhK,MAAMC,UAAU,UAAU0H,aAAsB,WAE5D,CAEI,QAAA6F,CAAS7F,GACL,IAAKtJ,IAAI0E,YAEL,YADA/C,MAAMC,UAAU,4BAA6B,WAIjD,MAAM1T,EAAU,CACZA,QAASob,EACT/a,KAAM,QACNP,KAAM,KACN2H,KAAM,UAAU2T,IAChB1T,GAAIoK,IAAI8G,qBAGZ9G,IAAIyP,WAAWzP,IAAI0E,YAAaxW,GAChCkT,aAAagB,KAAK,qBAClBT,MAAMC,UAAU,UAAU0H,eAAuBtJ,IAAI0E,cAAe,UAC5E,CAGI,SAAAyJ,GACI,MAAM3M,EAAYpU,SAASC,eAAe,aACpCoU,EAAYrU,SAASC,eAAe,oBACpCiiB,EAAgBliB,SAASC,eAAe,iBAE9C,IAAKmU,IAAc8N,EAAe,OAElC,MAAMvhB,EAAOyT,EAAUtB,MAAM2B,OACvB5T,EAAcwT,GAAWvB,MAAM2B,QAAU,GACzChU,EAAWyhB,EAAcpP,MAAM2B,OAG/B/K,EAAanJ,KAAK+hB,cAAc3hB,EAAMF,GAC5C,IAAKiJ,EAAWkW,MAEZ,YADArL,MAAMC,UAAU9K,EAAWhK,MAAO,SAItC,MAAMkM,EAAUgH,IAAI0B,oBACpB,IAAK1I,EAED,YADA2I,MAAMC,UAAU,oBAAqB,SAUzC,GALK5I,EAAQnD,UACTmD,EAAQnD,QAAU,KAIjBlI,KAAKqgB,cAAgBhV,EAAQnD,QAAQ9H,GAGtC,OAFA4T,MAAMC,UAAU,yCAA0C,cAC1DJ,EAAUM,QAKd9I,EAAQnD,QAAQ9H,GAAQ,CACpBA,KAAMA,EACNE,YAAaA,EACbJ,SAAUA,EACVwL,QAAS1L,KAAKqgB,aAAehV,EAAQnD,QAAQ9H,IAAOsL,SAAU,IAAIC,MAAOC,cACzEgD,cAAc,IAAIjD,MAAOC,eAG7ByG,IAAIlD,cACJkD,IAAIyC,aAAY,GAGhB9U,KAAKge,uBAEL,MAAMgE,EAAShiB,KAAKqgB,aAAe,UAAY,UAC/CrM,MAAMC,UAAU,UAAU7T,MAAS4hB,IAAU,WAE7CvO,aAAagB,KAAK,kBAClBzU,KAAKsgB,kBACb,CAEI,aAAAyB,CAAc3hB,EAAMF,GAEhB,IAAKE,EACD,MAAO,CAAEif,OAAO,EAAOlgB,MAAO,0BAGlC,IAAKc,SAASkJ,WAAWE,iBAAiB2O,KAAK5X,GAC3C,MAAO,CAAEif,OAAO,EAAOlgB,MAAO,6FAGlC,GAAIiB,EAAKmP,OAAS,GACd,MAAO,CAAE8P,OAAO,EAAOlgB,MAAO,8CAKlC,GADsB,CAAC,QAAS,OAAQ,SAAU,iBAAkB,kBAClDgR,SAAS/P,EAAKkL,eAC5B,MAAO,CAAE+T,OAAO,EAAOlgB,MAAO,mCAIlC,IAAKe,EACD,MAAO,CAAEmf,OAAO,EAAOlgB,MAAO,yBAGlC,GAAIe,EAASqP,OAAS,IAClB,MAAO,CAAE8P,OAAO,EAAOlgB,MAAO,qDAIlC,GAAmB,oBAARkT,KAAuBA,IAAI0B,kBAAmB,CACrD,MAAM1I,EAAUgH,IAAI0B,oBACpB,GAAI1I,GAAWA,EAAQnD,QAAS,CAE5B,GADmBkC,OAAOtC,KAAKuD,EAAQnD,SACxBoQ,KAAKqD,GAAazb,EAASiQ,SAASwL,IAAcA,IAAcvb,GAE3E,MAAO,CAAEif,OAAO,EAAOlgB,MAAO,wCAElD,CACA,CAEQ,MAAO,CAAEkgB,OAAO,EACxB,CAEI,kBAAAoB,GACI,MAAMwB,EAAUxiB,SAASC,eAAe,gBAClCmU,EAAYpU,SAASC,eAAe,aACpCiiB,EAAgBliB,SAASC,eAAe,iBAE9C,IAAKuiB,IAAYpO,IAAc8N,EAAe,OAE9C,MAAMvhB,EAAOyT,EAAUtB,MAAM2B,QAAU,YACjChU,EAAWyhB,EAAcpP,MAAM2B,QAAU,mBAE/C+N,EAAQ7U,YAAc,SAAShN,QAAWF,MAClD,CAGI,oBAAA8d,GACI,MAAM3S,EAAUgH,IAAI0B,oBACpB,IAAK1I,IAAYA,EAAQnD,QAAS,OAGlC,MAAMga,EAAaziB,SAASC,eAAe,qBAC3C,IAAKwiB,EAAY,OAGjB,MAAMC,EAAwBD,EAAWpB,cAAc,6BACnDqB,GACAA,EAAsB5M,SAE1B,MAAM6M,EAA0BF,EAAWpB,cAAc,qCACrDsB,GACAA,EAAwB7M,SAI5B,MAAM8M,EAAajY,OAAOC,QAAQgB,EAAQnD,SACpCoa,EAAiBD,EAAW1F,OAAO,EAAEvc,EAAMka,MAC5Cla,EAAKmiB,WAAW,4BAEfC,EAAiBH,EAAW1F,OAAO,EAAEvc,EAAMka,KAC7Cla,EAAKmiB,WAAW,4BAIpB,GAAID,EAAe/S,OAAS,EAAG,CAC3B,MAAMkT,EAAgBziB,KAAK0iB,2BAA2BJ,EAAgB,UAAW,kBAAmB,eACpGJ,EAAWS,YAAYF,EACnC,CAGQ,GAAID,EAAejT,OAAS,EAAG,CAC3B,MAAMqT,EAAkB5iB,KAAK0iB,2BAA2BF,EAAgB,kBAAmB,cAAe,oBAC1GN,EAAWS,YAAYC,EACnC,CACA,CAEI,0BAAAF,CAA2Bxa,EAAS2a,EAAe,UAAWjP,EAAQ,kBAAmBkP,EAAY,eACjG,MAAMC,EAAUtjB,SAASgX,cAAc,OACvCsM,EAAQC,UAAY,WACpBD,EAAQ1B,QAAQ7W,SAAWqY,EAG3B,MAAMtV,EAAa,mBAAmBsV,cAChCI,EAAmD,SAArClV,aAAaC,QAAQT,GAGnC2V,EAA6B,oBAAjBL,EACZM,EAAWD,EAAY,MAAQ,KAC/BE,EAAYF,EAAY,kCAAoC,0BAElEH,EAAQ9B,UAAY,4BACHgC,EAAc,YAAc,sBAAsBJ,yGAE/CC,6BACVlP,mDAC6B1L,EAAQqH,gFAEX0T,EAAc,YAAc,yBACtD/a,EAAQlB,IAAI,EAAE5G,EAAMka,KAAW,qCACf8I,kBAA0BhjB,aAAgBka,EAAMha,aAAega,EAAMpa,uCAC7EijB,KAAY/iB,mDAEnBgc,KAAK,oCAkBhB,OAbe2G,EAAQjC,cAAc,MAC9BnhB,iBAAiB,QAAS,KAC7BK,KAAKqjB,oBAAoBR,EAAcE,KAI3CA,EAAQpjB,iBAAiB,QAAUE,IAC/B,GAAIA,EAAEP,OAAO+V,UAAUqL,SAAS,eAAiB7gB,EAAEP,OAAO+V,UAAUqL,SAAS,sBAAuB,CAChG,MAAM/E,EAAY9b,EAAEP,OAAO+hB,QAAQ/G,MACnCta,KAAKsjB,cAAc3H,EACnC,IAGeoH,CACf,CAEI,mBAAAM,CAAoBR,EAAcE,GAC9B,MAAMQ,EAASR,EAAQjC,cAAc,MAC/B5gB,EAAW6iB,EAAQjC,cAAc,sBACjC0C,EAAUD,EAAOzC,cAAc,qBAG/BvT,EAAa,mBAAmBsV,cADlB3iB,EAASmV,UAAUqL,SAAS,cAI5CxgB,EAASmV,UAAUE,OAAO,aAC1BgO,EAAOlO,UAAUE,OAAO,aACxBiO,EAAQC,MAAMC,UAAY,gBAC1B3V,aAAae,QAAQvB,EAAY,WAEjCrN,EAASmV,UAAUzW,IAAI,aACvB2kB,EAAOlO,UAAUzW,IAAI,aACrB4kB,EAAQC,MAAMC,UAAY,eAC1B3V,aAAae,QAAQvB,EAAY,QAE7C,CAEI,aAAA+V,CAAc3H,GACV,IAAKtJ,IAAI0E,YAEL,YADA/C,MAAMC,UAAU,4BAA6B,WAIjD,MACMqG,EADUjI,IAAI0B,oBACE7L,QAAQyT,GAE9B,IAAKrB,EAED,YADAtG,MAAMC,UAAU,kBAAmB,SAIvC,MAAM1T,EAAU,CACZA,QAASob,EACT/a,KAAM,QACNP,KAAM,KACN2H,KAAM,UAAU2T,IAChBrb,YAAaga,EAAMha,YACnB2H,GAAIoK,IAAI8G,qBAGZ9G,IAAIyP,WAAWzP,IAAI0E,YAAaxW,EACxC,CAGI,iBAAAojB,GACI,MAAO,CACHzc,aAAc,CACV9G,KAAM,eACNE,YAAa,qCACb2G,UAAW,CACP2c,UAAa,CACTxjB,KAAM,YACNE,YAAa,sCACbJ,SAAU,4EAEd2jB,cAAiB,CACbzjB,KAAM,gBACNE,YAAa,4CACbJ,SAAU,qGAEd4jB,SAAY,CACR1jB,KAAM,WACNE,YAAa,wBACbJ,SAAU,qEAItBqH,cAAe,CACXnH,KAAM,gBACNE,YAAa,sCACb2G,UAAW,CACP8c,aAAgB,CACZ3jB,KAAM,eACNE,YAAa,+BACbJ,SAAU,4EAEd8jB,WAAc,CACV5jB,KAAM,aACNE,YAAa,0BACbJ,SAAU,qEAItB6F,cAAe,CACX3F,KAAM,gBACNE,YAAa,iCACb2G,UAAW,CACPgd,UAAa,CACT7jB,KAAM,YACNE,YAAa,gCACbJ,SAAU,eAEdgkB,YAAe,CACX9jB,KAAM,cACNE,YAAa,4BACbJ,SAAU,sBAEdikB,SAAY,CACR/jB,KAAM,WACNE,YAAa,gCACbJ,SAAU,4BAKlC,CAEI,uBAAAkkB,CAAwB5Z,EAAUwO,GAC9B,MAAM/R,EAAYjH,KAAK2jB,oBACjB1K,EAAWhS,EAAUuD,IAAWvD,YAAY+R,GAElD,IAAKC,EAED,YADAjF,MAAMC,UAAU,qBAAsB,SAK1C,MAAM5I,EAAUgH,IAAI0B,oBAChB1I,EAAQnD,SAAWmD,EAAQnD,QAAQ+Q,EAAS7Y,MAC5C4T,MAAMC,UAAU,UAAUgF,EAAS7Y,uBAAwB,YAK1DiL,EAAQnD,UACTmD,EAAQnD,QAAU,IAGtBmD,EAAQnD,QAAQ+Q,EAAS7Y,MAAQ,IAC1B6Y,EACHvN,SAAS,IAAIC,MAAOC,cACpBgD,cAAc,IAAIjD,MAAOC,eAG7ByG,IAAIlD,cACJkD,IAAIyC,aAAY,GAEhB9U,KAAKge,uBACLhe,KAAK6W,kBAEL7C,MAAMC,UAAU,UAAUgF,EAAS7Y,8BAA+B,WAC1E,CAII,aAAAikB,CAAc1I,GACV,MAAMtQ,EAAUgH,IAAI0B,oBACpB,IAAK1I,EAAS,MAAO,GAErB,MAAMiZ,EAAQ,GA2Bd,OAxBAla,OAAOC,QAAQgB,EAAQvD,MAAMwC,QAAQ,EAAE5B,EAAKxI,MACxCA,EAASoK,QAAQ,CAAC/J,EAASib,MACnBjb,EAAQA,UAAYob,GAAapb,EAAQA,QAAQ4P,SAASwL,KAC1D2I,EAAMpM,KAAK,CACPtX,KAAM,UACN8H,IAAKA,EACLtE,SAAUoX,EAAQ,EAClB+I,QAAS,QAAQ7b,eAAiB8S,EAAQ,UAO1DpR,OAAOC,QAAQgB,EAAQnD,SAAW,CAAA,GAAIoC,QAAQ,EAAElK,EAAMka,MAC9Cla,IAASub,GAAarB,EAAMpa,SAASiQ,SAASwL,IAC9C2I,EAAMpM,KAAK,CACPtX,KAAM,QACN0Z,MAAOla,EACPmkB,QAAS,UAAUnkB,SAKxBkkB,CACf,CAEI,oBAAAvD,CAAqBF,GACjB,MAAM2D,EAAY,UACZC,EAAiB5D,EAAS6D,eAC1BnS,EAAQsO,EAAStO,MACjBoS,EAAWpS,EAAMgK,MAAM,EAAGkI,GAAkBD,EAAYjS,EAAMgK,MAAMkI,GAC1E5D,EAAStO,MAAQoS,EACjB9D,EAAS+D,kBAAkBH,EAAiBD,EAAkBC,EAAiBD,GAC/E3D,EAAS1M,QAGT0M,EAASgE,cAAc,IAAIC,MAAM,QAAS,CAAEC,SAAS,IAC7D,GJnmBMxO,EAAY,IKlBH,MACX,WAAA9J,GACIzM,KAAKglB,cAAgB,CACjBC,YAAa,0BACbC,aAAc,uBACdC,aAAc,2BACdC,SAAU,kBACVC,YAAa,sBAIzB,CAEI,IAAA3X,GACI1N,KAAKmS,qBACb,CAEI,mBAAAA,GAEI/S,SAASC,MAAM,oBAAqB,QAAS,iBAAkB,KAC3DW,KAAKslB,sBAITlmB,SAASC,MAAM,iBAAkB,QAAS,cAAe,KACrDW,KAAKulB,sBAEjB,CAGI,uBAAMD,GACF,MAAMja,EAAUgH,IAAI0B,oBACf1I,EAOLrL,KAAKwW,qBAAqBnL,GANtB2I,MAAMC,UAAU,gCAAiC,UAO7D,CAGI,oBAAAuC,CAAqBnL,GACjB,IACI,MAAMqL,EAAU1W,KAAKwlB,uBAAuBna,GAC5CrL,KAAKylB,aAAa/O,EAAS1W,KAAK0lB,iBAAiBra,EAAS,OAAQ,cAElE2I,MAAMC,UAAU,qCAAsC,UAClE,CAAU,MAAO9U,GACL6U,MAAMC,UAAU,kCAAoC9U,EAAM8G,QAAS,QAC/E,CACA,CAEI,sBAAAuf,CAAuBna,EAAS/I,EAAU,IACtC,IAAIoU,EAAU,GAoBd,OAjBAA,GAAW1W,KAAK2lB,mBAAmBta,GAInCqL,GAAW1W,KAAK4lB,uBACZva,EAAQvD,KACR,IACOxF,EACH+I,UAEA5J,YAAaa,EAAQb,aAAe4J,EAAQG,MAAQ,UAK5DkL,GAAW1W,KAAK6lB,qBAETnP,CACf,CAEI,kBAAAiP,CAAmBta,GACf,MAAMwE,GAAY,IAAIlE,MAAOuS,iBAG7B,IAAI8B,EAeJ,MAd2B,oBAAhB9J,aAA+BA,YAAY6J,gBAClDC,EAAQ9J,YAAY6J,gBAAgB1U,IAGpC2U,EAAQ,CACJC,UAAW7V,OAAOtC,KAAKuD,EAAQvD,MAAQ,CAAA,GAAIyH,OAC3C2Q,cAAe,GAGnB9V,OAAOgB,OAAOC,EAAQvD,MAAQ,CAAA,GAAIwC,QAAQpK,IACtC8f,EAAME,eAAiBhgB,EAASqP,UAIjC,yEACXlE,EAAQjL,iHAEFiL,EAAQG,KAAKsa,+BACRjW,+CAC4B5P,SAASuJ,SAASC,sDAG3CuW,EAAMC,kCACFD,EAAME,wLAKUlgB,KAAK0lB,iBAAiBra,EAAS,gFAIrE,CAEI,oBAAA0a,CAAqB7d,GACjB,IAAKA,GAA2C,IAAhCkC,OAAOtC,KAAKI,GAASqH,OACjC,MAAO,GAGX,IAAImH,EAAU,8SAmBd,OATsBtM,OAAOC,QAAQnC,GAAS+S,KAAK,EAAEtB,IAAK0E,KAAO1E,EAAEiF,cAAcP,IAEnE/T,QAAQ,EAAElK,EAAMka,MACtBA,EAAMha,cACNoW,GAAW,KAAK4D,EAAMha,iBAE1BoW,GAAW,SAAStW,QAAWka,EAAMpa,oBAGlCwW,CACf,CAEI,sBAAAkP,CAAuB9d,EAAMxF,EAAU,IACnC,IAAKwF,GAAqC,IAA7BsC,OAAOtC,KAAKA,GAAMyH,OAC3B,MAAO,4BAGX,IAkBIyW,EAlBAtP,EAAU,oLAKVpU,EAAQwb,0BACRpH,GAAW,yJAMfA,GAAW,2EAQPsP,EADuB,oBAAhB9P,aAA+BA,YAAYiI,YACrC/T,OAAOtC,KAAKA,GAAMmT,KAAK/E,YAAYiI,YAAY9D,KAAKnE,cAGpD9L,OAAOtC,KAAKA,GAAMmT,KAAKjb,KAAKme,YAAY9D,KAAKra,OAI9D,MAAMimB,EAAYjmB,KAAKkmB,gBAAgBF,EAAYle,GA+CnD,OA7CAsC,OAAOC,QAAQ4b,GAAW3b,QAAQ,EAAE6b,EAAWC,MAClB,IAArBA,EAAU7W,SAEdmH,GAAW,KAAKyP,MAChBzP,GAAW,KAAK,IAAI5E,OAAOqU,EAAU5W,YAErC6W,EAAU9b,QAAQ5B,IACd,MAAMxI,EAAW4H,EAAKY,GACtB,GAAIxI,GAAYA,EAASqP,OAAS,EAAG,CACjC,IAAIuM,EAGJ,MAAMuK,EAAkB/jB,EAAQwb,wBAGhC,IAAIwI,GAAkB,EAEtB,GAAIhkB,EAAQ+I,SAAW/I,EAAQ+I,QAAQwS,gBACnC,GAAIvb,EAAQb,aAAea,EAAQ+I,QAAQwS,gBAAgBvb,EAAQb,aAAc,CAE7E,MAAM8kB,EAAUjkB,EAAQ+I,QAAQwS,gBAAgBvb,EAAQb,aACxD6kB,KAAqBC,GAAWA,EAAQ7d,IAAQ6d,EAAQ7d,GAAKoV,wBACzF,MAE4BwI,KAAqBhkB,EAAQ+I,QAAQwS,gBAAgBnV,KAChCpG,EAAQ+I,QAAQwS,gBAAgBnV,GAAKoV,yBAQ9DhC,GAJoBuK,GAAmBC,IAEpBpmB,EAASqP,OAAS,GAErB2G,YAAcA,YAAYiG,8BAA8Bjc,GAGxDA,EAAS8G,IAAIuR,GAAOA,EAAIhY,SAAS6b,KAAK,QAE1D1F,GAAW,GAAGhO,MAAQoT,MAC1C,IAGYpF,GAAW,QAGRA,CACf,CAGI,WAAAyH,CAAYxE,EAAG0E,GAEX,MAAMC,EAAO3E,EAAE+B,MAAM,YACf6C,EAAOF,EAAE3C,MAAM,YAErB,GAAI4C,GAAQC,EACR,OAAOhB,SAASe,EAAK,IAAMf,SAASgB,EAAK,IAE7C,GAAID,IAASC,EAAM,SACnB,IAAKD,GAAQC,EAAM,OAAO,EAG1B,MAAMC,EAAS,QAAQxG,KAAK2B,GACtB8E,EAAS,QAAQzG,KAAKqG,GAE5B,GAAIG,GAAUC,EACV,OAAOlB,SAAS5D,GAAK4D,SAASc,GAElC,GAAIG,IAAWC,EAAQ,SACvB,IAAKD,GAAUC,EAAQ,OAAO,EAG9B,MAAMC,EAAY,UAAU1G,KAAK2B,GAC3BgF,EAAY,UAAU3G,KAAKqG,GAEjC,GAAIK,GAAaC,EACb,OAAOhF,EAAEiF,cAAcP,GAE3B,GAAIK,IAAcC,EAAW,SAC7B,IAAKD,GAAaC,EAAW,OAAO,EAGpC,MAAME,EAAe,CAAC,QAAS,MAAO,QAAS,UACzCC,EAAWD,EAAaE,QAAQpF,GAChCqF,EAAWH,EAAaE,QAAQV,GAEtC,OAAiB,IAAbS,QAAmBE,EACZF,EAAWE,GAEL,IAAbF,IAAgC,IAAbE,GAAwB,GAC9B,IAAbF,IAAgC,IAAbE,EAAwB,EAGxCrF,EAAEiF,cAAcP,EAC/B,CAEI,eAAA6H,CAAgBF,EAAYle,GACxB,MAAM0e,EAAS,CACX,gBAAiB,GACjB,cAAe,GACf,cAAe,GACf,eAAgB,GAChB,wBAAyB,IAiB7B,OAdAR,EAAW1b,QAAQ5B,IACX,SAASsP,KAAKtP,GACd8d,EAAO,iBAAiBtO,KAAKxP,GACtB,QAAQsP,KAAKtP,GACpB8d,EAAO,eAAetO,KAAKxP,GACpB,UAAUsP,KAAKtP,GACtB8d,EAAO,eAAetO,KAAKxP,GACpBA,EAAIyH,SAAS,KACpBqW,EAAO,yBAAyBtO,KAAKxP,GAErC8d,EAAO,gBAAgBtO,KAAKxP,KAI7B8d,CACf,CAEI,kBAAAX,GACI,MAAO,u8BA2Bf,CAGI,iBAAAY,CAAkBpb,GACd,IACI,MAAM0E,EAAa,CACftG,QAASxJ,SAASuJ,SAASC,QAC3B4P,UAAU,IAAI1N,MAAOC,cACrBhL,KAAM,UACNyK,QAASrL,KAAK0mB,yBAAyBrb,IAGrCqL,EAAUpI,KAAKS,UAAUgB,EAAY,KAAM,GACjD/P,KAAKylB,aAAa/O,EAAS1W,KAAK0lB,iBAAiBra,EAAS,QAAS,oBAEnE2I,MAAMC,UAAU,2BAA4B,UACxD,CAAU,MAAO9U,GACL6U,MAAMC,UAAU,6BAA+B9U,EAAM8G,QAAS,QAC1E,CACA,CAGI,qBAAA0gB,GACI,IACI,MAAM7Y,EAAOR,WAAWO,aAClBkC,EAAa,CACftG,QAASxJ,SAASuJ,SAASC,QAC3B4P,UAAU,IAAI1N,MAAOC,cACrBhL,KAAM,UACNkN,KAAMA,GAGJ4I,EAAUpI,KAAKS,UAAUgB,EAAY,KAAM,GAC3CrJ,EAAW,+BAA8B,IAAIiF,MAAOC,cAAcwP,MAAM,KAAK,UACnFpb,KAAKylB,aAAa/O,EAAShQ,EAAU,oBAErCsN,MAAMC,UAAU,4BAA6B,UACzD,CAAU,MAAO9U,GACL6U,MAAMC,UAAU,6BAA+B9U,EAAM8G,QAAS,QAC1E,CACA,CAGI,aAAA2gB,CAAcvb,GACV,IACI,MAAMwb,EAAa7mB,KAAK8mB,gBAAgBzb,GACxCrL,KAAKylB,aAAaoB,EAAY7mB,KAAK0lB,iBAAiBra,EAAS,OAAQ,YAErE2I,MAAMC,UAAU,uBAAwB,UACpD,CAAU,MAAO9U,GACL6U,MAAMC,UAAU,yBAA2B9U,EAAM8G,QAAS,QACtE,CACA,CAEI,eAAA6gB,CAAgBzb,GACZ,IAAI0b,EAAM,0CAeV,OAbA3c,OAAOC,QAAQgB,EAAQvD,MAAMwC,QAAQ,EAAE5B,EAAKxI,MACxCA,EAASoK,QAAQ,CAAC/J,EAASib,KACvB,MAAMwL,EAAM,CACRhnB,KAAKinB,UAAUve,GACf1I,KAAKinB,UAAU1mB,EAAQA,SACvBP,KAAKinB,UAAU1mB,EAAQK,MACvBZ,KAAKinB,UAAU1mB,EAAQyH,MAAQ,IAC/BwT,EAAQ,GACVY,KAAK,KACP2K,GAAOC,EAAM,SAIdD,CACf,CAEI,SAAAE,CAAU1U,GAKN,MAJqB,iBAAVA,IACPA,EAAQqI,OAAOrI,IAGfA,EAAMpC,SAAS,MAAQoC,EAAMpC,SAAS,MAAQoC,EAAMpC,SAAS,MACtD,IAAMoC,EAAMhH,QAAQ,KAAM,MAAQ,IAGtCgH,CACf,CAGI,gBAAA2U,CAAiB7b,GACb,IACI,MAAM8b,EAAcnnB,KAAKonB,mBAAmB/b,GAC5CrL,KAAKylB,aAAa0B,EAAannB,KAAK0lB,iBAAiBra,EAAS,QAAS,aAEvE2I,MAAMC,UAAU,uBAAwB,UACpD,CAAU,MAAO9U,GACL6U,MAAMC,UAAU,iCAAmC9U,EAAM8G,QAAS,QAC9E,CACA,CAEI,kBAAAmhB,CAAmB/b,GACf,MAAM2U,EAAQ9J,YAAY6J,gBAAgB1U,GACpCwE,GAAY,IAAIlE,MAAOuS,iBAE7B,MAAO,iKAKF7S,EAAQjL,88CAwBPiL,EAAQjL,gDACciL,EAAQG,KAAKsa,6DACRjW,6EAC4B5P,SAASuJ,SAASC,+IAMxCuW,EAAMC,oEACFD,EAAME,yEACLF,EAAMG,uDAIpDngB,KAAKqnB,2BAA2Bhc,EAAQvD,cACxC9H,KAAKsnB,yBAAyBjc,EAAQnD,+SAO5C,CAEI,0BAAAmf,CAA2Bvf,GACvB,IAAKA,GAAqC,IAA7BsC,OAAOtC,KAAKA,GAAMyH,OAC3B,MAAO,gFAGX,MAAMyW,EAAa5b,OAAOtC,KAAKA,GAAMmT,KAAK/E,YAAYiI,YAAY9D,KAAKnE,cACjE+P,EAAYjmB,KAAKkmB,gBAAgBF,EAAYle,GAEnD,IAAIyf,EAAO,+CAuBX,OArBAnd,OAAOC,QAAQ4b,GAAW3b,QAAQ,EAAE6b,EAAWC,MAClB,IAArBA,EAAU7W,SAEdgY,GAAQ,OAAOpB,SAEfC,EAAU9b,QAAQ5B,IACd,MAAMxI,EAAW4H,EAAKY,GAClBxI,GAAYA,EAASqP,OAAS,IAC9BgY,GAAQ,mEACe7e,wFAEbxI,EAAS8G,IAAIuR,GACX,wBAAwBA,EAAI3X,SAAS2X,EAAIvQ,MAAQuQ,EAAIhY,kBACvD6b,KAAK,wEAO3BmL,GAAQ,SACDA,CACf,CAEI,wBAAAD,CAAyBpf,GACrB,IAAKA,GAA2C,IAAhCkC,OAAOtC,KAAKI,GAASqH,OACjC,MAAO,GAGX,IAAIgY,EAAO,gDAWX,OATAnd,OAAOC,QAAQnC,GAAS+S,KAAK,EAAEtB,IAAK0E,KAAO1E,EAAEiF,cAAcP,IAAI/T,QAAQ,EAAElK,EAAMka,MAC3EiN,GAAQ,gEACsBnnB,4BACxBka,EAAMha,YAAc,QAAQga,EAAMha,oBAAsB,mDAC5Bga,EAAMpa,uCAI5CqnB,GAAQ,SACDA,CACf,CAGI,kBAAAhC,GACI,MAAMtD,EAAUxiB,SAASC,eAAe,kBACnCuiB,GAAYA,EAAQ7U,YAAY8G,OAKrCF,MAAMwT,gBAAgBvF,EAAQ7U,aAJ1B4G,MAAMC,UAAU,qBAAsB,UAKlD,CAGI,gBAAAyR,CAAiBra,EAASoc,GACtB,MAAMC,EAAWrc,EAAQjL,KAAKmL,QAAQ,mBAAoB,KACpDsE,GAAY,IAAIlE,MAAOC,cAAcwP,MAAM,KAAK,GAEtD,MAAO,GAAGsM,KADUrc,EAAQG,MAAQ,WACCqE,KAAa4X,GAC1D,CAEI,YAAAhC,CAAa/O,EAAShQ,EAAUihB,GAC5B,MAAMrO,EAAO,IAAIC,KAAK,CAAC7C,GAAU,CAAE9V,KAAM+mB,IACnCnO,EAAMC,IAAIC,gBAAgBJ,GAC1BK,EAAIla,SAASgX,cAAc,KACjCkD,EAAEC,KAAOJ,EACTG,EAAEE,SAAWnT,EACbjH,SAASmoB,KAAKjF,YAAYhJ,GAC1BA,EAAErD,QACF7W,SAASmoB,KAAKC,YAAYlO,GAC1BF,IAAIK,gBAAgBN,EAC5B,CAEI,wBAAAkN,CAAyBrb,GAErB,MAAMyc,EAAYxZ,KAAKC,MAAMD,KAAKS,UAAU1D,IAY5C,OATIyc,EAAUhgB,MACVsC,OAAOgB,OAAO0c,EAAUhgB,MAAMwC,QAAQpK,IAClCA,EAASoK,QAAQ/J,WAENA,EAAQ0H,OAKpB6f,CACf,CAGI,iBAAAC,GACI,MACM7Y,EADO5B,WAAWO,aACFqB,SAEjBA,GAA6C,IAAjC9E,OAAOtC,KAAKoH,GAAUK,QAMvCnF,OAAOC,QAAQ6E,GAAU5E,QAAQ,EAAErC,EAAIoD,MACnC2c,WAAW,KACPhoB,KAAKwW,qBAAqBnL,IAC3B,OAGP2I,MAAMC,UAAU,aAAa7J,OAAOtC,KAAKoH,GAAUK,qBAAsB,SAXrEyE,MAAMC,UAAU,wBAAyB,UAYrD,CAGI,oBAAMgU,CAAepS,GACjB,OAAO,IAAIqS,QAAQ,CAACC,EAASC,KACzB,MAAMrS,EAAS,IAAIC,WAEnBD,EAAOE,OAAUpW,IACb,IACI,MAAM6W,EAAU7W,EAAEP,OAAO8W,OAGzB,OAFkBP,EAAKzV,KAAKgb,MAAM,KAAKiN,MAAM/c,eAGzC,IAAK,MACD6c,EAAQjS,YAAYC,kBAAkBO,IACtC,MACJ,IAAK,OACDyR,EAAQnoB,KAAKsoB,eAAe5R,IAC5B,MACJ,QACI0R,EAAO,IAAI5b,MAAM,4BAE7C,CAAkB,MAAOrN,GACLipB,EAAOjpB,EAC3B,GAGY4W,EAAOwS,QAAU,IAAMH,EAAO,IAAI5b,MAAM,wBACxCuJ,EAAOM,WAAWR,IAE9B,CAEI,cAAAyS,CAAe5R,GACX,IACI,MAAM5I,EAAOQ,KAAKC,MAAMmI,GAExB,GAAkB,YAAd5I,EAAKlN,MAAsBkN,EAAKzC,QAChC,OAAO4G,YAAY8H,cAAcrD,GAC9B,GAAkB,YAAd5I,EAAKlN,MAAsBkN,EAAKA,KACvC,OAAOR,WAAW0C,WAAW1B,KAAKS,UAAUjB,EAAKA,OAEjD,MAAM,IAAItB,MAAM,2BAEhC,CAAU,MAAOrN,GACL,MAAM,IAAIqN,MAAM,sBAAwBrN,EAAM8G,QAC1D,CACA,CAGI,aAAAqN,CAAcjI,GACV,IACI,MAAMqL,EAAU1W,KAAKwoB,kBAAkBnd,GACvCrL,KAAKylB,aAAa/O,EAAS1W,KAAKyoB,sBAAsBpd,EAAS,OAAQ,cAEvE2I,MAAMC,UAAU,gCAAiC,UAC7D,CAAU,MAAO9U,GACL6U,MAAMC,UAAU,6BAA+B9U,EAAM8G,QAAS,QAC1E,CACA,CAEI,iBAAAuiB,CAAkBnd,GACd,IAAIqL,EAAU,GAGd,MAAM7G,GAAY,IAAIlE,MAAOuS,iBACvB8B,EACY5V,OAAOtC,KAAKuD,EAAQnD,SAAW,CAAA,GAAIqH,OAqCrD,OAlCAmH,GAAW,yEACfrL,EAAQjL,+GAEFiL,EAAQG,KAAKsa,+BACRjW,+CAC4B5P,SAASuJ,SAASC,uDAGxCuW,owBAoBT3U,EAAQnD,SAAWkC,OAAOtC,KAAKuD,EAAQnD,SAASqH,OAAS,EACzDmH,GAAW1W,KAAK+lB,qBAAqB1a,EAAQnD,SAE7CwO,GAAW,2BAGRA,CACf,CAEI,qBAAA+R,CAAsBpd,EAASoc,GAC3B,MAAMC,EAAWrc,EAAQjL,KAAKmL,QAAQ,mBAAoB,KACpDsE,GAAY,IAAIlE,MAAOC,cAAcwP,MAAM,KAAK,GAEtD,MAAO,GAAGsM,aADUrc,EAAQG,MAAQ,WACSqE,KAAa4X,GAClE,GLrrBMhU,EAAe,IMtBN,MACX,WAAAhH,GACIzM,KAAK0oB,UAAY,cACzB,CAEI,UAAAC,GACI,OAAOlpB,SAASC,eAAeM,KAAK0oB,UAC5C,CAEI,IAAAhV,CAAKzL,GACD,MAAM2gB,EAAsB,iBAAP3gB,EAAkBxI,SAASC,eAAeuI,GAAMA,EAC/D4gB,EAAU7oB,KAAK2oB,aACrB,GAAIE,GAAWD,EAAO,CAClBC,EAAQxT,UAAUzW,IAAI,UACtBgqB,EAAMvT,UAAUzW,IAAI,UACpBa,SAASmoB,KAAKvS,UAAUzW,IAAI,cAE5B,MAAMkqB,EAAaF,EAAM9H,cAAc,2BAIvC,OAHIgI,GACAd,WAAW,IAAMc,EAAW3U,QAAS,MAElC,CACnB,CACQ,OAAO,CACf,CAEI,IAAAM,CAAKxM,GACD,MAAM2gB,EAAsB,iBAAP3gB,EAAkBxI,SAASC,eAAeuI,GAAMA,EAC/D4gB,EAAU7oB,KAAK2oB,aACrB,SAAIE,IAAWD,KACXA,EAAMvT,UAAUE,OAAO,UAGlB9V,SAASqhB,cAAc,mBACxB+H,EAAQxT,UAAUE,OAAO,UACzB9V,SAASmoB,KAAKvS,UAAUE,OAAO,gBAE5B,EAGnB,GNjBMvB,EAAQ,IOpBC,MACX,WAAAvH,GACIzM,KAAK+oB,WAAa,GAClB/oB,KAAKgpB,UAAY,CACbC,YAAY,EACZC,YAAa,KACbC,SAAU,MAGdnpB,KAAK0N,MACb,CAEI,IAAAA,GACI1N,KAAKopB,4BACLppB,KAAKqpB,eACb,CAGI,SAAApV,CAAUhO,EAASrF,EAAO,OAAQ0oB,EAAW,KACzC,MAAMC,EAAQvpB,KAAKwpB,YAAYvjB,EAASrF,EAAM0oB,GACxCtI,EAAYvhB,SAASC,eAAe,kBAEtCshB,IACAA,EAAU2B,YAAY4G,GAGtBE,sBAAsB,KAClBF,EAAMlU,UAAUzW,IAAI,UAIxBopB,WAAW,KACPhoB,KAAK0pB,YAAYH,IAClBD,GAEf,CAEI,WAAAE,CAAYvjB,EAASrF,EAAM0oB,GACvB,MAAMC,EAAQ9pB,SAASgX,cAAc,OACrC8S,EAAMvG,UAAY,eAAepiB,IAEjC,MAAM+oB,EAAU,CACZlM,QAAS,kBACTte,MAAO,wBACPuC,QAAS,0BACTkoB,KAAM,kBAGVL,EAAMtI,UAAY,4EAEM0I,EAAQ/oB,IAAS+oB,EAAQC,2DACX3jB,oKAatC,OALiBsjB,EAAMzI,cAAc,gBAC5BnhB,iBAAiB,QAAS,KAC/BK,KAAK0pB,YAAYH,KAGdA,CACf,CAEI,SAAAM,CAAUN,GAEFA,GAASA,EAAMO,YACf9pB,KAAK0pB,YAAYH,EAE7B,CAEI,WAAAG,CAAYH,GACRA,EAAMlU,UAAUzW,IAAI,YACpBopB,WAAW,KACHuB,EAAMO,YACNP,EAAMO,WAAWjC,YAAY0B,IAElC,IACX,CAGI,SAAAQ,CAAUC,EAASlc,EAAO,MAGtB,OAFcrO,SAASC,eAAesqB,KAElCvW,aAAaC,KAAKsW,KAGdlc,GACA9N,KAAKiqB,kBAAkBD,EAASlc,IAE7B,EAGnB,CAEI,SAAAoc,CAAUF,GAGN,OAFcvqB,SAASC,eAAesqB,KAElCvW,aAAagB,KAAKuV,KAGlBhqB,KAAKmqB,eAAeH,IAEb,EAGnB,CAEI,aAAAI,GACmB3qB,SAAS0hB,iBAAiB,iBAElC7W,QAAQse,IACXnV,aAAagB,KAAKmU,EAAM3gB,KAEpC,CAEI,iBAAAgiB,CAAkBD,EAASlc,GACvB,MAAM8a,EAAQnpB,SAASC,eAAesqB,GACjCpB,GAGLxe,OAAOC,QAAQyD,GAAMxD,QAAQ,EAAE5B,EAAK6J,MAChC,MAAMwQ,EAAU6F,EAAM9H,cAAc,gBAAgBpY,SAAWA,KAC3Dqa,IACqB,aAAjBA,EAAQniB,KACRmiB,EAAQsH,QAAU9X,EAElBwQ,EAAQxQ,MAAQA,IAIpC,CAEI,cAAA4X,CAAeH,GACX,MAAMpB,EAAQnpB,SAASC,eAAesqB,GACtC,IAAKpB,EAAO,OAEGA,EAAMzH,iBAAiB,2BAC/B7W,QAAQoL,IACQ,aAAfA,EAAM9U,KACN8U,EAAM2U,SAAU,EAEhB3U,EAAMnD,MAAQ,IAG9B,CAGI,WAAA+X,CAAYvH,EAAS/a,EAAO,cAKxB,GAJuB,iBAAZ+a,IACPA,EAAUtjB,SAASC,eAAeqjB,IAGlCA,EAAS,CACTA,EAAQ1N,UAAUzW,IAAI,WACtB,MAAM2rB,EAAkBxH,EAAQ9B,UAChC8B,EAAQ1B,QAAQkJ,gBAAkBA,EAClCxH,EAAQ9B,UAAY,0IAGJjZ,iDAGhB+a,EAAQnB,UAAW,CAC/B,CACA,CAEI,WAAA4I,CAAYzH,GACe,iBAAZA,IACPA,EAAUtjB,SAASC,eAAeqjB,IAGlCA,GAAWA,EAAQ1N,UAAUqL,SAAS,aACtCqC,EAAQ1N,UAAUE,OAAO,WACzBwN,EAAQ9B,UAAY8B,EAAQ1B,QAAQkJ,iBAAmB,GACvDxH,EAAQnB,UAAW,SACZmB,EAAQ1B,QAAQkJ,gBAEnC,CAGI,aAAMxV,CAAQ9O,EAAS2N,EAAQ,UAAWhT,EAAO,WAC7C,OAAO,IAAIsnB,QAASC,IAChB,MAAMsC,EAAezqB,KAAK0qB,mBAAmBzkB,EAAS2N,EAAOhT,GACvD+pB,EAAY,eAClBF,EAAaxiB,GAAK0iB,EAClBlrB,SAASmoB,KAAKjF,YAAY8H,GAE1B,MAAMG,EAAiBxU,IACnB3C,aAAagB,KAAKkW,GAClBlrB,SAASmoB,KAAKC,YAAY4C,GAC1BtC,EAAQ/R,IAGZqU,EAAa3J,cAAc,gBAAgBnhB,iBAAiB,QAAS,KACjEirB,GAAc,KAGlBH,EAAa3J,cAAc,eAAenhB,iBAAiB,QAAS,KAChEirB,GAAc,KAGlBnB,sBAAsB,KAClBhW,aAAaC,KAAKiX,MAGlC,CAEI,kBAAAD,CAAmBzkB,EAAS2N,EAAOhT,GAC/B,MAAMgoB,EAAQnpB,SAASgX,cAAc,OACrCmS,EAAM5F,UAAY,sBAElB,MAAM2G,EAAU,CACZjoB,QAAS,0BACTmpB,OAAQ,wBACRjB,KAAM,kBAqBV,OAlBAhB,EAAM3H,UAAY,0JAIc0I,EAAQ/oB,IAAS+oB,EAAQjoB,0CACvCkS,0HAID3N,8RASV2iB,CACf,CAGI,eAAAkC,CAAgB9J,EAAW1e,EAAU,IACjC,MAAMyoB,aACFA,EAAe,aAAYC,iBAC3BA,EAAmB,aAAYC,YAC/BA,EAAc,KAAIC,UAClBA,EAAY,KAAIC,OAChBA,EAAS,MACT7oB,EAGJ0e,EAAUrhB,iBAAiB,YAAcE,IACjCA,EAAEP,OAAO8rB,QAAQL,KACjB/qB,KAAKgpB,UAAUC,YAAa,EAC5BjpB,KAAKgpB,UAAUE,YAAcrpB,EAAEP,OAC/BU,KAAKgpB,UAAUG,SAAWtpB,EAAEP,OAAO+hB,QAEnCxhB,EAAEP,OAAO+V,UAAUzW,IAAI,YACvBiB,EAAEwrB,aAAaC,cAAgB,OAE3BL,GAAaA,EAAYprB,EAAGG,KAAKgpB,cAI7ChI,EAAUrhB,iBAAiB,UAAYE,IAC/BA,EAAEP,OAAO8rB,QAAQL,KACjBlrB,EAAEP,OAAO+V,UAAUE,OAAO,YAC1BvV,KAAKgpB,UAAUC,YAAa,EAC5BjpB,KAAKgpB,UAAUE,YAAc,KAC7BlpB,KAAKgpB,UAAUG,SAAW,KAEtB+B,GAAWA,EAAUrrB,MAKjCmhB,EAAUrhB,iBAAiB,WAAaE,IACpCA,EAAE8gB,iBACF,MAAM4K,EAAW1rB,EAAEP,OAAO8V,QAAQ4V,GAC9BO,GACAA,EAASlW,UAAUzW,IAAI,eAI/BoiB,EAAUrhB,iBAAiB,YAAcE,IACrC,MAAM0rB,EAAW1rB,EAAEP,OAAO8V,QAAQ4V,GAC9BO,GACAA,EAASlW,UAAUE,OAAO,eAIlCyL,EAAUrhB,iBAAiB,OAASE,IAChCA,EAAE8gB,iBACF,MAAM4K,EAAW1rB,EAAEP,OAAO8V,QAAQ4V,GAC9BO,IACAA,EAASlW,UAAUE,OAAO,aAEtB4V,GACAA,EAAOtrB,EAAGG,KAAKgpB,UAAWuC,KAI9C,CAGI,YAAAC,CAAaC,GACT,MAAMnQ,EAAS,GAqBf,OApBemQ,EAAYtK,iBAAiB,yDAErC7W,QAAQoL,IACX,MAAMnD,EAAQmD,EAAMnD,MAAM2B,OACpBwX,EAAYhW,EAAM2L,QAAQqK,WAAahW,EAAMtV,MAAQsV,EAAMzN,GAE5DsK,GAIDmD,EAAML,UAAUE,OAAO,SAGJ,UAAfG,EAAM9U,MAAqBZ,KAAK2rB,aAAapZ,KAC7C+I,EAAOpD,KAAK,GAAGwT,2BACfhW,EAAML,UAAUzW,IAAI,YARxB0c,EAAOpD,KAAK,GAAGwT,iBACfhW,EAAML,UAAUzW,IAAI,YAYrB,CACHgtB,QAA2B,IAAlBtQ,EAAO/L,OAChB+L,SAEZ,CAEI,YAAAqQ,CAAaE,GAET,MADmB,6BACD7T,KAAK6T,EAC/B,CAGI,qBAAMrE,CAAgBxf,GAClB,IAGI,aAFM8jB,UAAUC,UAAUC,UAAUhkB,GACpChI,KAAKiU,UAAU,sBAAuB,YAC/B,CACnB,CAAU,MAAOhV,GAEL,MAAMgtB,EAAWxsB,SAASgX,cAAc,YACxCwV,EAAS1Z,MAAQvK,EACjBvI,SAASmoB,KAAKjF,YAAYsJ,GAC1BA,EAASC,SAET,IAGI,OAFAzsB,SAAS0sB,YAAY,QACrBnsB,KAAKiU,UAAU,sBAAuB,YAC/B,CACvB,CAAc,MAAOmY,GAEL,OADApsB,KAAKiU,UAAU,8BAA+B,UACvC,CACvB,CAAa,QACGxU,SAASmoB,KAAKC,YAAYoE,EAC1C,CACA,CACA,CAGI,MAAAI,CAAOtJ,EAASuG,EAAW,KACvBvG,EAAQU,MAAM6I,QAAU,IACxBvJ,EAAQU,MAAM3Y,QAAU,QAExB,IAAIyhB,EAAQ,KACZ,MAAMC,EAAW3c,IACR0c,IAAOA,EAAQ1c,GACpB,MAAM4c,EAAW5c,EAAY0c,EACvBD,EAAU1a,KAAK1P,IAAIuqB,EAAWnD,EAAU,GAE9CvG,EAAQU,MAAM6I,QAAUA,EAEpBG,EAAWnD,GACXG,sBAAsB+C,IAI9B/C,sBAAsB+C,EAC9B,CAEI,OAAAE,CAAQ3J,EAASuG,EAAW,KACxB,IAAIiD,EAAQ,KACZ,MAAMC,EAAW3c,IACR0c,IAAOA,EAAQ1c,GACpB,MAAM4c,EAAW5c,EAAY0c,EACvBD,EAAU1a,KAAKzP,IAAI,EAAKsqB,EAAWnD,EAAW,GAEpDvG,EAAQU,MAAM6I,QAAUA,EAEpBG,EAAWnD,EACXG,sBAAsB+C,GAEtBzJ,EAAQU,MAAM3Y,QAAU,QAIhC2e,sBAAsB+C,EAC9B,CAGI,QAAAG,CAASC,EAAMC,GACX,IAAIC,EACJ,OAAO,YAA6BC,GAKhCC,aAAaF,GACbA,EAAU9E,WALI,KACVgF,aAAaF,GACbF,KAAQG,IAGgBF,EACxC,CACA,CAEI,QAAAI,CAASL,EAAMM,GACX,IAAIC,EACJ,OAAO,WACH,MAAMJ,EAAOK,UACP7I,EAAUvkB,KACXmtB,IACDP,EAAKS,MAAM9I,EAASwI,GACpBI,GAAa,EACbnF,WAAW,IAAMmF,GAAa,EAAOD,GAErD,CACA,CAGI,yBAAA9D,GAEI3pB,SAASE,iBAAiB,UAAYE,IACpB,WAAVA,EAAE6I,KACF1I,KAAKoqB,kBAKb3qB,SAASE,iBAAiB,QAAUE,IAC5BA,EAAEP,OAAO+V,UAAUqL,SAAS,kBAC5B1gB,KAAKoqB,iBAGrB,CAEI,aAAAf,GAEI5pB,SAASE,iBAAiB,aAAeE,IACjCA,EAAEP,QAA2C,mBAA1BO,EAAEP,OAAOguB,cAC5BztB,EAAEP,OAAOguB,aAAa,UAAYztB,EAAEP,OAAOiuB,aAAa,SAASrZ,QACjElU,KAAKwtB,YAAY3tB,EAAEP,OAAQO,EAAEP,OAAOiuB,aAAa,YAEtD,GAEH9tB,SAASE,iBAAiB,aAAeE,IACjCA,EAAEP,QAA2C,mBAA1BO,EAAEP,OAAOguB,cAC5BztB,EAAEP,OAAOguB,aAAa,UACtBttB,KAAKytB,gBAEV,EACX,CAEI,WAAAD,CAAYzK,EAAS/a,GACjBhI,KAAKytB,cAEL,MAAMC,EAAUjuB,SAASgX,cAAc,OACvCiX,EAAQ1K,UAAY,UACpB0K,EAAQtgB,YAAcpF,EACtB0lB,EAAQzlB,GAAK,iBAEbxI,SAASmoB,KAAKjF,YAAY+K,GAG1B,MAAMC,EAAO5K,EAAQ6K,wBACfC,EAAcH,EAAQE,wBAE5B,IAAIE,EAAOH,EAAKG,KAAQH,EAAKI,MAAQ,EAAMF,EAAYE,MAAQ,EAC3DC,EAAML,EAAKK,IAAMH,EAAYI,OAAS,EAGtCH,EAAO,IAAGA,EAAO,GACjBA,EAAOD,EAAYE,MAAQhuB,OAAOmuB,WAAa,IAC/CJ,EAAO/tB,OAAOmuB,WAAaL,EAAYE,MAAQ,GAE/CC,EAAM,IACNA,EAAML,EAAKQ,OAAS,EACpBT,EAAQrY,UAAUzW,IAAI,mBAG1B8uB,EAAQjK,MAAMqK,KAAOA,EAAO,KAC5BJ,EAAQjK,MAAMuK,IAAMA,EAAM,KAG1BvE,sBAAsB,KAClBiE,EAAQrY,UAAUzW,IAAI,SAElC,CAEI,WAAA6uB,GACI,MAAMC,EAAUjuB,SAASC,eAAe,kBACpCguB,GACAA,EAAQnY,QAEpB,GPteM2H,EAAc,IQrBL,MACX,WAAAzQ,GACIzM,KAAKouB,eAAiB,KACtBpuB,KAAKquB,gBAAkB,IAAIC,IAC3BtuB,KAAK0N,MACb,CAEI,IAAAA,GACI1N,KAAKuuB,uBACLvuB,KAAKmS,qBACb,CAGI,oBAAAoc,GAEIvuB,KAAKquB,gBAAgBG,IAAI,YAAa,CAClCpd,MAAO,CAACqd,EAAWC,EAAS,MACxB,MAAMnW,EAAMtY,SAASC,SAASC,UAAUD,SAASuuB,GACjD,OAAKlW,EAEE,CACHhY,QAASgY,EAAIhY,QACbK,KAAM,YACNP,KAAMkY,EAAIlY,KACV2H,KAAMuQ,EAAInY,KACVE,YAAaiY,EAAIjY,aAPJ,MAUrBquB,MAAO,IAAM3uB,KAAK4uB,sBAItB5uB,KAAKquB,gBAAgBG,IAAI,SAAU,CAC/Bpd,MAAO,CAACqd,EAAWC,EAAS,MACxB,MAAMnW,EAAMtY,SAASC,SAASqB,OAAOrB,SAASuuB,GAC9C,OAAKlW,EAEE,CACHhY,QAASgY,EAAIhY,QACbK,KAAM,SACNP,KAAMkY,EAAIlY,KACV2H,KAAMuQ,EAAInY,KACVE,YAAaiY,EAAIjY,aAPJ,MAUrBquB,MAAO,IAAM3uB,KAAK6uB,mBAItB7uB,KAAKquB,gBAAgBG,IAAI,OAAQ,CAC7Bpd,MAAO,CAACqd,EAAWC,EAAS,MACxB,MAAM1sB,EAAO0sB,EAAO1sB,MAAQ,EACtBI,EAAOssB,EAAOtsB,MAAQ,EAG5B,GAAkB,qBAAdqsB,EAAkC,CAClC,MAAMK,EAAaJ,EAAOjsB,aAAe,EACnCssB,EAAaL,EAAOhsB,aAAe,EACnCF,EAASksB,EAAOlsB,QAAU,KAEhC,MAAO,CACHjC,QAAS,4BAA4ByB,KAAQI,KAAQ0sB,KAAcC,KAAyB,OAAXvsB,EAAkB,EAAI,IACvG5B,KAAM,OACNP,KAAM,IACN2H,KAAM,gBAAgBhG,EAAO,UAAUI,EAAO,kBAC9C9B,YAAa,2BAA2B0B,EAAO,WAAWI,EAAO,yBAAyB0sB,EAAa,WAAWC,EAAa,IAC/HruB,WAAY,CAAEsB,OAAMI,OAAMK,YAAaqsB,EAAYpsB,YAAaqsB,EAAYvsB,UAEpG,CAGgB,GAAkB,eAAdisB,EAA4B,CAC5B,MAAMO,EAAYN,EAAO9rB,YAAc,EACjCqsB,EAAYP,EAAO7rB,YAAc,EACjCqsB,EAAUR,EAAO5rB,UAAY,EAC7BqsB,EAAUT,EAAO3rB,UAAY,EAC7BqsB,EAAcV,EAAOrsB,cAAgB,oBAK3C,OAHiBrC,KAAKqvB,0BAA0BL,EAAWC,EAAWC,EAASC,EAASC,GAGxEpoB,IAAI,CAACuR,EAAKiD,KAAK,CAC3Bjb,QAASgY,EACT3X,KAAM,OACNP,KAAM,IACN2H,KAAgB,IAAVwT,EAAc,uBAAuBwT,EAAY,UAAUC,EAAY,aAAaC,EAAU,UAAUC,EAAU,IAAM5W,EAC9HjY,YAAuB,IAAVkb,EAAc,+BAA+BwT,EAAY,UAAUC,EAAY,aAAaC,EAAU,UAAUC,EAAU,IAAM5W,EAC7I7X,WAAsB,IAAV8a,EAAc,CAAE5Y,WAAYosB,EAAWnsB,WAAYosB,EAAWnsB,SAAUosB,EAASnsB,SAAUosB,EAAS9sB,aAAc+sB,QAAgBE,IAEtK,CAGgB,GAAkB,2BAAdb,EAAwC,CACxC,MAAMjsB,EAASksB,EAAOlsB,QAAU,EAC1BwsB,EAAYN,EAAO9rB,YAAc,EACjCqsB,EAAYP,EAAO7rB,YAAc,EACjCqsB,EAAUR,EAAO5rB,UAAY,EAC7BqsB,EAAUT,EAAO3rB,UAAY,EAC7BwsB,EAAkBb,EAAOzrB,mBAAqB,EAC9CusB,EAAkBd,EAAOxrB,mBAAqB,EAC9CusB,EAAgBf,EAAOvrB,iBAAmB,EAC1CusB,EAAgBhB,EAAOtrB,iBAAmB,EAQhD,OANiBpD,KAAK2vB,oCAClBntB,EAAQwsB,EAAWC,EAAWC,EAASC,EACvCI,EAAiBC,EAAiBC,EAAeC,GAIrC1oB,IAAI,CAACuR,EAAKiD,KAAK,CAC3Bjb,QAASgY,EACT3X,KAAM,OACNP,KAAM,IACN2H,KAAgB,IAAVwT,EAAc,mCAAmCwT,EAAY,KAAKE,EAAU,IAAM3W,EACxFjY,YAAuB,IAAVkb,EAAc,+BAA+BwT,EAAY,QAAQE,EAAU,sBAAwB3W,EAChH7X,WAAsB,IAAV8a,EAAc,CACtBhZ,SAAQI,WAAYosB,EAAWnsB,WAAYosB,EAAWnsB,SAAUosB,EAASnsB,SAAUosB,EACnFlsB,kBAAmBssB,EAAiBrsB,kBAAmBssB,EACvDrsB,gBAAiBssB,EAAersB,gBAAiBssB,QACjDJ,IAE5B,CAGgB,GAAkB,eAAdb,EAA4B,CAC5B,MAAMW,EAAcV,EAAOrsB,cAAgB,oBAI3C,OAHiBrC,KAAK4vB,0BAA0B5tB,EAAMotB,GAGtCpoB,IAAI,CAACuR,EAAKiD,KAAK,CAC3Bjb,QAASgY,EACT3X,KAAM,OACNP,KAAM,IACN2H,KAAgB,IAAVwT,EAAc,sBAAsBxZ,EAAO,IAAMuW,EACvDjY,YAAuB,IAAVkb,EAAc,iCAAiCxZ,EAAO,IAAMuW,EACzE7X,WAAsB,IAAV8a,EAAc,CAAExZ,OAAMK,aAAc+sB,QAAgBE,IAExF,CAGgB,GAAkB,2BAAdb,EAAwC,CACxC,MAAMjsB,EAASksB,EAAOlsB,QAAU,EAC1BssB,EAAaJ,EAAOjsB,aAAe,EAKzC,OAHiBzC,KAAK6vB,oCAAoCrtB,EAAQR,EAAM8sB,GAGxD9nB,IAAI,CAACuR,EAAKiD,KAAK,CAC3Bjb,QAASgY,EACT3X,KAAM,OACNP,KAAM,IACN2H,KAAgB,IAAVwT,EAAc,sBAAsBxZ,EAAO,uBAAuB8sB,EAAa,KAAOvW,EAC5FjY,YAAuB,IAAVkb,EAAc,iCAAiCxZ,EAAO,2BAA2B8sB,EAAa,IAAMvW,EACjH7X,WAAsB,IAAV8a,EAAc,CAAEhZ,SAAQR,OAAMS,YAAaqsB,QAAeQ,IAE9F,CAGgB,MAAMF,EAAcV,EAAOrsB,cAAgB,oBAG3C,MAAO,CACH9B,QAAS,IAAY6uB,KAAeptB,KAAQI,IAC5CxB,KAAM,OACNP,KAAM,IACN2H,KAAM,gBAAgBhG,EAAO,UAAUI,EAAO,IAC9C9B,YAAa,2BAA2B0B,EAAO,WAAWI,EAAO,IACjE1B,WAAY,CAAEsB,OAAMI,OAAMC,aAAc+sB,KAGhDT,MAAO,IAAM3uB,KAAK8vB,iBAItB9vB,KAAKquB,gBAAgBG,IAAI,QAAS,CAC9Bpd,MAAO,CAACqd,EAAWC,EAAS,MACxB,MAAMnW,EAAMtY,SAASC,SAASqD,MAAMrD,SAASuuB,GAC7C,OAAKlW,EAEE,CACHhY,QAASgY,EAAIhY,QACbK,KAAM,QACNP,KAAMkY,EAAIlY,KACV2H,KAAMuQ,EAAInY,KACVE,YAAaiY,EAAIjY,aAPJ,MAUrBquB,MAAO,IAAM3uB,KAAK+vB,kBAItB/vB,KAAKquB,gBAAgBG,IAAI,WAAY,CACjCpd,MAAO,CAACqd,EAAWC,EAAS,MACxB,MAAMnW,EAAMtY,SAASC,SAAS2D,SAAS3D,SAASuuB,GAChD,IAAKlW,EAAK,OAAO,KAEjB,IAAIhY,EAAUgY,EAAIhY,QAWlB,OARIgY,EAAI9X,cAAgBiuB,IACF,oBAAdD,QAAqDa,IAAlBZ,EAAOzqB,OAC1C1D,EAAU,GAAGgY,EAAIhY,WAAWmuB,EAAOzqB,SACd,iBAAdwqB,QAAoDa,IAApBZ,EAAOtqB,WAC9C7D,EAAU,GAAGgY,EAAIhY,WAAWmuB,EAAOtqB,aAIpC,CACH7D,QAASA,EACTK,KAAM,WACNP,KAAMkY,EAAIlY,KACV2H,KAAMuQ,EAAInY,KACVE,YAAaiY,EAAIjY,cAGzBquB,MAAO,IAAM3uB,KAAKgwB,qBAItBhwB,KAAKquB,gBAAgBG,IAAI,SAAU,CAC/Bpd,MAAO,CAACqd,EAAWC,EAAS,MACxB,MAAMnW,EAAMtY,SAASC,SAAS+E,OAAO/E,SAASuuB,GAC9C,IAAKlW,EAAK,OAAO,KAEjB,IAAIhY,EAAUgY,EAAIhY,QASlB,OANIgY,EAAI9X,cAAgBiuB,GACF,iBAAdD,QAAoDa,IAApBZ,EAAOnpB,WACvChF,EAAU,GAAGgY,EAAIhY,WAAWmuB,EAAOnpB,YAIpC,CACHhF,QAASA,EACTK,KAAM,SACNP,KAAMkY,EAAIlY,KACV2H,KAAMuQ,EAAInY,KACVE,YAAaiY,EAAIjY,cAGzBquB,MAAO,IAAM3uB,KAAKiwB,mBAItBjwB,KAAKquB,gBAAgBG,IAAI,gBAAiB,CACtCpd,MAAO,CAACqd,EAAWC,EAAS,MACxB,MAAMnW,EAAMtY,SAASC,SAAS6F,cAAc7F,SAASuuB,GACrD,IAAKlW,EAAK,OAAO,KAEjB,MAAMtS,EAAUyoB,EAAOzoB,SAAW,oBAElC,MAAO,CACH1F,QAAS,GAAGgY,EAAIhY,WAAW0F,IAC3BrF,KAAM,gBACNP,KAAMkY,EAAIlY,KACV2H,KAAM,GAAGuQ,EAAInY,SAAS6F,IACtB3F,YAAaiY,EAAIjY,YACjBI,WAAY,CAAEuF,aAGtB0oB,MAAO,IAAM3uB,KAAKkwB,0BAItBlwB,KAAKquB,gBAAgBG,IAAI,SAAU,CAC/Bpd,MAAO,CAACqd,EAAWC,EAAS,MACxB,MAAMnW,EAAMtY,SAASC,SAASkG,OAAOlG,SAASuuB,GAC9C,IAAKlW,EAAK,OAAO,KAEjB,IAAIhY,EAAUgY,EAAIhY,QAWlB,OARIgY,EAAI9X,cAAgBiuB,IACD,mBAAdD,GAAgD,mBAAdA,IAAmCC,EAAOhoB,SAExD,eAAd+nB,QAA+Ca,IAAjBZ,EAAO7nB,QAC5CtG,EAAU,GAAGgY,EAAIhY,WAAWmuB,EAAO7nB,SAFnCtG,EAAU,GAAGgY,EAAIhY,WAAWmuB,EAAOhoB,YAMpC,CACHnG,QAASA,EACTK,KAAM,SACNP,KAAMkY,EAAIlY,KACV2H,KAAMuQ,EAAInY,KACVE,YAAaiY,EAAIjY,cAGzBquB,MAAO,IAAM3uB,KAAKmwB,mBAItBnwB,KAAKquB,gBAAgBG,IAAI,QAAS,CAC9Bpd,MAAO,CAACqd,EAAWC,EAAS,MACxB,MAAM/S,EAAY+S,EAAO0B,YAAc,GAEvC,OAAKzU,EAAUzH,OAIR,CACH3T,QAASob,EACT/a,KAAM,QACNP,KAAM,KACN2H,KAAM,UAAU2T,IAChBrb,YAAa,uBACbI,WAAY,CAAE0vB,WAAYzU,IATnB,MAYfgT,MAAO,IAAM3uB,KAAKqwB,kBAItBrwB,KAAKquB,gBAAgBG,IAAI,SAAU,CAC/Bpd,MAAO,CAACqd,EAAWC,EAAS,MACxB,MAAMnuB,EAAUmuB,EAAOnuB,SAAW,GAC5ByH,EAAO0mB,EAAO1mB,MAAQ,iBAE5B,MAAO,CACHzH,QAASA,EACTK,KAAM,SACNP,KAAM,KACN2H,KAAMA,EACN1H,YAAa,iBACbI,WAAY,CAAEH,UAASyH,UAG/B2mB,MAAO,IAAM3uB,KAAKswB,kBAE9B,CAGI,iBAAA1B,GACI,MAAM1uB,EAAWD,SAASC,SAASC,UAAUD,SAE7C,MAAO,0QAKOkK,OAAOC,QAAQnK,GAAU8G,IAAI,EAAEiB,EAAIsQ,KACjC,kBAAkBtQ,MAAOsQ,EAAInY,iBAC/Bgc,KAAK,8DAI3B,CAEI,cAAAyS,GACI,MAAM3uB,EAAWD,SAASC,SAASqB,OAAOrB,SAE1C,MAAO,8PAKOkK,OAAOC,QAAQnK,GAAU8G,IAAI,EAAEiB,EAAIsQ,KACjC,kBAAkBtQ,MAAOsQ,EAAInY,iBAC/Bgc,KAAK,iTAQ3B,CAEI,YAAA0T,GACI,MAAO,spCAoBmB/U,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAC3B,kBAAkBA,WAAWA,EAAI,cACnC0B,KAAK,iSAMLrB,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAC3B,kBAAkBA,WAAWA,EAAI,cACnC0B,KAAK,mmBAaLrB,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAC3B,kBAAkBA,WAAWA,EAAI,cACnC0B,KAAK,6SAMLrB,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAC3B,kBAAkBA,WAAWA,EAAI,cACnC0B,KAAK,68BAoBLrB,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAC3B,kBAAkBA,WAAWA,EAAI,cACnC0B,KAAK,0SAMLrB,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAC3B,kBAAkBA,WAAWA,EAAI,cACnC0B,KAAK,4WAQLrB,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAC3B,kBAAkBA,WAAWA,EAAI,cACnC0B,KAAK,oSAMLrB,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAC3B,kBAAkBA,WAAWA,EAAI,cACnC0B,KAAK,ooBAaLrB,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAC3B,kBAAkBA,WAAWA,EAAI,cACnC0B,KAAK,6TAMLrB,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAC3B,kBAAkBA,WAAWA,EAAI,cACnC0B,KAAK,+XAQLrB,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAC3B,kBAAkBA,WAAWA,EAAI,cACnC0B,KAAK,uTAMLrB,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAC3B,kBAAkBA,WAAWA,EAAI,cACnC0B,KAAK,++BAsBvC,CAEI,aAAA2T,GACI,MAAM7vB,EAAWD,SAASC,SAASqD,MAAMrD,SAEzC,MAAO,4PAKOkK,OAAOC,QAAQnK,GAAU8G,IAAI,EAAEiB,EAAIsQ,KACjC,kBAAkBtQ,MAAOsQ,EAAInY,iBAC/Bgc,KAAK,+SAQ3B,CAEI,gBAAA4T,GACI,MAAM9vB,EAAWD,SAASC,SAAS2D,SAAS3D,SAE5C,MAAO,sQAKOkK,OAAOC,QAAQnK,GAAU8G,IAAI,EAAEiB,EAAIsQ,KACjC,kBAAkBtQ,MAAOsQ,EAAInY,iBAC/Bgc,KAAK,sqBAc3B,CAEI,qBAAA8T,GACI,MAAMhwB,EAAWD,SAASC,SAAS6F,cAAc7F,SAEjD,MAAO,iUAMWkK,OAAOC,QAAQnK,GAAU8G,IAAI,EAAEiB,EAAIsQ,KACjC,kBAAkBtQ,MAAOsQ,EAAInY,iBAC/Bgc,KAAK,qnCAsB/B,CAEI,cAAA6T,GACI,MAAM/vB,EAAWD,SAASC,SAAS+E,OAAO/E,SAE1C,MAAO,8PAKOkK,OAAOC,QAAQnK,GAAU8G,IAAI,EAAEiB,EAAIsQ,KACjC,kBAAkBtQ,MAAOsQ,EAAInY,iBAC/Bgc,KAAK,uYAU3B,CAEI,cAAA+T,GACI,MAAMjwB,EAAWD,SAASC,SAASkG,OAAOlG,SAE1C,MAAO,8PAKOkK,OAAOC,QAAQnK,GAAU8G,IAAI,EAAEiB,EAAIsQ,KACjC,kBAAkBtQ,MAAOsQ,EAAInY,iBAC/Bgc,KAAK,wmBAc3B,CAEI,aAAAiU,GAEI,MAAMhlB,EAAUgH,KAAK0B,oBACf7L,EAAUmD,GAASnD,SAAW,GAC9BsoB,EAAepmB,OAAOC,QAAQnC,GAEpC,OAA4B,IAAxBsoB,EAAajhB,OACN,+hBAcJ,8SAMWihB,EAAaxpB,IAAI,EAAE5G,EAAMka,KACvB,kBAAkBla,MAASA,IAAOka,EAAMha,YAAc,MAAQga,EAAMha,YAAc,eACpF8b,KAAK,kZAW/B,CAEI,cAAAkU,GACI,MAAO,mqEAmCf,CAGI,mBAAAne,GAEI1S,SAASE,iBAAiB,SAAWE,IACb,gBAAhBA,EAAEP,OAAO2I,IACTjI,KAAKywB,wBAAwB5wB,EAAEP,OAAOiT,SAK9C9S,SAASE,iBAAiB,SAAWE,IACb,eAAhBA,EAAEP,OAAO2I,IAAuC,eAAhBpI,EAAEP,OAAO2I,KACzCjI,KAAK0wB,mBACL1wB,KAAK2wB,0BAKblxB,SAASE,iBAAiB,QAAUE,IACZ,gBAAhBA,EAAEP,OAAO2I,IACTjI,KAAK2wB,yBAKblxB,SAASE,iBAAiB,QAAUE,IACZ,kBAAhBA,EAAEP,OAAO2I,IAA0C,eAAhBpI,EAAEP,OAAO2I,IAC5CjI,KAAK2wB,yBAKblxB,SAASE,iBAAiB,QAAUE,IAChC,GAAIA,EAAEP,OAAO+V,UAAUqL,SAAS,eAAgB,CAC5C,MAAMnI,EAAM1Y,EAAEP,OAAO+hB,QAAQ9I,IACvB7C,EAAQjW,SAASC,eAAe,iBAClCgW,IACAA,EAAMnD,MAAQgG,EACdvY,KAAK2wB,uBAEzB,IAIQlxB,SAASE,iBAAiB,QAAUE,IAChC,GAAIA,EAAEP,OAAO+V,UAAUqL,SAAS,sBAAwB7gB,EAAEP,OAAO8V,QAAQ,sBAAuB,CAC5FvV,EAAE8gB,iBACF,MACMiQ,GADS/wB,EAAEP,OAAO+V,UAAUqL,SAAS,qBAAuB7gB,EAAEP,OAASO,EAAEP,OAAO8V,QAAQ,uBAChEA,QAAQ,sBAChCM,EAAQkb,EAAiBA,EAAe9P,cAAc,SAAW,KAEnEpL,GACA1V,KAAK+gB,qBAAqBrL,EAE9C,IAIQjW,SAASE,iBAAiB,SAAWE,IACR,CACrB,mBAAoB,gBAAiB,eACrC,kBAAmB,gBAAiB,gBAAiB,cAAe,eAGnDsQ,SAAStQ,EAAEP,OAAO2I,KACnCjI,KAAK2wB,wBAGrB,CAGI,uBAAAF,CAAwB7vB,GACpB,MAAMiwB,EAAUpxB,SAASC,eAAe,kBAClCuiB,EAAUxiB,SAASC,eAAe,uBAClCoxB,EAAUrxB,SAASC,eAAe,kBAExC,GAAKmxB,EAEL,GAAIjwB,GAAQZ,KAAKquB,gBAAgB0C,IAAInwB,GAAO,CACxC,MAAMowB,EAAKhxB,KAAKquB,gBAAgB4C,IAAIrwB,GAAM+tB,QAC1CkC,EAAQ5P,UAAY+P,EAGpBhxB,KAAKkxB,2BAA2BtwB,GAG5BkwB,IAASA,EAAQlP,UAAW,GAGhC5hB,KAAK2wB,sBACjB,MACYE,EAAQ5P,UAAY,wEAChBgB,IAASA,EAAQ7U,YAAc,wCAC/B0jB,IAASA,EAAQlP,UAAW,EAE5C,CAEI,0BAAAsP,CAA2BtwB,GACvB,GAAa,SAATA,EAAiB,CACjBZ,KAAK0wB,mBAGL,MAAMS,EAAkB1xB,SAASC,eAAe,mBAC5CyxB,IACAA,EAAgBxxB,iBAAiB,SAAU,KACvCK,KAAKoxB,yBAAyBD,EAAgB5e,OAC9CvS,KAAK2wB,yBAIT3wB,KAAKoxB,yBAAyBD,EAAgB5e,QAInC,CACX,aAAc,aAAc,mBAAoB,mBAAoB,cACpE,kBAAmB,kBAAmB,gBAAiB,gBACvD,wBAAyB,wBAAyB,sBAAuB,sBACzE,sBAGGjI,QAAQ+mB,IACX,MAAM3b,EAAQjW,SAASC,eAAe2xB,GAClC3b,GACAA,EAAM/V,iBAAiB,SAAU,KAC7BK,KAAK0wB,mBACL1wB,KAAK2wB,0BAI7B,MAAe,GAAa,UAAT/vB,EAAkB,CAEzB,MAAM0wB,EAAc7xB,SAASC,eAAe,gBACxC4xB,GACAA,EAAY3xB,iBAAiB,SAAU,KACnCK,KAAKuxB,iBAAiBD,EAAY/e,QAGtD,MAAe,GAAa,WAAT3R,EAAmB,CAE1B,MAAM4wB,EAAe/xB,SAASC,eAAe,iBACzC8xB,GACAA,EAAa7xB,iBAAiB,SAAU,KACpCK,KAAKyxB,kBAAkBD,EAAajf,QAGxD,MAAe,GAAa,UAAT3R,EAAkB,CAEzB,MAAM8wB,EAAcjyB,SAASC,eAAe,eACxCgyB,GACAA,EAAY/xB,iBAAiB,SAAU,KACnCK,KAAKygB,mBAAmBiR,EAAYnf,OACpCvS,KAAK2wB,yBAKb,MAAMgB,EAAYlyB,SAASC,eAAe,oBACtCiyB,GACAA,EAAUhyB,iBAAiB,QAAS,KACN,oBAAfiX,YAA8BA,WAAW0J,iBAChD1J,WAAW0J,oBAEXtM,MAAMkW,UAAU,mBAChBlW,MAAM+V,UAAU,uBAIxC,CACA,CAGI,wBAAAqH,CAAyBhC,GACrB,MAAMwC,EAAW,CACbC,iBAAkBpyB,SAASC,eAAe,oBAC1CoyB,aAAcryB,SAASC,eAAe,gBACtCqyB,YAAatyB,SAASC,eAAe,eACrCsyB,kBAAmBvyB,SAASC,eAAe,qBAC3CuyB,kBAAmBxyB,SAASC,eAAe,sBAS/C,OALA0K,OAAOgB,OAAOwmB,GAAUtnB,QAAQ4nB,IACxBA,IAASA,EAAQzO,MAAM3Y,QAAU,UAIjCskB,GACJ,IAAK,cAqBL,IAAK,aACGwC,EAASC,mBAAkBD,EAASC,iBAAiBpO,MAAM3Y,QAAU,SACrE8mB,EAASK,oBAAmBL,EAASK,kBAAkBxO,MAAM3Y,QAAU,SAC3E,MAnBJ,IAAK,mBAqBL,IAAK,yBACG8mB,EAASC,mBAAkBD,EAASC,iBAAiBpO,MAAM3Y,QAAU,SACrE8mB,EAASE,eAAcF,EAASE,aAAarO,MAAM3Y,QAAU,SACjE,MAnBJ,IAAK,aACG8mB,EAASG,cAAaH,EAASG,YAAYtO,MAAM3Y,QAAU,SAC3D8mB,EAASK,oBAAmBL,EAASK,kBAAkBxO,MAAM3Y,QAAU,SAC3E,MAEJ,IAAK,yBACG8mB,EAASG,cAAaH,EAASG,YAAYtO,MAAM3Y,QAAU,SAC3D8mB,EAASI,oBAAmBJ,EAASI,kBAAkBvO,MAAM3Y,QAAU,SACvE8mB,EAASE,eAAcF,EAASE,aAAarO,MAAM3Y,QAAU,SAajF,CAGI,gBAAAymB,CAAiB9C,GACb,MAAM0D,EAAa1yB,SAASC,eAAe,uBACrC0yB,EAAc3yB,SAASC,eAAe,oBAE5C,GAAKyyB,GAAeC,EAApB,CAEA,GAAI3D,GAAaxuB,SAASC,SAASqD,MAAMrD,SAASuuB,GAAY,CAC1D,MAAMluB,EAAUN,SAASC,SAASqD,MAAMrD,SAASuuB,GACjD,GAAIluB,EAAQmB,QAGR,OAFA0wB,EAAYhlB,YAAc7M,EAAQmB,aAClCywB,EAAW1O,MAAM3Y,QAAU,QAG3C,CAGQqnB,EAAW1O,MAAM3Y,QAAU,MAZM,CAazC,CAGI,iBAAA2mB,CAAkBhD,GACd,MAAM0D,EAAa1yB,SAASC,eAAe,wBACrC0yB,EAAc3yB,SAASC,eAAe,qBAE5C,GAAKyyB,GAAeC,EAApB,CAEA,GAAI3D,GAAaxuB,SAASC,SAASqB,OAAOrB,SAASuuB,GAAY,CAC3D,MAAMluB,EAAUN,SAASC,SAASqB,OAAOrB,SAASuuB,GAClD,GAAIluB,EAAQmB,QAGR,OAFA0wB,EAAYhlB,YAAc7M,EAAQmB,aAClCywB,EAAW1O,MAAM3Y,QAAU,QAG3C,CAGQqnB,EAAW1O,MAAM3Y,QAAU,MAZM,CAazC,CAEI,kBAAA2V,CAAmB9E,GACf,MAAM0W,EAAiB5yB,SAASC,eAAe,uBACzCuiB,EAAUxiB,SAASC,eAAe,wBAExC,GAAK2yB,GAAmBpQ,EAExB,GAAItG,EAAW,CACX,MAAMtQ,EAAUgH,KAAK0B,oBACfuG,EAAQjP,GAASnD,UAAUyT,GAE7BrB,GACA2H,EAAQ7U,YAAckN,EAAMpa,SAC5BmyB,EAAe5O,MAAM3Y,QAAU,SAE/BunB,EAAe5O,MAAM3Y,QAAU,MAE/C,MACYunB,EAAe5O,MAAM3Y,QAAU,MAE3C,CAGI,oBAAA6lB,GACI,MAAM1O,EAAUxiB,SAASC,eAAe,uBACxC,IAAKuiB,EAED,YADA/iB,QAAQmS,IAAI,gDAIhB,MAAM9Q,EAAUP,KAAKsyB,sBAGrB,GAFApzB,QAAQmS,IAAI,uCAAwC9Q,GAEhDA,EAAS,CAET,GAAIwa,MAAMwX,QAAQhyB,GAAU,CACxBrB,QAAQmS,IAAI,uCAAwC9Q,EAAQgP,QAC5D,MAAM8M,EAAiB9b,EAAQyG,IAAIuR,GAAOA,EAAIhY,SAC9CrB,QAAQmS,IAAI,0BAA2BgL,GACvC4F,EAAQ7U,YAAciP,EAAeD,KAAK,OAC1D,MACgBld,QAAQmS,IAAI,mCAAoC9Q,EAAQA,SACxD0hB,EAAQ7U,YAAc7M,EAAQA,QAElC0hB,EAAQe,UAAY,uBAChC,MACY9jB,QAAQmS,IAAI,uDACZ4Q,EAAQ7U,YAAc,2CACtB6U,EAAQe,UAAY,iBAEhC,CAGI,mBAAAsP,GACI,MAAME,EAAa/yB,SAASC,eAAe,eAC3C,IAAK8yB,IAAeA,EAAWjgB,MAAO,OAAO,KAE7C,MAAM3R,EAAO4xB,EAAWjgB,MAClBse,EAAU7wB,KAAKquB,gBAAgB4C,IAAIrwB,GACzC,IAAKiwB,EAAS,OAAO,KAErB,IAAIpC,EAAY,KACZC,EAAS,CAAA,EAEb,OAAQ9tB,GACJ,IAAK,YACD6tB,EAAYhvB,SAASC,eAAe,qBAAqB6S,MACzD,MAEJ,IAAK,SACDkc,EAAYhvB,SAASC,eAAe,kBAAkB6S,MACtD,MAEJ,IAAK,OAGD,OAFAkc,EAAYhvB,SAASC,eAAe,oBAAoB6S,OAAS,cAEzDkc,GACJ,IAAK,cACDC,EAAS,CACL1sB,KAAMub,SAAS9d,SAASC,eAAe,eAAe6S,OAAS,GAC/DnQ,KAAMmb,SAAS9d,SAASC,eAAe,eAAe6S,OAAS,GAC/DlQ,aAAc5C,SAASC,eAAe,uBAAuB6S,OAAS,qBAE1E,MAEJ,IAAK,mBACDmc,EAAS,CACL1sB,KAAMub,SAAS9d,SAASC,eAAe,eAAe6S,OAAS,GAC/DnQ,KAAMmb,SAAS9d,SAASC,eAAe,eAAe6S,OAAS,GAC/D9P,YAAa8a,SAAS9d,SAASC,eAAe,qBAAqB6S,OAAS,GAC5E7P,YAAa6a,SAAS9d,SAASC,eAAe,qBAAqB6S,OAAS,GAC5E/P,OAAQ+a,SAAS9d,SAASC,eAAe,gBAAgB6S,OAAS,IAEtE,MAEJ,IAAK,aACDmc,EAAS,CACL9rB,WAAY2a,SAAS9d,SAASC,eAAe,oBAAoB6S,OAAS,GAC1E1P,WAAY0a,SAAS9d,SAASC,eAAe,oBAAoB6S,OAAS,GAC1EzP,SAAUya,SAAS9d,SAASC,eAAe,kBAAkB6S,OAAS,GACtExP,SAAUwa,SAAS9d,SAASC,eAAe,kBAAkB6S,OAAS,GACtElQ,aAAc5C,SAASC,eAAe,uBAAuB6S,OAAS,qBAE1E,MAEJ,IAAK,yBACDmc,EAAS,CACLlsB,OAAQ+a,SAAS9d,SAASC,eAAe,gBAAgB6S,OAAS,GAClE3P,WAAY2a,SAAS9d,SAASC,eAAe,oBAAoB6S,OAAS,GAC1E1P,WAAY0a,SAAS9d,SAASC,eAAe,oBAAoB6S,OAAS,GAC1EzP,SAAUya,SAAS9d,SAASC,eAAe,kBAAkB6S,OAAS,GACtExP,SAAUwa,SAAS9d,SAASC,eAAe,kBAAkB6S,OAAS,GACtEtP,kBAAmBsa,SAAS9d,SAASC,eAAe,0BAA0B6S,OAAS,GACvFrP,kBAAmBqa,SAAS9d,SAASC,eAAe,0BAA0B6S,OAAS,GACvFpP,gBAAiBoa,SAAS9d,SAASC,eAAe,wBAAwB6S,OAAS,GACnFnP,gBAAiBma,SAAS9d,SAASC,eAAe,wBAAwB6S,OAAS,IAEvF,MAEJ,IAAK,aACDmc,EAAS,CACL1sB,KAAMub,SAAS9d,SAASC,eAAe,eAAe6S,OAAS,GAC/DlQ,aAAc5C,SAASC,eAAe,uBAAuB6S,OAAS,qBAE1E,MAEJ,IAAK,yBACDmc,EAAS,CACLlsB,OAAQ+a,SAAS9d,SAASC,eAAe,gBAAgB6S,OAAS,GAClEvQ,KAAMub,SAAS9d,SAASC,eAAe,eAAe6S,OAAS,GAC/D9P,YAAa8a,SAAS9d,SAASC,eAAe,qBAAqB6S,OAAS,IAIxF,MAEJ,IAAK,QACDkc,EAAYhvB,SAASC,eAAe,iBAAiB6S,MACrD,MAEJ,IAAK,WACDkc,EAAYhvB,SAASC,eAAe,oBAAoB6S,MACtC,oBAAdkc,EACAC,EAAOzqB,OAASwuB,WAAWhzB,SAASC,eAAe,mBAAmB6S,OAAS,KAC1D,iBAAdkc,IACPC,EAAOtqB,SAAWquB,WAAWhzB,SAASC,eAAe,qBAAqB6S,OAAS,IAEvF,MAEJ,IAAK,SACDkc,EAAYhvB,SAASC,eAAe,kBAAkB6S,MACpC,iBAAdkc,IACAC,EAAOnpB,SAAWgY,SAAS9d,SAASC,eAAe,mBAAmB6S,OAAS,KAEnF,MAEJ,IAAK,gBACDkc,EAAYhvB,SAASC,eAAe,gBAAgB6S,MACpDmc,EAAS,CACLzoB,QAASxG,SAASC,eAAe,gBAAgB6S,OAAS,qBAE9D,MAEJ,IAAK,SACDkc,EAAYhvB,SAASC,eAAe,kBAAkB6S,MACpC,mBAAdkc,GAAgD,mBAAdA,EAClCC,EAAOhoB,SAAWjH,SAASC,eAAe,mBAAmB6S,OAAS,eACjD,eAAdkc,IACPC,EAAO7nB,MAAQ0W,SAAS9d,SAASC,eAAe,gBAAgB6S,OAAS,IAE7E,MAEJ,IAAK,QACDkc,EAAY,QACZC,EAAS,CACL0B,WAAY3wB,SAASC,eAAe,gBAAgB6S,OAAS,IAEjE,MAEJ,IAAK,SACDkc,EAAY,SACZC,EAAS,CACLnuB,QAASd,SAASC,eAAe,kBAAkB6S,OAAS,GAC5DvK,KAAMvI,SAASC,eAAe,eAAe6S,OAAS,kBAKlE,OAAKkc,GAAsB,WAAT7tB,EAEXiwB,EAAQzf,MAAMqd,EAAWC,GAFY,IAGpD,CAGI,gBAAAgC,GACI,MAAMgC,EAASjzB,SAASC,eAAe,cACjCizB,EAAUlzB,SAASC,eAAe,eAAe6S,OAAS,EAC1DqgB,EAAUnzB,SAASC,eAAe,eAAe6S,OAAS,EAE3DmgB,IAELA,EAAOzR,UAAY,uFAEoB1D,SAASoV,GAAW,yEAE7C5X,MAAMC,KAAK,CAACzL,OAAQ,IAAK,CAACghB,EAAG7V,IAAM,8CACdA,GAAKkY,EAAU,WAAa,kBAAkBlY,oCAC3DA,EAAI,2DAEX0B,KAAK,4DAMpBsW,EAAOvR,iBAAiB,SAAS7W,QAAQlI,IACrCA,EAAKzC,iBAAiB,QAAS,KAC3B,MAAMkzB,EAAapzB,SAASC,eAAe,cACvCmzB,IACAA,EAAWtgB,MAAQnQ,EAAKif,QAAQjf,KAChCpC,KAAK0wB,mBACL1wB,KAAK2wB,4BAIzB,CAGI,yBAAAtB,CAA0BL,EAAWC,EAAWC,EAASC,EAASC,GAC9D,MAAMlvB,EAAW,GACX4yB,EAAyB,sBAAhB1D,EAAsC,IAAM,GAG3D,GAAIJ,IAAcE,EACd,IAAK,IAAI9sB,EAAO6sB,EAAW7sB,GAAQ+sB,EAAS/sB,IACxClC,EAASgY,KAAK,GAAG4a,IAAS1D,KAAeJ,KAAa5sB,SAEvD,CAGH,IAAK,IAAIA,EAAO6sB,EAAW7sB,GAAQ,EAAGA,IAClClC,EAASgY,KAAK,GAAG4a,IAAS1D,KAAeJ,KAAa5sB,KAI1D,IAAK,IAAIJ,EAAOgtB,EAAY,EAAGhtB,EAAOktB,EAASltB,IAC3C,IAAK,IAAII,EAAO,EAAGA,GAAQ,EAAGA,IAC1BlC,EAASgY,KAAK,GAAG4a,IAAS1D,KAAeptB,KAAQI,KAKzD,GAAI8sB,EAAUF,EACV,IAAK,IAAI5sB,EAAO,EAAGA,GAAQ+sB,EAAS/sB,IAChClC,EAASgY,KAAK,GAAG4a,IAAS1D,KAAeF,KAAW9sB,IAGxE,CAEQ,OAAOlC,CACf,CAGI,mCAAAyvB,CAAoCntB,EAAQwsB,EAAWC,EAAWC,EAASC,EAASI,EAAiBC,EAAiBC,EAAeC,GACjI,MAAMxvB,EAAW,GACX6yB,EAAe/yB,KAAKgzB,qBAAqBhE,EAAWC,EAAWC,EAASC,GACxE8D,EAAcjzB,KAAKgzB,qBAAqBzD,EAAiBC,EAAiBC,EAAeC,GAG/F,IAAK,IAAIhV,EAAI,EAAGA,EAAI9I,KAAKzP,IAAI4wB,EAAaxjB,OAAQ0jB,EAAY1jB,QAASmL,IAAK,CACxE,MAAMwY,EAAUH,EAAarY,IAAMqY,EAAaA,EAAaxjB,OAAS,GAChEK,EAASqjB,EAAYvY,IAAMuY,EAAYA,EAAY1jB,OAAS,GAElErP,EAASgY,KAAK,4BAA4B1V,KAAU0wB,EAAQlxB,QAAQkxB,EAAQ9wB,QAAQwN,EAAO5N,QAAQ4N,EAAOxN,OACtH,CAEQ,OAAOlC,CACf,CAGI,yBAAA0vB,CAA0B5tB,EAAMotB,GAC5B,MAAMlvB,EAAW,GACX4yB,EAAyB,sBAAhB1D,EAAsC,IAAM,GAE3D,IAAK,IAAIhtB,EAAO,EAAGA,GAAQ,EAAGA,IAC1BlC,EAASgY,KAAK,GAAG4a,IAAS1D,KAAeptB,KAAQI,KAGrD,OAAOlC,CACf,CAGI,mCAAA2vB,CAAoCrtB,EAAQR,EAAM8sB,GAC9C,MAAM5uB,EAAW,GAEjB,IAAK,IAAIkC,EAAO,EAAGA,GAAQ,EAAGA,IAC1BlC,EAASgY,KAAK,4BAA4B1V,KAAUR,KAAQI,KAAQ0sB,KAAc1sB,KAGtF,OAAOlC,CACf,CAGI,oBAAA8yB,CAAqBhE,EAAWC,EAAWC,EAASC,GAChD,MAAMgE,EAAQ,GAEd,GAAInE,IAAcE,EACd,IAAK,IAAI9sB,EAAO6sB,EAAW7sB,GAAQ+sB,EAAS/sB,IACxC+wB,EAAMjb,KAAK,CAAElW,KAAMgtB,EAAW5sB,aAE/B,CAEH,IAAK,IAAIA,EAAO6sB,EAAW7sB,GAAQ,EAAGA,IAClC+wB,EAAMjb,KAAK,CAAElW,KAAMgtB,EAAW5sB,SAIlC,IAAK,IAAIJ,EAAOgtB,EAAY,EAAGhtB,EAAOktB,EAASltB,IAC3C,IAAK,IAAII,EAAO,EAAGA,GAAQ,EAAGA,IAC1B+wB,EAAMjb,KAAK,CAAElW,OAAMI,SAK3B,GAAI8sB,EAAUF,EACV,IAAK,IAAI5sB,EAAO,EAAGA,GAAQ+sB,EAAS/sB,IAChC+wB,EAAMjb,KAAK,CAAElW,KAAMktB,EAAS9sB,QAGhD,CAEQ,OAAO+wB,CACf,CAGI,iBAAAC,GACI,OAAOpzB,KAAKsyB,qBACpB,CAGI,eAAAe,CAAgB9yB,GAEZ,GAAIwa,MAAMwX,QAAQhyB,GAAU,CAExB,IAAK,IAAIma,EAAI,EAAGA,EAAIna,EAAQgP,OAAQmL,IAAK,CACrC,MAAMvR,EAAanJ,KAAKqzB,gBAAgB9yB,EAAQma,IAChD,IAAKvR,EAAWkW,MACZ,MAAO,CAAEA,OAAO,EAAOlgB,MAAO,WAAWub,EAAI,MAAMvR,EAAWhK,QAElF,CACY,MAAO,CAAEkgB,OAAO,EAC5B,CAGQ,IAAIiU,EACJ,GAAuB,iBAAZ/yB,EACP+yB,EAAY/yB,MACT,KAAIA,IAAWA,EAAQA,QAG1B,MAAO,CAAE8e,OAAO,EAAOlgB,MAAO,uBAF9Bm0B,EAAY/yB,EAAQA,OAGhC,CAEQ,IAAK+yB,GAAyC,IAA5BA,EAAUpf,OAAO3E,OAC/B,MAAO,CAAE8P,OAAO,EAAOlgB,MAAO,2BAIlC,MAAMoZ,EAAM+a,EAAUpf,OAItB,MAD0B,CAAC,OAAQ,OAAQ,YACrBoE,KAAKib,GAAahb,EAAIjN,cAAc6E,SAASojB,IACxD,CAAElU,OAAO,EAAOlgB,MAAO,iCAM9Ba,KAAKwzB,yBAAyBjb,GACvB,CAAE8G,OAAO,EAAOlgB,MAAO,qCAG3B,CAAEkgB,OAAO,EACxB,CAGI,wBAAAmU,CAAyBjb,GACrB,IAAIkb,GAAW,EACXC,EAAY,KAEhB,IAAK,IAAIhZ,EAAI,EAAGA,EAAInC,EAAIhJ,OAAQmL,IAAK,CACjC,MAAMiZ,EAAOpb,EAAImC,GAEjB,GAAK+Y,GAAsB,MAATE,GAAyB,MAATA,GAI3B,GAAIF,GAAYE,IAASD,EAAW,CAEvC,IAAIE,EAAiB,EACrB,IAAK,IAAIC,EAAInZ,EAAI,EAAGmZ,GAAK,GAAgB,OAAXtb,EAAIsb,GAAaA,IAC3CD,IAGAA,EAAiB,GAAM,IACvBH,GAAW,EACXC,EAAY,KAEhC,MAAmB,IAAKD,GAAqB,MAATE,EAEpB,OAAO,OAfPF,GAAW,EACXC,EAAYC,CAgB5B,CAEQ,OAAO,CACf,CAGI,mBAAAG,CAAoBtpB,GAChB,IAAKvK,SAASgH,UAAW,MAAO,GAEhC,MAAMA,EAAY,GA4BlB,OAzBAmD,OAAOC,QAAQpK,SAASgH,WAAWqD,QAAQ,EAAEypB,EAAYC,MACrD5pB,OAAOC,QAAQ2pB,GAAU1pB,QAAQ,EAAE0O,EAAYC,MAEvBA,EAAS/Y,SAASoY,KAAKC,GACvBvY,KAAKmd,kBAAkB5E,KACpB/N,IAInBvD,EAAUiR,KAAK,CACXjQ,GAAI,GAAG8rB,KAAc/a,IACrB5Y,KAAM6Y,EAAS7Y,KACfE,YAAa2Y,EAAS3Y,YACtB0zB,SAAUD,EACV7zB,SAAU+Y,EAAS/Y,SAAS8G,IAAIuR,IAAG,CAC/BhY,QAASgY,EACT3X,KAAMZ,KAAKmd,kBAAkB5E,GAC7BlY,KAAML,KAAKod,eAAe7E,GAC1BvQ,KAAMhI,KAAKqd,eAAe9E,YAOvCtR,CACf,CAGI,iBAAAkW,CAAkB5c,GACd,IAAKA,GAA8B,iBAAZA,EAAsB,MAAO,SAEpD,MAAMgY,EAAMhY,EAAQ+K,cAAc4I,OAGlC,OAAIqE,EAAIpI,SAAS,sBAA8B,OAG3CoI,EAAIgK,WAAW,SAAWhK,EAAIgK,WAAW,UAAYhK,EAAIgK,WAAW,UACpEhK,EAAIgK,WAAW,UAAYhK,EAAIpI,SAAS,KAAa,gBAGrDoI,EAAIpI,SAAS,gBAAkBoI,EAAIpI,SAAS,uBAC5CoI,EAAIpI,SAAS,mBAA2B,QAGxCoI,EAAIpI,SAAS,iBAAmBoI,EAAIpI,SAAS,aAC7CoI,EAAIpI,SAAS,aAAeoI,EAAIpI,SAAS,UAAYoI,EAAIpI,SAAS,QAClEoI,EAAIpI,SAAS,UAAYoI,EAAIpI,SAAS,UAAYoI,EAAIpI,SAAS,WAC/DoI,EAAIpI,SAAS,aAAeoI,EAAIpI,SAAS,cAAgBoI,EAAIpI,SAAS,UAAkB,WAGxFoI,EAAIpI,SAAS,QAAUoI,EAAIpI,SAAS,SAAWoI,EAAIpI,SAAS,QAAgB,SAG5EoI,EAAIpI,SAAS,SAAWoI,EAAIpI,SAAS,WAAqB,YAARoI,GAC1C,gBAARA,GAAiC,cAARA,GAA+B,qBAARA,EAAmC,SAGnFA,EAAIpI,SAAS,WAAqB,sBAARoI,GAAuC,gBAARA,GACjD,uBAARA,GAAwC,iBAARA,EAA+B,YAG/DA,EAAIpI,SAAS,eAAyB,eAARoI,GAAwBA,EAAIpI,SAAS,QAC3D,mBAARoI,EAAiC,SAG9B,QACf,CAEI,cAAA6E,CAAe7c,GAYX,MAVgB,CACZJ,UAAW,KACXoB,OAAQ,KACRS,KAAM,IACNuB,MAAO,KACPwC,cAAe,KACflC,SAAU,KACVoB,OAAQ,KACRmB,OAAQ,MATCpG,KAAKmd,kBAAkB5c,KAWZ,IAChC,CAEI,cAAA8c,CAAe9c,GAEX,GAAIA,EAAQ4P,SAAS,sBAAuB,CACxC,MAAMuL,EAAQnb,EAAQmb,MAAM,uCAC5B,GAAIA,EAAO,CAGP,MAAO,gBAFM6B,SAAS7B,EAAM,IAAM,UACrB6B,SAAS7B,EAAM,IAAM,GAElD,CACA,CAGQ,IAAK,MAAOuY,EAAYzpB,KAAaJ,OAAOC,QAAQpK,SAASC,UACzD,IAAK,MAAOg0B,EAAO3b,KAAQnO,OAAOC,QAAQG,EAAStK,UAC/C,GAAIqY,EAAIhY,UAAYA,EAChB,OAAOgY,EAAInY,KAMvB,OAAOG,EAAQgL,QAAQ,QAAS,KAAKA,QAAQ,WAAY,OAAO2I,MACxE,CAEI,oBAAA6M,CAAqBrL,GACjB,MAAM8O,EAAY,UACZC,EAAiB/O,EAAMgP,eACvBnS,EAAQmD,EAAMnD,MACdoS,EAAWpS,EAAMgK,MAAM,EAAGkI,GAAkBD,EAAYjS,EAAMgK,MAAMkI,GAC1E/O,EAAMnD,MAAQoS,EACdjP,EAAMkP,kBAAkBH,EAAiBD,EAAkBC,EAAiBD,GAC5E9O,EAAMvB,QAGNuB,EAAMmP,cAAc,IAAIC,MAAM,QAAS,CAAEC,SAAS,IAC1D,GRx/CMoP,EAAkB,IStBT,MACX,WAAA1nB,GACIzM,KAAKgqB,QAAU,oBACfhqB,KAAKo0B,OAAS,WACdp0B,KAAKq0B,UAAY,aACzB,CAEI,IAAA3mB,GACI1N,KAAKmS,qBACb,CAKI,mBAAAA,GAEI/S,SAASC,MAAM,kBAAmB,QAAS,oBAAqB,KAC5DW,KAAKs0B,iBAITl1B,SAASC,MAAMW,KAAKo0B,OAAQ,QAAS,0BAA4Bv0B,IAC7D,MAAM00B,EAAO10B,EAAEP,OAAO8V,QAAQ,cACzBmf,GACLv0B,KAAKw0B,WAAWD,KAIpBn1B,SAASC,MAAM,qBAAsB,QAAS,kBAAmB,KAC7D,MAAMo1B,EAAYh1B,SAASC,eAAeM,KAAKq0B,WAC/C,IAAKI,EAAW,OAChB,MAAMzsB,EAAOysB,EAAUrnB,aAAe,GACjCpF,EAAKkM,QAIVF,MAAMwT,gBAAgBxf,GACtBgM,MAAMC,UAAU,8BAA+B,YAJ3CD,MAAMC,UAAU,kBAAmB,YAMnD,CAKI,YAAAqgB,GACIt0B,KAAK00B,YAEL,MAAMD,EAAYh1B,SAASC,eAAeM,KAAKq0B,WAC3CI,IACAA,EAAUrnB,YAAc,gDAE5B4G,MAAM+V,UAAU/pB,KAAKgqB,QAC7B,CAEI,SAAA0K,GACI,MAAMC,EAASl1B,SAASC,eAAeM,KAAKo0B,QAC5C,IAAKO,EAAQ,OACbA,EAAO1T,UAAY,GAEnB,MACM/R,EADO5B,WAAWO,aACFqB,UAAY,GAElC9E,OAAOC,QAAQ6E,GAAU5E,QAAQ,EAAE2E,EAAW5D,MAC1C,MAAMupB,EAAc50B,KAAK60B,WAAW,UAAWxpB,EAAQjL,KAAM,CAAE6O,cAGzD6lB,EAAoBr1B,SAASgX,cAAc,OAIjD,GAHAqe,EAAkB9R,UAAY,gBAG1B3X,EAAQzD,QAAUyD,EAAQzD,OAAOC,MAAO,CACxC,MAAMktB,EAAY/0B,KAAK60B,WAAW,QAAS,cAAe,CACtD5lB,YACAxN,YAAa,UAEjBqzB,EAAkBnS,YAAYoS,EAC9C,CAGY,GAAI1pB,EAAQzD,QAAUyD,EAAQzD,OAAOU,OAAQ,CACzC,MAAM0sB,EAAah1B,KAAK60B,WAAW,QAAS,eAAgB,CACxD5lB,YACAxN,YAAa,WAEjBqzB,EAAkBnS,YAAYqS,EAC9C,CAGY,MAAMC,EAAYj1B,KAAK60B,WAAW,UAAW,UAAW,CACpD5lB,cAEJ6lB,EAAkBnS,YAAYsS,GAE9BL,EAAYjS,YAAYmS,GACxBH,EAAOhS,YAAYiS,IAE/B,CAEI,UAAAC,CAAWj0B,EAAMqM,EAAOoU,EAAU,CAAA,GAC9B,MAAMkT,EAAO90B,SAASgX,cAAc,OAQpC,OAPA8d,EAAKvR,UAAY,aAAapiB,IAC9B2zB,EAAKnnB,YAAcH,EACnBsnB,EAAKlT,QAAQzgB,KAAOA,EACpBwJ,OAAOC,QAAQgX,GAAS/W,QAAQ,EAAE4qB,EAAGC,MAEjCZ,EAAKa,aAAa,QAAQF,IAAKC,KAE5BZ,CACf,CAEI,UAAAC,CAAWD,GAEP,MAAMc,EAAU51B,SAASqhB,cAAc,uBACnCuU,GAASA,EAAQhgB,UAAUE,OAAO,YACtCgf,EAAKlf,UAAUzW,IAAI,YAEnB,MAAMgC,EAAO2zB,EAAKlT,QAAQzgB,MAAQ2zB,EAAKhH,aAAa,aAC9C+H,EAAYf,EAAKhH,aAAa,kBAC9B9rB,EAAc8yB,EAAKhH,aAAa,oBAEtC,GAAK+H,EACL,IACI,IAAIC,EAAgB,GAEhBA,EADS,UAAT30B,EACgBZ,KAAKw1B,oBAAoBF,EAAW7zB,GACpC,YAATb,EACSZ,KAAKy1B,oBAAoBH,GAGzB,4DAEpB,MAAMb,EAAYh1B,SAASC,eAAeM,KAAKq0B,WAC3CI,IACAA,EAAUrnB,YAAcmoB,GAAiB,wBAEzD,CAAU,MAAOt2B,GACLC,QAAQC,MAAM,qCAAsCF,GACpD+U,MAAMC,UAAU,4BAA6B,QACzD,CACA,CAKI,mBAAAuhB,CAAoBvmB,EAAWxN,GAC3B,MAAMi0B,EAAcpoB,WAAW0B,WAAWC,GAC1C,IAAKymB,IAAgBA,EAAY9tB,SAAW8tB,EAAY9tB,OAAOnG,GAAc,MAAO,GACpF,MAAM2P,EAAQskB,EAAY9tB,OAAOnG,GAC3Bk0B,EAAc,CAChBv1B,KAAM,GAAGs1B,EAAYt1B,QAAQqB,IAC7B+J,KAAM/J,EACNqG,KAAMsJ,EAAMtJ,MAAQ,CAAA,EAEpB+V,gBAAiB6X,EAAY7X,iBAAmB,CAAA,EAEhD3V,QAASkJ,EAAMlJ,SAAW,CAAA,GAE9B,OAAOqO,UAAUiP,uBAAuBmQ,EAAa,CAAEl0B,eAC/D,CAEI,mBAAAg0B,CAAoBxmB,GAChB,MAAMymB,EAAcpoB,WAAW0B,WAAWC,GAC1C,IAAKymB,EAAa,MAAO,GAEzB,MAAME,EAAoB,IAClBF,EAAYxtB,SAAW,MACvBwtB,EAAY9tB,QAAQC,OAAOK,SAAW,CAAA,KACtCwtB,EAAY9tB,QAAQU,QAAQJ,SAAW,CAAA,GAEzCytB,EAAc,CAChBv1B,KAAMs1B,EAAYt1B,KAClBoL,KAAMkqB,EAAY/tB,oBAAsB,QACxCO,QAAS0tB,GAEb,OAAOrf,UAAUiS,kBAAkBmN,EAC3C,GTxJME,EAAiB,IF2GR,MACX,WAAAppB,GACIzM,KAAK81B,gBAAkB,CACnBjuB,MAAO,IAAIlJ,IACX2J,OAAQ,IAAI3J,KAEhBqB,KAAK+1B,eAAgB,CAC7B,CAGI,aAAAC,CAAcv0B,GACV,IAAKzB,KAAK81B,gBAAgBr0B,GACtB,MAAM,IAAIqL,wBAAwBrL,GAGtC,MAAMw0B,EAAUlb,MAAMC,KAAKhb,KAAK81B,gBAAgBr0B,IAChD,GAAuB,IAAnBw0B,EAAQ1mB,OAAc,MAAO,GAEjC,IACIhP,EAAU,SADE,0BAA0BkB,EAAYy0B,OAAO,GAAGpQ,cAAgBrkB,EAAY8a,MAAM,kCACpC0Z,EAAQ7Z,KAAK,OAO3E,OALIpc,KAAK+1B,gBACLx1B,GAAW,uCAGfA,GAAW,MACJA,CACf,CAGI,kBAAA41B,CAAmB10B,GACf,IAAKzB,KAAK81B,gBAAgBr0B,GACtB,MAAM,IAAIqL,wBAAwBrL,GAEtC,OAAOsZ,MAAMC,KAAKhb,KAAK81B,gBAAgBr0B,GAC/C,CAGI,YAAA20B,CAAa30B,EAAaoL,GACtB,IAAK7M,KAAK81B,gBAAgBr0B,GACtB,MAAM,IAAIqL,wBAAwBrL,GAGtC,IAAKoL,EACD,MAAM,IAAIE,mBAAmBF,EAAYpL,GAGzCzB,KAAK81B,gBAAgBr0B,GAAasvB,IAAIlkB,GACtC7M,KAAK81B,gBAAgBr0B,GAAa3C,OAAO+N,GAEzC7M,KAAK81B,gBAAgBr0B,GAAa7C,IAAIiO,EAElD,CAGI,eAAAwpB,GACIr2B,KAAK81B,gBAAgBjuB,MAAMyuB,QAC3Bt2B,KAAK81B,gBAAgBxtB,OAAOguB,OACpC,CAGI,gBAAAC,CAAiB90B,GACb,IAAKuL,EAAYvL,GACb,MAAM,IAAIqL,wBAAwBrL,GAGtC,IAAKzB,KAAK81B,gBAAgBr0B,GACtB,MAAM,IAAIqL,wBAAwBrL,GAGtCuL,EAAYvL,GAAa6I,QAAQ4C,IAC7BlN,KAAK81B,gBAAgBr0B,GAAa7C,IAAIsO,EAAOA,SAEzD,CAGI,cAAAspB,CAAe/0B,GACX,IAAKzB,KAAK81B,gBAAgBr0B,GACtB,MAAM,IAAIqL,wBAAwBrL,GAEtC,OAAOzB,KAAK81B,gBAAgBr0B,GAAag1B,IACjD,CAGI,gBAAAC,CAAiBj1B,EAAaoL,GAC1B,IAAK7M,KAAK81B,gBAAgBr0B,GACtB,MAAM,IAAIqL,wBAAwBrL,GAEtC,OAAOzB,KAAK81B,gBAAgBr0B,GAAasvB,IAAIlkB,EACrD,CAGI,SAAA8pB,CAAUtrB,GACDA,EAAQurB,kBACTvrB,EAAQurB,gBAAkB,IAG9BvrB,EAAQurB,gBAAkB,CACtBd,gBAAiB,CACbjuB,MAAOkT,MAAMC,KAAKhb,KAAK81B,gBAAgBjuB,OACvCS,OAAQyS,MAAMC,KAAKhb,KAAK81B,gBAAgBxtB,SAE5CytB,cAAe/1B,KAAK+1B,cAEhC,CAGI,SAAAc,CAAUxrB,GACN,GAAIA,GAAWA,EAAQurB,gBAAiB,CACpC,MAAMptB,EAAW6B,EAAQurB,gBAGzB52B,KAAK81B,gBAAgBjuB,MAAQ,IAAIlJ,IAAI6K,EAASssB,iBAAiBjuB,OAAS,IACxE7H,KAAK81B,gBAAgBxtB,OAAS,IAAI3J,IAAI6K,EAASssB,iBAAiBxtB,QAAU,IAG1EtI,KAAK+1B,cAAgBvsB,EAASusB,gBAAiB,CAC3D,MAEY/1B,KAAK81B,gBAAgBjuB,MAAMyuB,QAC3Bt2B,KAAK81B,gBAAgBxtB,OAAOguB,QAC5Bt2B,KAAK+1B,eAAgB,CAEjC,GErOA3rB,OAAO0sB,OAAO/2B,OAAQ,CACtBuN,WAAEA,EACF2E,YAAEA,EACFiE,YAAEA,EACFU,WAAEA,EACFL,UAAEA,EACF9C,aAAEA,EACFO,MAAEA,EACFkJ,YAAEA,EACAiX,kBACF0B,eAAEA,EACF7oB,YAAEA,EACA+pB,gBAAiB/pB,IAGnB,MAAMqF,EAAM,IUvCG,MACX,WAAA5F,GACIzM,KAAKqP,eAAiB,KACtBrP,KAAKg3B,YAAc,QACnBh3B,KAAK2H,mBAAqB,QAC1B3H,KAAK+W,YAAc,KACnB/W,KAAKi3B,YAAa,EAClBj3B,KAAKk3B,UAAY,GACjBl3B,KAAKm3B,UAAY,GACjBn3B,KAAK2J,aAAe,GACpB3J,KAAKo3B,iBAAmB,EAExBp3B,KAAKq3B,eAAiB,IAAI/I,IAGE,YAAxB7uB,SAAS63B,WACT73B,SAASE,iBAAiB,mBAAoB,IAAMK,KAAK0N,QAEzD1N,KAAK0N,MAEjB,CAEI,UAAMA,GACF,IAEI,GAA0B,oBAAfJ,YAA+C,oBAAV0G,MAC5C,MAAM,IAAIxH,MAAM,0CAIdxM,KAAKu3B,WAGXv3B,KAAKw3B,aAGLx3B,KAAKmS,sBACLnS,KAAKy3B,sBACLz3B,KAAK03B,mBAGL13B,KAAK2U,iBACL3U,KAAKgX,gBACLhX,KAAKiX,qBAGL,MAAMzN,EAAW8D,WAAWkC,cAC5BxP,KAAK23B,wBAAwBnuB,EAASqH,OAAS,WAG3C7Q,KAAK43B,eACL53B,KAAK63B,qBAGT7jB,MAAMC,UAAU,gDAAiD,WAGjE7U,SAASL,KAAK,gBAAiB,CAAEsT,IAAKrS,MAElD,CAAU,MAAOb,GACLD,QAAQC,MAAM,oCAAqCA,GAC9B,oBAAV6U,OAAyBA,MAAMC,WACtCD,MAAMC,UAAU,6BAA8B,SAIlD7U,SAASL,KAAK,gBAAiB,CAAEI,SAC7C,CACA,CAGI,cAAMo4B,GACF,MAAMzpB,EAAOR,WAAWO,aACxB7N,KAAKqP,eAAiBvB,EAAKuB,eAG3B,MAAMyoB,EAAchqB,EAAKoB,SAASlP,KAAKqP,gBAEnCrP,KAAK2H,mBADLmwB,GAC0BA,EAAYnwB,oBAEZ,QAIzBmG,EAAKoB,SAASlP,KAAKqP,kBACpBrP,KAAKqP,eAAiBjF,OAAOtC,KAAKgG,EAAKoB,UAAU,GACjDlP,KAAK+3B,qBAEjB,CAEI,QAAAC,GACI,MAAMlqB,EAAOR,WAAWO,aAIxB,OAHAC,EAAKuB,eAAiBrP,KAAKqP,eAC3BvB,EAAKc,cAAe,IAAIjD,MAAOC,gBAE3B0B,WAAWmB,YAAYX,KACvB9N,KAAK8U,aAAY,IACV,EAGnB,CAEI,kBAAAijB,GACI,MAAMjqB,EAAOR,WAAWO,aAExB,OADAC,EAAKuB,eAAiBrP,KAAKqP,eACpB/B,WAAWmB,YAAYX,EACtC,CAEI,WAAAgH,CAAYjJ,GAAW,GACnB7L,KAAKi3B,WAAaprB,EAClB,MAAMosB,EAAYx4B,SAASC,eAAe,qBACtCu4B,IACAA,EAAUxU,MAAM3Y,QAAUe,EAAW,SAAW,OAE5D,CAGI,iBAAAkI,GACI,MAAM1I,EAAUiC,WAAW0B,WAAWhP,KAAKqP,gBAC3C,OAAKhE,EAGErL,KAAKk4B,gBAAgB7sB,GAHP,IAI7B,CAEI,eAAA6sB,CAAgB7sB,GACZ,OAAKA,GAGAA,EAAQzD,SACTyD,EAAQzD,OAAS,CACbC,MAAO,CACHC,KAAMuD,EAAQvD,MAAQ,CAAA,GAE1BQ,OAAQ,CACJR,KAAM,CAAA,IAGduD,EAAQ1D,mBAAqB0D,EAAQG,MAAQ,eACtCH,EAAQG,YACRH,EAAQvD,KAIfwF,WAAW6B,YAAYnP,KAAKqP,eAAgBhE,IAI3CA,EAAQzD,SACTyD,EAAQzD,OAAS,CACbC,MAAO,CAAEC,KAAM,IACfQ,OAAQ,CAAER,KAAM,MAInBuD,EAAQzD,OAAO5H,KAAK2H,sBACrB0D,EAAQzD,OAAO5H,KAAK2H,oBAAsB,CAAEG,KAAM,CAAA,IAIjDuD,EAAQzD,OAAO5H,KAAK2H,oBAAoBG,OACzCuD,EAAQzD,OAAO5H,KAAK2H,oBAAoBG,KAAO,CAAA,GAM5C,IACAuD,EACHvD,KAAMuD,EAAQzD,OAAO5H,KAAK2H,oBAAoBG,KAC9CI,QAASmD,EAAQnD,SAAW,CAAA,EAC5BsD,KAAMxL,KAAK2H,qBA7CM,IA+C7B,CAEI,aAAA2K,CAAcrD,GACV,GAAIA,IAAcjP,KAAKqP,eAAgB,CACnCrP,KAAKqP,eAAiBJ,EACtBjP,KAAK+W,YAAc,KAEnB,MAAM1L,EAAUiC,WAAW0B,WAAWC,GAClC5D,IACArL,KAAK2H,mBAAqB0D,EAAQ1D,oBAAsB,SAG5D3H,KAAK+3B,qBACL/3B,KAAKgX,gBACLhX,KAAKiX,qBACLjX,KAAKkX,oBAEL,MAAMihB,EAAen4B,KAAK+T,oBAC1BC,MAAMC,UAAU,wBAAwBkkB,EAAa/3B,SAASJ,KAAK2H,sBAAuB,UACtG,CACA,CAEI,aAAAywB,CAAch4B,EAAME,EAAc,GAAIkL,EAAO,SACzC,MAAMyD,EAAYjP,KAAK0U,kBAAkBtU,GACnCiL,EAAU,CACZjL,OACAE,cACAkL,OACA1D,KAAM,CAAA,EACNI,QAAS,CAAA,EACTwD,SAAS,IAAIC,MAAOC,cACpBgD,cAAc,IAAIjD,MAAOC,eAG7B,OAAI0B,WAAW6B,YAAYF,EAAW5D,IAClCrL,KAAKsS,cAAcrD,GACnBjP,KAAK2U,iBACLX,MAAMC,UAAU,YAAY7T,aAAiB,WACtC6O,IAGX+E,MAAMC,UAAU,2BAA4B,SACrC,KACf,CAEI,YAAAokB,CAAaC,EAAiBC,GAC1B,MAAMC,EAAgBlrB,WAAW0B,WAAWspB,GAC5C,IAAKE,EAAe,OAAO,KAE3B,MAAMvpB,EAAYjP,KAAK0U,kBAAkB6jB,GACnC3jB,EAAgB,IACftG,KAAKC,MAAMD,KAAKS,UAAUypB,IAC7Bp4B,KAAMm4B,EACNj4B,YAAa,WAAWk4B,EAAcp4B,OACtCsL,SAAS,IAAIC,MAAOC,cACpBgD,cAAc,IAAIjD,MAAOC,eAG7B,OAAI0B,WAAW6B,YAAYF,EAAW2F,IAClC5U,KAAK2U,iBACLX,MAAMC,UAAU,YAAYskB,oBAA0BC,EAAcp4B,QAAS,WACtE6O,IAGX+E,MAAMC,UAAU,0BAA2B,SACpC,KACf,CAEI,aAAA7E,CAAcH,GACV,MAAM5D,EAAUiC,WAAW0B,WAAWC,GACtC,IAAK5D,EAAS,OAAO,EAErB,MAAMyC,EAAOR,WAAWO,aAGxB,GAFqBzD,OAAOtC,KAAKgG,EAAKoB,UAAUK,QAE5B,EAEhB,OADAyE,MAAMC,UAAU,iCAAkC,YAC3C,EAGX,GAAI3G,WAAW8B,cAAcH,GAAY,CACrC,GAAIjP,KAAKqP,iBAAmBJ,EAAW,CAEnC,MAAMK,EAAoBlF,OAAOtC,KAAKwF,WAAWO,aAAaqB,UAC9DlP,KAAKsS,cAAchD,EAAkB,GACrD,CAIY,OAFAtP,KAAK2U,iBACLX,MAAMC,UAAU,YAAY5I,EAAQjL,gBAAiB,YAC9C,CACnB,CAGQ,OADA4T,MAAMC,UAAU,2BAA4B,UACrC,CACf,CAEI,iBAAAS,CAAkBtU,GACd,MAAMq4B,EAAOr4B,EAAKkL,cAAcC,QAAQ,aAAc,KACtD,IAAItD,EAAKwwB,EACLvf,EAAU,EAEd,MAAMpL,EAAOR,WAAWO,aACxB,KAAOC,EAAKoB,SAASjH,IACjBA,EAAK,GAAGwwB,KAAQvf,IAChBA,IAGJ,OAAOjR,CACf,CAGI,SAAAywB,CAAUC,GACN34B,KAAK+W,YAAc4hB,EAGnB,MAAMttB,EAAUrL,KAAK+T,oBACf6kB,EAAoBn5B,SAASC,eAAe,2BAClD,GAAIk5B,GAAqBvtB,GAAWA,EAAQwS,gBAAiB,CACzD,IAAIgb,GAAO,EACX,GAAIxtB,EAAQwS,gBAAgB7d,KAAK2H,oBAAqB,CAClD,MAAM4e,EAAUlb,EAAQwS,gBAAgB7d,KAAK2H,oBAC7CkxB,KAAUtS,EAAQoS,KAAYpS,EAAQoS,GAAS7a,wBAC/D,EAEiB+a,GAAQxtB,EAAQwS,gBAAgB8a,KACjCE,IAASxtB,EAAQwS,gBAAgB8a,GAAS7a,yBAE9C8a,EAAkBvO,QAAUwO,CACxC,MAAmBD,IACPA,EAAkBvO,SAAU,GAGhCrqB,KAAKgX,gBACLhX,KAAKiX,qBACLjX,KAAK84B,oBACb,CAEI,MAAAC,CAAOJ,GACH,IAAK34B,KAAKg5B,eAAeL,GAErB,OADA3kB,MAAMC,UAAU,mBAAoB,UAC7B,EAGX,MAAM5I,EAAUrL,KAAK+T,oBAErB,OAAK1I,EAAQvD,KAAK6wB,IAUd3kB,MAAMC,UAAU,QAAQ0kB,oBAA2B,YAC5C,IAVPttB,EAAQvD,KAAK6wB,GAAW,GACxBrrB,WAAW6B,YAAYnP,KAAKqP,eAAgBhE,GAC5CrL,KAAKgX,gBACLhX,KAAK04B,UAAUC,GACf34B,KAAK8U,aAAY,GAEjBd,MAAMC,UAAU,QAAQ0kB,WAAkB,YACnC,EAKnB,CAEI,SAAAM,CAAUN,GACN,MAAMttB,EAAUrL,KAAK+T,oBACrB,QAAI1I,EAAQvD,KAAK6wB,YACNttB,EAAQvD,KAAK6wB,GACpBrrB,WAAW6B,YAAYnP,KAAKqP,eAAgBhE,GAExCrL,KAAK+W,cAAgB4hB,IACrB34B,KAAK+W,YAAc,MAGvB/W,KAAKgX,gBACLhX,KAAKiX,qBACLjX,KAAK8U,aAAY,GAEjBd,MAAMC,UAAU,QAAQ0kB,aAAoB,YACrC,EAInB,CAEI,cAAAK,CAAeL,GACX,OAAO14B,SAASkJ,WAAWC,eAAe4O,KAAK2gB,IAAYA,EAAQppB,QAAU,EACrF,CAGI,UAAAuS,CAAW6W,EAASp4B,GAChB,MAAM8K,EAAUrL,KAAK+T,oBAChB1I,EAAQvD,KAAK6wB,KACdttB,EAAQvD,KAAK6wB,GAAW,IAIxB5d,MAAMwX,QAAQhyB,IAEdA,EAAQ+J,QAAQiO,IACPA,EAAItQ,KACLsQ,EAAItQ,GAAKjI,KAAKmZ,qBAElB9N,EAAQvD,KAAK6wB,GAASzgB,KAAKK,KAE/BvE,MAAMC,UAAU,GAAG1T,EAAQgP,wBAAyB,aAG/ChP,EAAQ0H,KACT1H,EAAQ0H,GAAKjI,KAAKmZ,qBAEtB9N,EAAQvD,KAAK6wB,GAASzgB,KAAK3X,GAC3ByT,MAAMC,UAAU,gBAAiB,YAGrC3G,WAAW6B,YAAYnP,KAAKqP,eAAgBhE,GAC5CrL,KAAKiX,qBACLjX,KAAKgX,gBACLhX,KAAK8U,aAAY,EACzB,CAEI,aAAAokB,CAAcP,EAASQ,GACnB,MAAM9tB,EAAUrL,KAAK+T,oBACjB1I,EAAQvD,KAAK6wB,IAAYttB,EAAQvD,KAAK6wB,GAASQ,KAC/C9tB,EAAQvD,KAAK6wB,GAASS,OAAOD,EAAc,GAC3C7rB,WAAW6B,YAAYnP,KAAKqP,eAAgBhE,GAC5CrL,KAAKiX,qBACLjX,KAAKgX,gBACLhX,KAAK8U,aAAY,GAEjBd,MAAMC,UAAU,kBAAmB,WAE/C,CAEI,WAAAolB,CAAYV,EAASW,EAAWC,GAC5B,MAAMluB,EAAUrL,KAAK+T,oBACf7T,EAAWmL,EAAQvD,KAAK6wB,GAE9B,GAAIz4B,GAAYo5B,GAAa,GAAKA,EAAYp5B,EAASqP,QACnDgqB,GAAW,GAAKA,EAAUr5B,EAASqP,OAAQ,CAE3C,MAAOhP,GAAWL,EAASk5B,OAAOE,EAAW,GAC7Cp5B,EAASk5B,OAAOG,EAAS,EAAGh5B,GAE5B+M,WAAW6B,YAAYnP,KAAKqP,eAAgBhE,GAC5CrL,KAAKiX,qBACLjX,KAAK8U,aAAY,EAC7B,CACA,CAEI,iBAAAqE,GACI,MAAO,OAASxN,KAAK2R,MAAQ,IAAM1L,KAAK+N,SAAShF,SAAS,IAAIiF,OAAO,EAAG,EAChF,CAGI,cAAAjL,GACI,MAAMuX,EAASzsB,SAASC,eAAe,iBACvC,IAAKwsB,EAAQ,OAEb,MAAMpe,EAAOR,WAAWO,aAGxB,GAFAqe,EAAOjL,UAAY,GAEuB,IAAtC7W,OAAOtC,KAAKgG,EAAKoB,UAAUK,OAAc,CAEzC,MAAMiqB,EAAS/5B,SAASgX,cAAc,UACtC+iB,EAAOjnB,MAAQ,GACfinB,EAAOpsB,YAAc,wBACrBosB,EAAO5X,UAAW,EAClBsK,EAAOvJ,YAAY6W,EAC/B,MACYpvB,OAAOC,QAAQyD,EAAKoB,UAAU5E,QAAQ,EAAErC,EAAIoD,MACxC,MAAMmuB,EAAS/5B,SAASgX,cAAc,UACtC+iB,EAAOjnB,MAAQtK,EACfuxB,EAAOpsB,YAAc/B,EAAQjL,KACzB6H,IAAOjI,KAAKqP,iBACZmqB,EAAOC,UAAW,GAEtBvN,EAAOvJ,YAAY6W,KAI3Bx5B,KAAKkX,mBACb,CAEI,iBAAAA,GACI,MAAM7L,EAAUrL,KAAK+T,oBAGJtU,SAAS0hB,iBAAiB,aAClC7W,QAAQovB,IACbA,EAAIrkB,UAAUC,OAAO,SAAUjK,GAAWquB,EAAIrY,QAAQ7V,OAASxL,KAAK2H,oBACpE+xB,EAAI9X,UAAYvW,IAIpB,MAAMgM,EAAW5X,SAASC,eAAe,YACzC,GAAI2X,EACA,GAAIhM,EAAS,CACT,MAAMsuB,EAAQvvB,OAAOtC,KAAKuD,EAAQvD,MAAMyH,OACxC8H,EAASjK,YAAc,GAAGusB,QAAsB,IAAVA,EAAc,IAAM,IAC1E,MACgBtiB,EAASjK,YAAc,YAGvC,CAEI,aAAA4J,GACI,MAAM4iB,EAAOn6B,SAASC,eAAe,WACrC,IAAKk6B,EAAM,OAEX,MAAMvuB,EAAUrL,KAAK+T,oBACrB,IAAK1I,EAAS,OAId,GAFAuuB,EAAK3Y,UAAY,IAEZ5V,EASD,YAPAuuB,EAAK3Y,UAAY,qRAWrB,MAAMnZ,EAAOsC,OAAOtC,KAAKuD,EAAQvD,MAM3B+xB,EAAU,IAAI,IAAIl7B,IAAI,IAAImJ,EADZ,QAAS,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,QACjBmT,OAIjD6e,EAAW/rB,aAAaC,QAAQ,gBAAkB,YAEvC,gBAAb8rB,EACA95B,KAAK+5B,yBAAyBH,EAAMvuB,EAASwuB,GACzB,cAAbC,EACP95B,KAAKg6B,kBAAkBJ,EAAMvuB,EAASwuB,GAEtC75B,KAAKi6B,oBAAoBL,EAAMC,GAInC75B,KAAKk6B,uBAAuBJ,GAG5B,MAAMK,EAAc16B,SAASC,eAAe,aACxCy6B,GAAeA,EAAY5nB,MAAM2B,QACjClU,KAAKo6B,WAAWD,EAAY5nB,MAAM2B,OAE9C,CAEI,mBAAA+lB,CAAoBL,EAAMC,GAEtBD,EAAKvkB,UAAUE,OAAO,eAEtBskB,EAAQvvB,QAAQquB,IACZ,MAAM0B,EAAar6B,KAAKs6B,iBAAiB3B,GACzCiB,EAAKjX,YAAY0X,IAE7B,CAEI,wBAAAN,CAAyBH,EAAMvuB,EAASwuB,GAEpCD,EAAKvkB,UAAUzW,IAAI,eAGnB,MAAM27B,EAAkBv6B,KAAKw6B,eAAenvB,EAAQvD,KAAM+xB,GAGjCzvB,OAAOC,QAAQkwB,GAAiBtf,KAAK,EAAEwf,EAAKC,IAASC,EAAKC,KAC3EF,EAAMviB,WAAayiB,EAAMziB,SAClBuiB,EAAMviB,SAAWyiB,EAAMziB,SAE3BuiB,EAAMt6B,KAAKwe,cAAcgc,EAAMx6B,OAIzBkK,QAAQ,EAAE2pB,EAAY4G,MACnC,MAAMC,EAAkB96B,KAAK+6B,yBAAyB9G,EAAY4G,GAClEjB,EAAKjX,YAAYmY,IAE7B,CAEI,cAAAN,CAAeQ,EAAkBnB,GAC7B,MAAM3X,EAAa,CAAA,EAmEnB,OAhEAA,EAAW+Y,QAAU,CACjB76B,KAAM,UACNC,KAAM,yBACNyH,KAAM,IAAInJ,IACVwZ,SAAU,GAId/N,OAAOC,QAAQpK,SAASC,UAAUoK,QAAQ,EAAE2pB,EAAY4G,MACpD3Y,EAAW+R,GAAc,CACrB7zB,KAAMy6B,EAAaz6B,KACnBC,KAAMw6B,EAAax6B,KACnByH,KAAM,IAAInJ,IACVwZ,SAAU,KAKlB0hB,EAAQvvB,QAAQquB,IACZ,MAAMz4B,EAAW86B,EAAiBrC,IAAY,GAE9C,IAAKz4B,GAAgC,IAApBA,EAASqP,OAEtB,YADA2S,EAAW+Y,QAAQnzB,KAAKlJ,IAAI+5B,GAKhC,MAAMuC,EAAgB,IAAIv8B,IAC1BuB,EAASoK,QAAQ/J,IACb,GAAIA,EAAQK,MAAQshB,EAAW3hB,EAAQK,MACnCs6B,EAAct8B,IAAI2B,EAAQK,WACvB,GAAIb,OAAOmd,YAAa,CAE3B,MAAMie,EAAep7B,OAAOmd,YAAYC,kBAAkB5c,EAAQA,SAC9D2hB,EAAWiZ,IACXD,EAAct8B,IAAIu8B,EAE1C,IAIgBD,EAAczE,KAAO,EACrByE,EAAc5wB,QAAQ2pB,IAClB/R,EAAW+R,GAAYnsB,KAAKlJ,IAAI+5B,MAI/BzW,EAAWkZ,SACZlZ,EAAWkZ,OAAS,CAChBh7B,KAAM,kBACNC,KAAM,aACNyH,KAAM,IAAInJ,IACVwZ,SAAU,IAGlB+J,EAAWkZ,OAAOtzB,KAAKlJ,IAAI+5B,MAKnCvuB,OAAOgB,OAAO8W,GAAY5X,QAAQE,IAC9BA,EAAS1C,KAAOiT,MAAMC,KAAKxQ,EAAS1C,MAAMmT,KAAKjb,KAAKme,YAAY9D,KAAKra,SAGlEkiB,CACf,CAEI,wBAAA6Y,CAAyB9G,EAAY4G,EAAcrvB,EAAO,WACtD,MAAMuX,EAAUtjB,SAASgX,cAAc,OACvCsM,EAAQC,UAAY,WACpBD,EAAQ1B,QAAQ7W,SAAWypB,EAG3B,MAAM1mB,EAAsB,aAAT/B,EAAsB,mBAAmByoB,cAAyB,eAAeA,cAC9FhR,EAAmD,SAArClV,aAAaC,QAAQT,GAEzCwV,EAAQ9B,UAAY,4BACHgC,EAAc,YAAc,sBAAsBgR,iBAA0BzoB,yGAEzEqvB,EAAax6B,gCACvBw6B,EAAaz6B,mDACYy6B,EAAa/yB,KAAKyH,gFAEjB0T,EAAc,YAAc,yBACtD4X,EAAa/yB,KAAKd,IAAI2xB,GAAW34B,KAAKq7B,qBAAqB1C,IAAUvc,KAAK,oCAKrE2G,EAAQjC,cAAc,MAC9BnhB,iBAAiB,QAAS,KAC7BK,KAAKs7B,kBAAkBrH,EAAYlR,EAASvX,KAYhD,OARoBuX,EAAQ5B,iBAAiB,iBACjC7W,QAAQ+vB,IAChBA,EAAW16B,iBAAiB,QAAS,KACjC,MAAMg5B,EAAU0B,EAAWhZ,QAAQ3Y,IACnC1I,KAAK04B,UAAUC,OAIhB5V,CACf,CAEI,oBAAAsY,CAAqB1C,GACjB,MACMz4B,EADUF,KAAK+T,oBACIjM,KAAK6wB,IAAY,GACpC4C,EAAWv7B,KAAK+W,cAAgB4hB,EAGhC6C,EAAY7C,EAAQppB,OAC1B,IAAIksB,EASJ,OAPIA,EADAD,GAAa,EACC,QACPA,GAAa,GACN,SAEA,OAGX,0CACwBD,EAAW,SAAW,iBAAiB5C,mBAAyB8C,gDAC7D9C,6BACxBz4B,EAASqP,OAAS,EAAI,2DACgBrP,EAASqP,kCAC7C,kCAGpB,CAEI,iBAAA+rB,CAAkBrH,EAAYlR,EAASvX,EAAO,WAC1C,MAAM+X,EAASR,EAAQjC,cAAc,MAC/B5gB,EAAW6iB,EAAQjC,cAAc,sBACjC0C,EAAUD,EAAOzC,cAAc,qBAK/BvT,EAAsB,aAAT/B,EAAsB,mBAAmByoB,cAAyB,eAAeA,cAHhF/zB,EAASmV,UAAUqL,SAAS,cAM5CxgB,EAASmV,UAAUE,OAAO,aAC1BgO,EAAOlO,UAAUE,OAAO,aACxBiO,EAAQC,MAAMC,UAAY,gBAC1B3V,aAAae,QAAQvB,EAAY,WAEjCrN,EAASmV,UAAUzW,IAAI,aACvB2kB,EAAOlO,UAAUzW,IAAI,aACrB4kB,EAAQC,MAAMC,UAAY,eAC1B3V,aAAae,QAAQvB,EAAY,QAE7C,CAEI,aAAAmuB,CAAc/C,GAEV,OAAIA,EAAQxoB,SAAS,KAEVwoB,EAAQptB,QAAQ,MAAO,aAE3BotB,CACf,CAEI,cAAAgD,CAAehD,GACX,MAAMiD,EAAQ,GAGd,GAAIjD,EAAQxoB,SAAS,KAAM,CACTwoB,EAAQvd,MAAM,KACF9C,KAAKujB,GAC3BA,EAAKngB,MAAM,+CAIXkgB,EAAM1jB,KAAK,YAE3B,CAGQ,MAAM4jB,EAAUnD,EAAQvd,MAAM,KAAKiN,MAuCnC,OApCIyT,EAAQpgB,MAAM,UAAWkgB,EAAM1jB,KAAK,YAG/B4jB,EAAQpgB,MAAM,8NAA+NkgB,EAAM1jB,KAAK,SAGxP4jB,EAAQpgB,MAAM,qBAAsBkgB,EAAM1jB,KAAK,aAG/C4jB,EAAQpgB,MAAM,6CACdkgB,EAAMzrB,SAAS,cAAcyrB,EAAM1jB,KAAK,aAIxC4jB,EAAQpgB,MAAM,kEAAmEkgB,EAAM1jB,KAAK,cAG5F4jB,EAAQpgB,MAAM,wGAAyGkgB,EAAM1jB,KAAK,UAGlI4jB,EAAQpgB,MAAM,YAGdogB,EAAQpgB,MAAM,cAHYkgB,EAAM1jB,KAAK,gBAMrC4jB,EAAQpgB,MAAM,6CACnBogB,EAAQpgB,MAAM,2FACdkgB,EAAM1jB,KAAK,WAKX0jB,EAAM1jB,KAAK,SAGR0jB,EAAMrsB,OAAS,EAAIqsB,EAAQ,CAAC,QAC3C,CAEI,oBAAAG,CAAqBf,EAAkBnB,GACnC,MAAM3X,EAAa,CACfrZ,SAAU,CACNzI,KAAM,gBACNC,KAAM,kBACNyH,KAAM,IAAInJ,IACVwZ,SAAU,GAEd6jB,aAAc,CACV57B,KAAM,oBACNC,KAAM,cACNyH,KAAM,IAAInJ,IACVwZ,SAAU,GAEd8jB,UAAW,CACP77B,KAAM,YACNC,KAAM,oBACNyH,KAAM,IAAInJ,IACVwZ,SAAU,GAEdpP,UAAW,CACP3I,KAAM,gBACNC,KAAM,oBACNyH,KAAM,IAAInJ,IACVwZ,SAAU,GAEd+jB,WAAY,CACR97B,KAAM,aACNC,KAAM,oBACNyH,KAAM,IAAInJ,IACVwZ,SAAU,GAEd/R,OAAQ,CACJhG,KAAM,cACNC,KAAM,cACNyH,KAAM,IAAInJ,IACVwZ,SAAU,GAEdlP,MAAO,CACH7I,KAAM,gBACNC,KAAM,eACNyH,KAAM,IAAInJ,IACVwZ,SAAU,GAEdnP,QAAS,CACL5I,KAAM,wBACNC,KAAM,YACNyH,KAAM,IAAInJ,IACVwZ,SAAU,GAEdgkB,MAAO,CACH/7B,KAAM,aACNC,KAAM,yBACNyH,KAAM,IAAInJ,IACVwZ,SAAU,IAqBlB,OAhBA0hB,EAAQvvB,QAAQquB,IACK34B,KAAK27B,eAAehD,GAC5BruB,QAAQ8xB,IACTla,EAAWka,GACXla,EAAWka,GAASt0B,KAAKlJ,IAAI+5B,GAE7BzW,EAAWia,MAAMr0B,KAAKlJ,IAAI+5B,OAMtCvuB,OAAOgB,OAAO8W,GAAY5X,QAAQE,IAC9BA,EAAS1C,KAAOiT,MAAMC,KAAKxQ,EAAS1C,MAAMmT,KAAKjb,KAAKme,YAAY9D,KAAKra,SAGlEkiB,CACf,CAEI,iBAAA8X,CAAkBJ,EAAMvuB,EAASwuB,GAE7BD,EAAKvkB,UAAUzW,IAAI,eAGnB,MAAM27B,EAAkBv6B,KAAK+7B,qBAAqB1wB,EAAQvD,KAAM+xB,GAGvCzvB,OAAOC,QAAQkwB,GAAiBtf,KAAK,EAAEwf,EAAKC,IAASC,EAAKC,KACxEF,EAAMviB,SAAWyiB,EAAMziB,UAIjB7N,QAAQ,EAAE2pB,EAAY4G,MACnC,MAAMC,EAAkB96B,KAAK+6B,yBAAyB9G,EAAY4G,EAAc,YAChFjB,EAAKjX,YAAYmY,IAE7B,CAEI,WAAA3c,CAAYxE,EAAG0E,GAEX,MAAMge,EAAkB3zB,GACR,UAARA,EAAwB,EACxBA,EAAIgT,MAAM,WAAmB,EAC7BhT,EAAIgT,MAAM,aAAqB,EAC/BhT,EAAIyH,SAAS,SAAiB,EAC9BzH,EAAIyH,SAAS,QAAgB,EAC7BzH,EAAIyH,SAAS,UAAkB,EAC5B,EAGLmsB,EAAYD,EAAe1iB,GAC3B4iB,EAAYF,EAAehe,GAEjC,OAAIie,IAAcC,EACPD,EAAYC,EAGhB5iB,EAAEiF,cAAcP,EAC/B,CAEI,gBAAAic,CAAiB3B,GACb,MACMz4B,EADUF,KAAK+T,oBACIjM,KAAK6wB,IAAY,GACpC6D,EAAa7D,IAAY34B,KAAK+W,YAE9BsjB,EAAa56B,SAASgX,cAAc,OAC1C4jB,EAAWrX,UAAY,aAAYwZ,EAAa,SAAW,IAC3DnC,EAAWhZ,QAAQ3Y,IAAMiwB,EACzB0B,EAAWzmB,MAAQ,GAAG+kB,MAAYz4B,EAASqP,iBAAqC,IAApBrP,EAASqP,OAAe,IAAM,KAG1F,MAAMktB,EAAmBz8B,KAAK07B,cAAc/C,GAI5C,IAAI8C,EACJ,GAJsBgB,EAAiBtsB,SAAS,QAI7B,CAEf,MAAMusB,EAAQ/D,EAAQvd,MAAM,KACtBuhB,EAAc/qB,KAAKzP,OAAOu6B,EAAM11B,IAAI60B,GAAQA,EAAKtsB,SAEnDksB,EADAkB,GAAe,EACD,QACPA,GAAe,EACR,SAEA,MAE9B,KAAwB,CAEX,MAAMnB,EAAY7C,EAAQppB,OAEtBksB,EADAD,GAAa,EACC,QACPA,GAAa,EACN,SACPA,GAAa,EACN,OAEA,YAE/B,CAgBQ,OAdCnB,EAAWhZ,QAAQ9R,OAASksB,EAE7BpB,EAAWpZ,UAAY,wCACMwb,wBACvBv8B,EAASqP,OAAS,EAAI,6DACsBqC,KAAK1P,IAAsB,GAAlBhC,EAASqP,OAAa,mEACtCrP,EAASqP,6BAC5C,eAGR8qB,EAAW16B,iBAAiB,QAAS,KACjCK,KAAK04B,UAAUC,KAGZ0B,CACf,CAEI,sBAAAH,CAAuBJ,GACnB,MAAM8C,EAAYn9B,SAASC,eAAe,oBAC1C,GAAIk9B,EAAW,CACX,MAAMv8B,EAAOu8B,EAAU9b,cAAc,KACpB,gBAAbgZ,GACAz5B,EAAK2iB,UAAY,iBACjB4Z,EAAUhpB,MAAQ,2BACE,cAAbkmB,GACPz5B,EAAK2iB,UAAY,YACjB4Z,EAAUhpB,MAAQ,wBAElBvT,EAAK2iB,UAAY,cACjB4Z,EAAUhpB,MAAQ,+BAElC,CACA,CAEI,aAAAipB,GACI,MAAM7F,EAAcjpB,aAAaC,QAAQ,gBAAkB,YAC3D,IAAI8uB,EAIAA,EADgB,cAAhB9F,EACU,OACa,SAAhBA,EACG,cAEA,YAGdjpB,aAAae,QAAQ,cAAeguB,GACpC98B,KAAKgX,eACb,CAEI,kBAAAC,GACI,MAAM+J,EAAYvhB,SAASC,eAAe,eACpCkU,EAAQnU,SAASC,eAAe,cAChCuiB,EAAUxiB,SAASC,eAAe,kBAClC4X,EAAe7X,SAASC,eAAe,gBACvCq9B,EAAat9B,SAASC,eAAe,cAE3C,IAAKshB,IAAcpN,IAAUqO,EAAS,OAEtC,IAAKjiB,KAAK+W,YAMN,OALAnD,EAAMxG,YAAc,uBACpB6U,EAAQ7U,YAAc,4CAClBkK,IAAcA,EAAalK,YAAc,cACzC2vB,IAAYA,EAAWtZ,MAAM3Y,QAAU,cAC3CkW,EAAUC,UAAY,qLAI1B,MACM/gB,EADUF,KAAK+T,oBACIjM,KAAK9H,KAAK+W,cAAgB,GAKnD,GAHAnD,EAAMxG,YAAc,qBAAqBpN,KAAK+W,cAC1CO,IAAcA,EAAalK,YAAc,GAAGlN,EAASqP,iBAAqC,IAApBrP,EAASqP,OAAe,IAAM,MAEhF,IAApBrP,EAASqP,OACTyR,EAAUC,UAAY,sOAIoDjhB,KAAK+W,yDAG/EkL,EAAQ7U,YAAc,GAAGpN,KAAK+W,qBAC3B,CACHiK,EAAUC,UAAY,GACtB/gB,EAASoK,QAAQ,CAAC/J,EAASib,KACvB,MAAMuH,EAAU/iB,KAAKg9B,qBAAqBz8B,EAASib,GACnDwF,EAAU2B,YAAYI,KAI1B,MAAM6V,EAAoBn5B,SAASC,eAAe,2BAGlD,IAAIoc,EAEAA,EAJoB8c,GAAqBA,EAAkBvO,SAGxCnqB,EAASqP,OAAS,EACrB2G,YAAYiG,8BAA8Bjc,GAE1CA,EAAS8G,IAAIuR,GAAOA,EAAIhY,SAAS6b,KAAK,QAG1D6F,EAAQ7U,YAAc,GAAGpN,KAAK+W,gBAAgB+E,IAC1D,CACA,CAEI,oBAAAkhB,CAAqBz8B,EAASib,GAC1B,MAAMuH,EAAUtjB,SAASgX,cAAc,OACvCsM,EAAQC,UAAY,mBACpBD,EAAQ1B,QAAQ7F,MAAQA,EACxBuH,EAAQka,WAAY,EAGpB,MAAMC,EAAal9B,KAAKm9B,sBAAsB58B,GACxC68B,EAAkBF,GAAcA,EAAWz8B,aAGjD,IAAI48B,EAAc98B,EAAQyH,KACtBs1B,EAAc/8B,EAAQF,KAE1B,GAAI68B,EAKA,GAJAG,EAAcH,EAAW98B,KACzBk9B,EAAcJ,EAAW78B,KAGrB+8B,GAAmB78B,EAAQG,YAC3B,GAA6B,qBAAzBw8B,EAAWzO,UAAkC,CAC7C,MAAMpa,EAAI9T,EAAQG,WAClB28B,EAAc,GAAGH,EAAW98B,SAASiU,EAAE7R,UAAU6R,EAAErS,QAAQqS,EAAEjS,QAAQiS,EAAE5R,eAAe4R,EAAE3R,cAC5G,MAAuB,GAA6B,gBAAzBw6B,EAAWzO,UAA6B,CAC/C,MAAMpa,EAAI9T,EAAQG,WAClB28B,EAAc,GAAGH,EAAW98B,SAASiU,EAAErS,QAAQqS,EAAEjS,OACrE,MAAuB,GAA6B,WAAzB86B,EAAWzO,UAAwB,CAC1C,MAAMpa,EAAI9T,EAAQG,WAClB28B,EAAc,GAAGH,EAAW98B,SAASiU,EAAE1T,YAC3D,OACmB,GAAIy8B,EAEP,GAAI78B,EAAQA,QAAQ4P,SAAS,4BAA6B,CACtD,MAAMusB,EAAQn8B,EAAQA,QAAQ6a,MAAM,KAChCshB,EAAMntB,QAAU,IAChB8tB,EAAc,GAAGH,EAAW98B,SAASs8B,EAAM,MAAMA,EAAM,MAAMA,EAAM,MAAMA,EAAM,MAAMA,EAAM,MAEnH,MAAuB,GAAIn8B,EAAQA,QAAQ4P,SAAS,YAAa,CAC7C,MAAMusB,EAAQn8B,EAAQA,QAAQgL,QAAQ,IAAK,IAAI6P,MAAM,KACjDshB,EAAMntB,QAAU,IAChB8tB,EAAc,GAAGH,EAAW98B,SAASs8B,EAAM,MAAMA,EAAM,MAE/E,MAAuB,GAAIn8B,EAAQA,QAAQ4P,SAAS,WAAY,CAC5C,MAAMuL,EAAQnb,EAAQA,QAAQmb,MAAM,oBAChCA,IACA2hB,EAAc,GAAGH,EAAW98B,SAASsb,EAAM,KAEnE,CAKY0hB,IACAra,EAAQ1B,QAAQ3gB,WAAa,OAC7BqiB,EAAQ1N,UAAUzW,IAAI,iBAI1B,MAAM2+B,EAAcv9B,KAAKw9B,kBAAkBj9B,GACrCk9B,EAAcF,EAAc,6CAA6CA,wDAAoE,GAG7IG,EAAqBN,EAAkB,uEAAyE,GA4BtH,OA1BAra,EAAQ9B,UAAY,6CACczF,EAAQ,kGAEL8hB,wDACAD,IAAcK,6BACzCD,gEAEsBl9B,EAAQK,SAASL,EAAQK,uIAEa4a,oMAGcxb,KAAK+W,iBAAiByE,0LAGnCxb,KAAK+W,iBAAiByE,MAAUA,EAAQ,iDACnE,IAAVA,EAAc,WAAa,uKAGUxb,KAAK+W,iBAAiByE,MAAUA,EAAQ,mDAC3EA,IAAUxb,KAAK+T,oBAAoBjM,KAAK9H,KAAK+W,aAAaxH,OAAS,EAAI,WAAa,wHAMjHwT,CACf,CAEI,iBAAAya,CAAkBj9B,GAEd,MAAM2hB,EAAajiB,SAASC,SAE5B,IAAK,MAAO+zB,EAAYzpB,KAAaJ,OAAOC,QAAQ6X,GAChD,IAAK,MAAOgS,EAAOyJ,KAAYvzB,OAAOC,QAAQG,EAAStK,UAEnD,GAAIy9B,EAAQp9B,UAAYA,EAAQA,SAC5Bo9B,EAAQv9B,OAASG,EAAQyH,MACzBzH,EAAQA,QAAQ4P,SAASwtB,EAAQp9B,SACjC,OAAOo9B,EAAQj8B,SAAW,KAKtC,OAAO,IACf,CAEI,mBAAA+1B,GACI,MAAMzW,EAAYvhB,SAASC,eAAe,qBACrCshB,IAELA,EAAUC,UAAY,GAEtB7W,OAAOC,QAAQpK,SAASC,UAAUoK,QAAQ,EAAE2pB,EAAYzpB,MACpD,MAAMswB,EAAkB96B,KAAK49B,sBAAsB3J,EAAYzpB,GAC/DwW,EAAU2B,YAAYmY,KAI1B96B,KAAK69B,uBACb,CAEI,qBAAAD,CAAsB3J,EAAYzpB,GAC9B,MAAMuY,EAAUtjB,SAASgX,cAAc,OACvCsM,EAAQC,UAAY,WACpBD,EAAQ1B,QAAQ7W,SAAWypB,EAG3B,MAAM1mB,EAAa,mBAAmB0mB,cAChChR,EAAmD,SAArClV,aAAaC,QAAQT,GAEzCwV,EAAQ9B,UAAY,4BACHgC,EAAc,YAAc,sBAAsBgR,yGAE/CzpB,EAASnK,gCACnBmK,EAASpK,sDACoBgK,OAAOtC,KAAK0C,EAAStK,UAAUqP,gFAElC0T,EAAc,YAAc,yBACtD7Y,OAAOC,QAAQG,EAAStK,UAAU8G,IAAI,EAAEktB,EAAO3b,KAAS,kDAC3BA,EAAI9X,aAAe,eAAiB,qBAAqByzB,aAAiB3b,EAAIjY,cAAciY,EAAI9X,aAAe,kBAAoB,iCACxJ8X,EAAIlY,QAAQkY,EAAInY,OAAOmY,EAAI9X,aAAe,2CAA6C,oDAE9F2b,KAAK,oCAkBhB,OAbe2G,EAAQjC,cAAc,MAC9BnhB,iBAAiB,QAAS,KAC7BK,KAAK89B,sBAAsB7J,EAAYlR,KAI3CA,EAAQpjB,iBAAiB,QAAUE,IAC/B,GAAIA,EAAEP,OAAO+V,UAAUqL,SAAS,gBAAiB,CAC7C,MAAM+N,EAAY5uB,EAAEP,OAAO+hB,QAAQ9gB,QACnCP,KAAK+9B,sBAAsB9J,EAAYxF,EACvD,IAGe1L,CACf,CAEI,qBAAA+a,CAAsB7J,EAAYlR,GAC9B,MAAMQ,EAASR,EAAQjC,cAAc,MAC/B5gB,EAAW6iB,EAAQjC,cAAc,sBACjC0C,EAAUD,EAAOzC,cAAc,qBAG/BvT,EAAa,mBAAmB0mB,cADlB/zB,EAASmV,UAAUqL,SAAS,cAI5CxgB,EAASmV,UAAUE,OAAO,aAC1BgO,EAAOlO,UAAUE,OAAO,aACxBiO,EAAQC,MAAMC,UAAY,gBAC1B3V,aAAae,QAAQvB,EAAY,WAEjCrN,EAASmV,UAAUzW,IAAI,aACvB2kB,EAAOlO,UAAUzW,IAAI,aACrB4kB,EAAQC,MAAMC,UAAY,eAC1B3V,aAAae,QAAQvB,EAAY,QAE7C,CAEI,qBAAAwwB,CAAsB9J,EAAYxF,GAC9B,IAAKzuB,KAAK+W,YAEN,YADA/C,MAAMC,UAAU,4BAA6B,WAIjD,MAAMipB,EAAaj9B,SAASC,SAAS+zB,GAAY/zB,SAASuuB,GAC1D,IAAKyO,EAAY,OAGjB,GAAIA,EAAWz8B,cAAgBy8B,EAAWx8B,WAEtC,YADAV,KAAKg+B,mBAAmB/J,EAAYxF,EAAWyO,GAInD,MAAM38B,EAAU,CACZA,QAAS28B,EAAW38B,QACpBK,KAAMqzB,EACN5zB,KAAM68B,EAAW78B,KACjB2H,KAAMk1B,EAAW98B,KACjB6H,GAAIjI,KAAKmZ,qBAGbnZ,KAAK8hB,WAAW9hB,KAAK+W,YAAaxW,EAC1C,CAEI,gBAAAm3B,GACI,MAAMuG,EAAcx+B,SAASC,eAAe,eACvCu+B,GAELjqB,MAAM8W,gBAAgBmT,EAAa,CAC/BlT,aAAc,oBACdC,iBAAkB,oBAClBG,OAAQ,CAACtrB,EAAGmpB,EAAWuC,KACnB,IAAKvrB,KAAK+W,YAAa,OAEvB,MAAMuiB,EAAY/b,SAASyL,EAAUE,YAAY7H,QAAQ7F,OACnD+d,EAAUhc,SAASgO,EAASlK,QAAQ7F,OAEtC8d,IAAcC,GACdv5B,KAAKq5B,YAAYr5B,KAAK+W,YAAauiB,EAAWC,KAIlE,CAEI,kBAAAT,GACI,MAAMoF,IAAmBl+B,KAAK+W,YAIN,CACpB,gBACA,qBACA,mBACA,eACA,mBAGYzM,QAAQ6zB,IACpB,MAAMzE,EAAMj6B,SAASC,eAAey+B,GAChCzE,IACAA,EAAI9X,UAAYsc,IAGhC,CAGI,mBAAA/rB,GAEI,MAAMC,EAAgB3S,SAASC,eAAe,iBAC9C0S,GAAezS,iBAAiB,SAAWE,IACvCG,KAAKsS,cAAczS,EAAEP,OAAOiT,SAIhC9S,SAAS0hB,iBAAiB,aAAa7W,QAAQovB,IAC3CA,EAAI/5B,iBAAiB,QAAUE,IAC3B,MAAM2L,EAAO3L,EAAEP,OAAO+hB,QAAQ7V,KAC9BxL,KAAKo+B,WAAW5yB,OAKxBpM,SAASC,MAAM,iBAAkB,QAAS,eAAgB,KACtDW,KAAKq+B,gBAGTj/B,SAASC,MAAM,iBAAkB,QAAS,eAAgB,KACtDW,KAAKs+B,gBAGTl/B,SAASC,MAAM,oBAAqB,QAAS,kBAAmB,KAC5DW,KAAKmT,mBAIT/T,SAASC,MAAM,aAAc,QAAS,eAAgB,KAClDW,KAAKu+B,qBAITn/B,SAASC,MAAM,YAAa,QAAS,UAAW,KAC5CW,KAAKw+B,0BAGTp/B,SAASC,MAAM,eAAgB,QAAS,aAAc,KAC9CW,KAAK+W,aACL/W,KAAKy+B,iBAAiBz+B,KAAK+W,eAInC3X,SAASC,MAAM,kBAAmB,QAAS,gBAAiB,KACpDW,KAAK+W,aACL/W,KAAK0+B,aAAa1+B,KAAK+W,eAK/B3X,SAASC,MAAM,gBAAiB,QAAS,cAAe,KACpDoU,aAAaC,KAAK,qBAGtBtU,SAASC,MAAM,qBAAsB,QAAS,uBAAwB,KAClEW,KAAK2+B,sBAGTv/B,SAASC,MAAM,gBAAiB,QAAS,sBAAuB,KACxDW,KAAK+W,aACL/W,KAAK4+B,kBAAkB5+B,KAAK+W,eAIpC3X,SAASC,MAAM,mBAAoB,QAAS,yBAA0B,KAClEW,KAAK6+B,yBAITz/B,SAASC,MAAM,0BAA2B,SAAU,mBAAqBQ,IAErE,GAAIG,KAAK+W,YAAa,CAClB,MAAM5F,EAAMnR,KAAK2H,mBACXm3B,EAAgBxxB,WAAW0B,WAAWhP,KAAKqP,gBAC7CyvB,IACKA,EAAcjhB,kBACfihB,EAAcjhB,gBAAkB,IAE/BihB,EAAcjhB,gBAAgB1M,KAC/B2tB,EAAcjhB,gBAAgB1M,GAAO,IAEpC2tB,EAAcjhB,gBAAgB1M,GAAKnR,KAAK+W,eACzC+nB,EAAcjhB,gBAAgB1M,GAAKnR,KAAK+W,aAAe,IAE3D+nB,EAAcjhB,gBAAgB1M,GAAKnR,KAAK+W,aAAa+G,wBAA0Bje,EAAEP,OAAO+qB,QAGxF/c,WAAW6B,YAAYnP,KAAKqP,eAAgByvB,GAC5C9+B,KAAK8U,aAAY,GAErC,CACY9U,KAAKiX,uBAIT7X,SAASC,MAAM,YAAa,QAAS,aAAeQ,IAChDG,KAAKo6B,WAAWv6B,EAAEP,OAAOiT,SAG7BnT,SAASC,MAAM,gBAAiB,QAAS,iBAAmBQ,IACxDG,KAAK++B,eAAel/B,EAAEP,OAAOiT,SAGjCnT,SAASC,MAAM,iBAAkB,QAAS,gBAAiB,KACvDW,KAAKg/B,gBAIT5/B,SAASC,MAAM,mBAAoB,QAAS,kBAAmB,KAC3DW,KAAK68B,kBAITz9B,SAASC,MAAM,mBAAoB,QAAS,iBAAkB,KAC1DW,KAAKi/B,kBAITj/B,KAAKk/B,qBAGLC,YAAY,KACJn/B,KAAKi3B,YACLj3B,KAAKg4B,YAEV,IACX,CAEI,kBAAAkH,GAEI9/B,SAASC,MAAM,mBAAoB,QAAS,kBAAmB,KAC3D,MAAMs5B,EAAUl5B,SAASC,eAAe,eAAe6S,MAAM2B,OACzDykB,IACA34B,KAAK+4B,OAAOJ,GACZllB,aAAagB,KAAK,kBAK1BhV,SAAS0hB,iBAAiB,mBAAmB7W,QAAQovB,IACjDA,EAAI/5B,iBAAiB,QAAUE,IAC3B,MAAM84B,EAAU94B,EAAEP,OAAO+hB,QAAQ3Y,IAC3BgN,EAAQjW,SAASC,eAAe,cAClCgW,IACAA,EAAMnD,MAAQomB,OAM1Bv5B,SAASC,MAAM,iBAAkB,QAAS,eAAgB,KACtDW,KAAKo/B,yBAIT3/B,SAAS0hB,iBAAiB,8BAA8B7W,QAAQovB,IAC5DA,EAAI/5B,iBAAiB,QAAUE,IAC3B,MAAMmqB,EAAUnqB,EAAEP,OAAO+hB,QAAQuH,OAAS/oB,EAAEP,OAAO8V,QAAQ,UAAUiM,QAAQuH,MACzEoB,IACAvW,aAAagB,KAAKuV,GAGF,iBAAZA,IAEIhqB,KAAKq/B,sBAAwBr/B,KAAKs/B,gBAClCzJ,eAAeC,gBAAgBjuB,MAAQ,IAAIlJ,IAAIqB,KAAKq/B,oBAAoBvJ,gBAAgBjuB,OACxFguB,eAAeC,gBAAgBxtB,OAAS,IAAI3J,IAAIqB,KAAKq/B,oBAAoBvJ,gBAAgBxtB,QACzFutB,eAAeE,cAAgB/1B,KAAKq/B,oBAAoBtJ,sBAIrD/1B,KAAKq/B,oBACZr/B,KAAKs/B,eAAgB,OAK7C,CAGI,WAAAnwB,GACI,MAAMowB,EAAiBv/B,KAAK+T,oBAE5B,IAAKwrB,EACD,OAIJv/B,KAAKw/B,mBAGL,MAAMhiB,EAAgBlQ,WAAW0B,WAAWhP,KAAKqP,gBACjD,IAAKmO,EACD,OAKJ,MAAMiiB,EAAiB,IAChBjiB,EAEHpd,KAAMm/B,EAAen/B,KACrBE,YAAai/B,EAAej/B,aAAekd,EAAcld,YACzD4H,QAASq3B,EAAer3B,SAAW,CAAA,EACnC2V,gBAAiB0hB,EAAe1hB,iBAAmBL,EAAcK,gBAEjEnS,QAAS8R,EAAc9R,QACvBkD,cAAc,IAAIjD,MAAOC,cACzBjE,mBAAoB3H,KAAK2H,oBAG7B2F,WAAW6B,YAAYnP,KAAKqP,eAAgBowB,EACpD,CAEI,UAAArB,CAAW5yB,GACP,GAAIxL,KAAK2H,qBAAuB6D,EAAM,CAElCxL,KAAKw/B,mBAELx/B,KAAK2H,mBAAqB6D,EAG1B,MAAMH,EAAUiC,WAAW0B,WAAWhP,KAAKqP,gBACvChE,IACAA,EAAQ1D,mBAAqB6D,EAC7B8B,WAAW6B,YAAYnP,KAAKqP,eAAgBhE,IAIhDrL,KAAK0/B,oBAEL1/B,KAAKkX,oBACLlX,KAAKgX,gBACLhX,KAAKiX,qBACLjX,KAAK69B,uBACL79B,KAAK8U,aAAY,GAEjBd,MAAMC,UAAU,eAAezI,SAAa,UACxD,CACA,CAEI,iBAAAk0B,GAEI,MAAMC,EAAWlgC,SAASqhB,cAAc,uBAClC8e,EAAYngC,SAASqhB,cAAc,wBAErC6e,GAAYC,IACZD,EAAStqB,UAAUC,OAAO,SAAsC,UAA5BtV,KAAK2H,oBACzCi4B,EAAUvqB,UAAUC,OAAO,SAAsC,WAA5BtV,KAAK2H,oBAEtD,CAEI,gBAAA63B,GACI,MAAMn0B,EAAUiC,WAAW0B,WAAWhP,KAAKqP,gBACrC8oB,EAAen4B,KAAK+T,oBAEtB1I,GAAW8sB,IAEN9sB,EAAQzD,SACTyD,EAAQzD,OAAS,CACbC,MAAO,CAAEC,KAAM,IACfQ,OAAQ,CAAER,KAAM,MAKxBuD,EAAQzD,OAAO5H,KAAK2H,oBAAsB,CACtCG,KAAMqwB,EAAarwB,MAAQ,CAAA,GAI/BwF,WAAW6B,YAAYnP,KAAKqP,eAAgBhE,GAExD,CAEI,sBAAMozB,CAAiB9F,SACK3kB,MAAMe,QAC1B,4CAA4C4jB,2BAC5C,aACA,WAIA34B,KAAKi5B,UAAUN,EAE3B,CAEI,uBAAMiG,CAAkBjG,GAOpB,SANwB3kB,MAAMe,QAC1B,oDAAoD4jB,MACpD,iBACA,WAGW,CACK34B,KAAK+T,oBACbjM,KAAK6wB,GAAW,GACxB34B,KAAKw/B,mBACLx/B,KAAKiX,qBACLjX,KAAKgX,gBACLhX,KAAK8U,aAAY,GAEjBd,MAAMC,UAAU,wBAAwB0kB,IAAW,UAC/D,CACA,CAEI,WAAA0F,GACI,MAAM3oB,EAAQjW,SAASC,eAAe,aACtCgW,EAAMC,OAAS,QACfD,EAAME,SAAY/V,IACd,MAAMgW,EAAOhW,EAAEP,OAAOwW,MAAM,GAC5B,GAAID,EAAM,CACN,MAAME,EAAS,IAAIC,WACnBD,EAAOE,OAAUpW,IACb,IACoByN,WAAW0C,WAAWnQ,EAAEP,OAAO8W,SAE3CpW,KAAKu3B,WACLv3B,KAAK2U,iBACL3U,KAAKgX,gBACLhX,KAAKiX,qBACLjD,MAAMC,UAAU,8BAA+B,YAE/CD,MAAMC,UAAU,8BAA+B,QAE3E,CAAsB,MAAO9U,GACL6U,MAAMC,UAAU,uBAAwB,QAChE,GAEgB8B,EAAOM,WAAWR,EAClC,GAEQH,EAAMY,OACd,CAEI,WAAAgoB,GACI,MAAMxwB,EAAOR,WAAWyC,aAClBuJ,EAAO,IAAIC,KAAK,CAACzL,GAAO,CAAElN,KAAM,qBAChC4Y,EAAMC,IAAIC,gBAAgBJ,GAC1BK,EAAIla,SAASgX,cAAc,KACjCkD,EAAEC,KAAOJ,EACTG,EAAEE,SAAW,oBACbF,EAAErD,QACFmD,IAAIK,gBAAgBN,GAEpBxF,MAAMC,UAAU,gCAAiC,UACzD,CAEI,cAAAd,GACI,MAAM9H,EAAUrL,KAAK+T,oBACrB,IAAK1I,EAAS,OAGd,MAAMqL,EAAUH,UAAUiP,uBAAuBna,EAAS,CAAE5J,YAAazB,KAAK2H,qBAGxE2R,EAAO,IAAIC,KAAK,CAAC7C,GAAU,CAAE9V,KAAM,eACnC4Y,EAAMC,IAAIC,gBAAgBJ,GAC1BK,EAAIla,SAASgX,cAAc,KACjCkD,EAAEC,KAAOJ,EAGT,MAAMkO,EAAWrc,EAAQjL,KAAKmL,QAAQ,gBAAiB,KACvDoO,EAAEE,SAAW,GAAG6N,KAAY1nB,KAAK2H,kCACjCgS,EAAErD,QACFmD,IAAIK,gBAAgBN,GAEpBxF,MAAMC,UAAU,GAAGjU,KAAK2H,oDAAqD,UACrF,CAEI,WAAAiwB,GACI,OAAQ7pB,aAAaC,QAAQ,8BACrC,CAEI,kBAAA6pB,GACI9pB,aAAae,QAAQ,8BAA+B,QACpD2E,aAAaC,KAAK,aAC1B,CAGI,YAAAgrB,CAAa/F,GACT,MAAMttB,EAAUrL,KAAK+T,oBACf7T,EAAWmL,EAAQvD,KAAK6wB,GAE9B,IAAKz4B,GAAgC,IAApBA,EAASqP,OAEtB,YADAyE,MAAMC,UAAU,2BAA4B,WAKhD,IAAI4rB,EAAalH,EAAU,QACvBzf,EAAU,EAEd,KAAO7N,EAAQvD,KAAK+3B,IAChBA,EAAa,GAAGlH,UAAgBzf,IAChCA,IAIJ,MAAM4mB,EAAiB5/B,EAAS8G,IAAIuR,IAAG,IAChCA,EACHtQ,GAAIjI,KAAKmZ,uBAGb9N,EAAQvD,KAAK+3B,GAAcC,EAC3BxyB,WAAW6B,YAAYnP,KAAKqP,eAAgBhE,GAC5CrL,KAAKgX,gBACLhX,KAAK8U,aAAY,GAEjBd,MAAMC,UAAU,QAAQ0kB,qBAA2BkH,KAAe,UAC1E,CAEI,iBAAAlB,GACI3qB,MAAMC,UAAU,8BAA+B,OACvD,CAEI,oBAAA4qB,GACI,IAAK7+B,KAAK+W,YAEN,YADA/C,MAAMC,UAAU,kBAAmB,WAIvC,MACM/T,EADUF,KAAK+T,oBACIjM,KAAK9H,KAAK+W,cAAgB,GAEnD,GAAwB,IAApB7W,EAASqP,OAET,YADAyE,MAAMC,UAAU,0BAA2B,WAI/C,MAAM9K,EAAa+M,YAAYkJ,gBAAgBpf,KAAK+W,YAAa7W,GAEjE,GAAIiJ,EAAWkW,MACXrL,MAAMC,UAAU,yBAA0B,eACvC,CACH,MAAM8rB,EAAW,uBAAyB52B,EAAWmS,OAAOc,KAAK,MACjEpI,MAAMC,UAAU8rB,EAAU,QAAS,IAC/C,CACA,CAEI,UAAA3F,CAAWzd,GACP,MAAM4C,EAAc5C,EAAOrR,cAGV7L,SAAS0hB,iBAAiB,aAClC7W,QAAQ01B,IACb,MAAMrH,EAAUqH,EAAK3e,QAAQ3Y,IAAI4C,cAC3B20B,GAAWtjB,GAAUgc,EAAQxoB,SAASoP,GAC5CygB,EAAKvc,MAAM3Y,QAAUm1B,EAAU,OAAS,SAIvBxgC,SAAS0hB,iBAAiB,2BAClC7W,QAAQ01B,IACjB,MAAMrH,EAAUqH,EAAK3e,QAAQ3Y,IAAI4C,cAC3B20B,GAAWtjB,GAAUgc,EAAQxoB,SAASoP,GAC5CygB,EAAKvc,MAAM3Y,QAAUm1B,EAAU,OAAS,SAIzBxgC,SAAS0hB,iBAAiB,aAClC7W,QAAQE,IACf,MAAM01B,EAAc11B,EAAS2W,iBAAiB,yDACxCgf,GAAmBxjB,GAAUujB,EAAY3wB,OAAS,EACxD/E,EAASiZ,MAAM3Y,QAAUq1B,EAAkB,QAAU,QAEjE,CAEI,cAAApB,CAAepiB,GACX,MAAMyjB,EAAe3gC,SAAS0hB,iBAAiB,iBACzC5B,EAAc5C,EAAOrR,cAG3B80B,EAAa91B,QAAQ01B,IACjB,MAAMh4B,EAAOg4B,EAAK5yB,YAAY9B,cACxB20B,GAAWtjB,GAAU3U,EAAKmI,SAASoP,GACzCygB,EAAKvc,MAAM3Y,QAAUm1B,EAAU,OAAS,SAIzBxgC,SAAS0hB,iBAAiB,aAClC7W,QAAQE,IACf,MAAM61B,EAAkB71B,EAAS2W,iBAAiB,+CAC5Cgf,GAAmBxjB,GAAU0jB,EAAgB9wB,OAAS,EAC5D/E,EAASiZ,MAAM3Y,QAAUq1B,EAAkB,QAAU,QAEjE,CAEI,WAAAnB,GAEqBv/B,SAAS0hB,iBAAiB,aAClC7W,QAAQ01B,IACbA,EAAKvc,MAAM3Y,QAAU,SAIJrL,SAAS0hB,iBAAiB,2BAClC7W,QAAQ01B,IACjBA,EAAKvc,MAAM3Y,QAAU,SAINrL,SAAS0hB,iBAAiB,aAClC7W,QAAQE,IACfA,EAASiZ,MAAM3Y,QAAU,UAG7B,MAAMqvB,EAAc16B,SAASC,eAAe,aACxCy6B,IACAA,EAAY5nB,MAAQ,GAEhC,CAEI,aAAA0sB,GACI,MAAMvoB,EAAUjX,SAASC,eAAe,kBAClCg6B,EAAMj6B,SAASC,eAAe,oBAEpC,GAAIgX,GAAWgjB,EAAK,CAChB,MAAMzW,EAAwC,SAA1BvM,EAAQ+M,MAAM3Y,QAClC4L,EAAQ+M,MAAM3Y,QAAUmY,EAAc,QAAU,OAEhD,MAAM5iB,EAAOq5B,EAAI5Y,cAAc,KAC3BzgB,IACAA,EAAK2iB,UAAYC,EAAc,oBAAsB,sBAErE,CACA,CAEI,oBAAAmc,GACI,IAAKp/B,KAAK+W,YAEN,YADA/C,MAAMC,UAAU,4BAA6B,WAIjD,MAAM1T,EAAU2c,YAAYkW,oBAC5B,IAAK7yB,EAED,YADAyT,MAAMC,UAAU,6BAA8B,WAIlD,MAAM9K,EAAa+T,YAAYmW,gBAAgB9yB,GAC1C4I,EAAWkW,OAKhBrf,KAAK8hB,WAAW9hB,KAAK+W,YAAaxW,GAClCkT,aAAagB,KAAK,oBALdT,MAAMC,UAAU9K,EAAWhK,MAAO,QAM9C,CAGI,kBAAA6+B,CAAmB/J,EAAYxF,EAAWyO,GACtCl9B,KAAKsgC,wBAA0B,CAAErM,aAAYxF,YAAWyO,cAGnDz9B,SAASC,eAAe,mBACzBM,KAAKugC,uBAITvgC,KAAKwgC,uBAAuBtD,GAG5BzpB,aAAaC,KAAK,iBAC1B,CAEI,oBAAA6sB,GACI,MAAM3X,EAAQnpB,SAASgX,cAAc,OACrCmS,EAAM5F,UAAY,QAClB4F,EAAM3gB,GAAK,iBACX2gB,EAAM3H,UAAY,osCA0BlBxhB,SAASmoB,KAAKjF,YAAYiG,GAG1BxpB,SAASC,MAAM,0BAA2B,QAAS,yBAA0B,KACzEW,KAAKygC,yBAIY7X,EAAMzH,iBAAiB,+CAC/B7W,QAAQo2B,IACjBA,EAAO/gC,iBAAiB,QAAS,KAC7BK,KAAK2gC,4BAGrB,CAEI,sBAAAA,GAEI3gC,KAAKsgC,wBAA0B,KAG/B,MAAMxP,EAAUrxB,SAASC,eAAe,2BACpCoxB,IACAA,EAAQ1jB,YAAc,eAI1BqG,aAAagB,KAAK,iBAC1B,CAEI,sBAAA+rB,CAAuBtD,GACnB,MAAMlc,EAAYvhB,SAASC,eAAe,mBACrBD,SAASC,eAAe,uBAEhC0N,YAAc,cAAc8vB,EAAW98B,OACpD4gB,EAAUC,UAAY,GAGtB7W,OAAOC,QAAQ6yB,EAAWx8B,YAAY4J,QAAQ,EAAEs2B,EAAWC,MACvD,MAAMC,EAAarhC,SAASgX,cAAc,OAC1CqqB,EAAW9d,UAAY,aAEvB,MAAM/V,EAAQxN,SAASgX,cAAc,SAIrC,IAAIf,EAGJ,GANAzI,EAAMG,YAAcpN,KAAK+gC,oBAAoBH,GAC7C3zB,EAAMmoB,aAAa,MAAO,SAASwL,KAKjB,YAAdA,EAAyB,CACzB,MAAMhQ,EAAiBnxB,SAASgX,cAAc,OAC9Cma,EAAe5N,UAAY,oBAE3BtN,EAAQjW,SAASgX,cAAc,SAC/Bf,EAAM9U,KAAO,OACb8U,EAAMzN,GAAK,SAAS24B,IACpBlrB,EAAMtV,KAAOwgC,EACblrB,EAAMnD,MAAQsuB,EAAShgC,SAAW,GAE9BggC,EAAS//B,cACT4U,EAAM5U,YAAc+/B,EAAS//B,aAGjC,MAAMkgC,EAAevhC,SAASgX,cAAc,UAC5CuqB,EAAapgC,KAAO,SACpBogC,EAAahe,UAAY,kCACzBge,EAAaptB,MAAQ,0BACrBotB,EAAa/f,UAAY,4CAEzB2P,EAAejO,YAAYjN,GAC3Bkb,EAAejO,YAAYqe,GAE3B,MAAMC,EAAOxhC,SAASgX,cAAc,SACpCwqB,EAAK7zB,YAAcpN,KAAKkhC,iBAAiBN,EAAWC,GAEpD,MAAMM,EAAe1hC,SAASgX,cAAc,OAC5C0qB,EAAane,UAAY,gBACzBme,EAAalgB,UAAY,sFAEzB6f,EAAWne,YAAY1V,GACvB6zB,EAAWne,YAAYiO,GACvBkQ,EAAWne,YAAYse,GACvBH,EAAWne,YAAYwe,EAGvC,KAAmB,CAEmB,WAAlBN,EAASjgC,MAET8U,EAAQjW,SAASgX,cAAc,UAC/Bf,EAAMzN,GAAK,SAAS24B,IACpBlrB,EAAMtV,KAAOwgC,EAGbC,EAASv+B,QAAQgI,QAAQkvB,IACrB,MAAM4H,EAAgB3hC,SAASgX,cAAc,UAC7C2qB,EAAc7uB,MAAQinB,EACtB4H,EAAch0B,YAAyB,sBAAXosB,EACtB,8CACA,oCACFA,IAAWqH,EAAShgC,UACpBugC,EAAc3H,UAAW,GAE7B/jB,EAAMiN,YAAYye,OAItB1rB,EAAQjW,SAASgX,cAAc,SAC/Bf,EAAM9U,KAAyB,WAAlBigC,EAASjgC,KAAoB,SAAW,OACrD8U,EAAMzN,GAAK,SAAS24B,IACpBlrB,EAAMtV,KAAOwgC,EACblrB,EAAMnD,MAAQsuB,EAAShgC,SAAW,GAE9BggC,EAAS//B,cACT4U,EAAM5U,YAAc+/B,EAAS//B,aAGX,WAAlB+/B,EAASjgC,YACY0uB,IAAjBuR,EAAS3+B,MAAmBwT,EAAMxT,IAAM2+B,EAAS3+B,UAChCotB,IAAjBuR,EAAS1+B,MAAmBuT,EAAMvT,IAAM0+B,EAAS1+B,UAC/BmtB,IAAlBuR,EAAS38B,OAAoBwR,EAAMxR,KAAO28B,EAAS38B,QAI/D,MAAM+8B,EAAOxhC,SAASgX,cAAc,SACpCwqB,EAAK7zB,YAAcpN,KAAKkhC,iBAAiBN,EAAWC,GAEpDC,EAAWne,YAAY1V,GACvB6zB,EAAWne,YAAYjN,GACvBorB,EAAWne,YAAYse,EACvC,CACYjgB,EAAU2B,YAAYme,GAGtBprB,EAAM/V,iBAAiB,QAAS,KAC5BK,KAAKqhC,2BAIa,WAAlB3rB,EAAM4rB,SACN5rB,EAAM/V,iBAAiB,SAAU,KAC7BK,KAAKqhC,6BAMjBrhC,KAAKqhC,wBACb,CAEI,mBAAAN,CAAoBH,GAChB,OAAOA,EAAUr1B,QAAQ,KAAM,KAAKA,QAAQ,QAASg2B,GAAKA,EAAEzb,cACpE,CAEI,gBAAAob,CAAiBN,EAAWC,GAiBxB,MAhBc,CACVlgC,WAAY,8DACZ6B,OAAQ,2DACRR,KAAM,uDACNI,KAAM,uDACNK,YAAa,sDACbC,YAAa,sDACbuB,OAAQ,uCACRG,SAAU,oEACVmB,SAAU,8BACVmB,SAAU,+CACVT,QAAS,uBACTY,MAAO,uCACPxE,aAAc,sEAGLu+B,IAAc,GAAGC,EAASjgC,mBAA+B0uB,IAAjBuR,EAAS3+B,IAAoB,IAAI2+B,EAAS3+B,UAAU2+B,EAAS1+B,OAAS,IACnI,CAEI,sBAAAk/B,GACI,IAAKrhC,KAAKsgC,wBAAyB,OAEnC,MAAMrM,WAAEA,EAAUxF,UAAEA,EAASyO,WAAEA,GAAel9B,KAAKsgC,wBAC7C5R,EAAS1uB,KAAKwhC,qBAGdjhC,EAAUP,KAAKyhC,0BAA0BxN,EAAYxF,EAAWyO,EAAYxO,GAE5EzM,EAAUxiB,SAASC,eAAe,2BACxC,GAAIuiB,GAAW1hB,EAEX,GAAIwa,MAAMwX,QAAQhyB,GAAU,CACxB,MAAM8b,EAAiB9b,EAAQyG,IAAIuR,GAAOA,EAAIhY,SAC9C0hB,EAAQ7U,YAAciP,EAAeD,KAAK,OAC1D,MACgB6F,EAAQ7U,YAAc7M,EAAQA,OAG9C,CAEI,kBAAAihC,GACI,MAAM9S,EAAS,CAAA,EAcf,OAbejvB,SAAS0hB,iBAAiB,mDAElC7W,QAAQoL,IACX,MAAMkrB,EAAYlrB,EAAMtV,KACxB,IAAImS,EAAQmD,EAAMnD,MAEC,WAAfmD,EAAM9U,OACN2R,EAAQkgB,WAAWlgB,IAAU,GAGjCmc,EAAOkS,GAAaruB,IAGjBmc,CACf,CAEI,yBAAA+S,CAA0BxN,EAAYxF,EAAWyO,EAAYxO,GAEzD,MAAMgT,EAAW,CACbvhC,UAAYuuB,GACU,WAAdD,GAA0BC,EAAO/tB,WAC1B,CACHJ,QAAS,GAAG28B,EAAW38B,YAAYmuB,EAAO/tB,cAC1CqH,KAAM,WAAW0mB,EAAO/tB,cAGzB,CAAEJ,QAAS28B,EAAW38B,QAASyH,KAAMk1B,EAAW98B,MAE3D4B,KAAO0sB,IACH,MAAM1sB,EAAO0sB,EAAO1sB,MAAQ,EACtBI,EAAOssB,EAAOtsB,MAAQ,EAE5B,GAAkB,qBAAdqsB,EAAkC,CAClC,MAAMjsB,OAA2B8sB,IAAlBZ,EAAOlsB,OAAuBksB,EAAOlsB,OAAS,EACvDssB,EAAaJ,EAAOjsB,aAAe,EACnCssB,EAAaL,EAAOhsB,aAAe,EAEzC,MAAO,CACHnC,QAAS,4BAA4BiC,KAAUR,KAAQI,KAAQ0sB,KAAcC,IAC7E/mB,KAAM,gBAAgBhG,EAAO,UAAUI,EAAO,mBAAmB0sB,EAAa,UAAUC,EAAa,KAE7H,CAAuB,GAAkB,eAAdN,EAA4B,CACnC,MAAMO,EAAYN,EAAO9rB,YAAc,EACjCqsB,EAAYP,EAAO7rB,YAAc,EACjCqsB,EAAUR,EAAO5rB,UAAY,EAC7BqsB,EAAUT,EAAO3rB,UAAY,EAC7BqsB,EAAcV,EAAOrsB,cAAgB,oBAK3C,OAHiB6a,YAAYmS,0BAA0BL,EAAWC,EAAWC,EAASC,EAASC,GAG/EpoB,IAAI,CAACuR,EAAKiD,KAEtB,IAAImmB,EAAWC,EACf,IACI,MAAMlF,EAAQnkB,EAAIhN,QAAQ,IAAK,IAAI2I,OAAOkH,MAAM,OAChDumB,EAAYpkB,SAASmf,EAAM,IAC3BkF,EAAYrkB,SAASmf,EAAM,GACvD,CAA0B,MAAOnM,GACLoR,OAAYrS,EACZsS,OAAYtS,CACxC,CAEwB,MAAO,CACH/uB,QAASgY,EACT3X,KAAMqzB,EACN5zB,KAAM68B,EAAW78B,KACjB2H,KAAgB,IAAVwT,EAAc,uBAAuBwT,EAAY,UAAUC,EAAY,aAAaC,EAAU,UAAUC,EAAU,IAAM5W,EAC9HtQ,GAAIjI,KAAKmZ,oBACTzY,WAAY,CAAEsB,KAAM2/B,EAAWv/B,KAAMw/B,KAGjE,CAAuB,GAAkB,2BAAdnT,EAAwC,CAC/C,MAAMjsB,EAASksB,EAAOlsB,QAAU,EAC1BwsB,EAAYN,EAAO9rB,YAAc,EACjCqsB,EAAYP,EAAO7rB,YAAc,EACjCqsB,EAAUR,EAAO5rB,UAAY,EAC7BqsB,EAAUT,EAAO3rB,UAAY,EAC7BwsB,EAAkBb,EAAOzrB,mBAAqB,EAC9CusB,EAAkBd,EAAOxrB,mBAAqB,EAC9CusB,EAAgBf,EAAOvrB,iBAAmB,EAC1CusB,EAAgBhB,EAAOtrB,iBAAmB,EAQhD,OANiB8Z,YAAYyS,oCACzBntB,EAAQwsB,EAAWC,EAAWC,EAASC,EACvCI,EAAiBC,EAAiBC,EAAeC,GAIrC1oB,IAAI,CAACuR,EAAKiD,KACtB,IAAIqmB,EAAaC,EAAaC,EAAaC,EAAiBC,EAC5D,IACI,MAAMvF,EAAQnkB,EAAIrE,OAAOkH,MAAM,OAE/BymB,EAActkB,SAASmf,EAAM,IAC7BoF,EAAcvkB,SAASmf,EAAM,IAC7BqF,EAAcxkB,SAASmf,EAAM,IAC7BsF,EAAkBzkB,SAASmf,EAAM,IACjCuF,EAAkB1kB,SAASmf,EAAM,GAC7D,CAA0B,MAAOnM,GAAG,CAEZ,MAAO,CACHhwB,QAASgY,EACT3X,KAAMqzB,EACN5zB,KAAM68B,EAAW78B,KACjB2H,KAAgB,IAAVwT,EAAc,mCAAmCwT,EAAY,KAAKE,EAAU,IAAM3W,EACxFtQ,GAAIjI,KAAKmZ,oBACTzY,WAAY,CACR8B,OAAQq/B,EACR7/B,KAAM8/B,EACN1/B,KAAM2/B,EACNt/B,YAAau/B,EACbt/B,YAAau/B,KAI7C,CAAuB,GAAkB,eAAdxT,EAA4B,CACnC,MAAMW,EAAcV,EAAOrsB,cAAgB,oBAI3C,OAHiB6a,YAAY0S,0BAA0B5tB,EAAMotB,GAG7CpoB,IAAI,CAACuR,EAAKiD,KAEtB,IAAIomB,EACJ,IACI,MAAMlF,EAAQnkB,EAAIhN,QAAQ,IAAK,IAAI2I,OAAOkH,MAAM,OAChDwmB,EAAYrkB,SAASmf,EAAM,GACvD,CAA0B,MAAOnM,GACLqR,OAAYtS,CACxC,CAEwB,MAAO,CACH/uB,QAASgY,EACT3X,KAAMqzB,EACN5zB,KAAM68B,EAAW78B,KACjB2H,KAAgB,IAAVwT,EAAc,sBAAsBxZ,EAAO,IAAMuW,EACvDtQ,GAAIjI,KAAKmZ,oBACTzY,WAAY,CAAEsB,OAAMI,KAAMw/B,KAGtD,CAAuB,GAAkB,2BAAdnT,EAAwC,CAC/C,MAAMjsB,EAASksB,EAAOlsB,QAAU,EAC1BssB,EAAaJ,EAAOjsB,aAAe,EAKzC,OAHiBya,YAAY2S,oCAAoCrtB,EAAQR,EAAM8sB,GAG/D9nB,IAAI,CAACuR,EAAKiD,KACtB,IAAIqmB,EAAaC,EAAaC,EAAaC,EAAiBC,EAC5D,IACI,MAAMvF,EAAQnkB,EAAIrE,OAAOkH,MAAM,OAE/BymB,EAActkB,SAASmf,EAAM,IAC7BoF,EAAcvkB,SAASmf,EAAM,IAC7BqF,EAAcxkB,SAASmf,EAAM,IAC7BsF,EAAkBzkB,SAASmf,EAAM,IACjCuF,EAAkB1kB,SAASmf,EAAM,GAC7D,CAA0B,MAAOnM,GAAG,CAEZ,MAAO,CACHhwB,QAASgY,EACT3X,KAAMqzB,EACN5zB,KAAM68B,EAAW78B,KACjB2H,KAAgB,IAAVwT,EAAc,sBAAsBxZ,EAAO,uBAAuB8sB,EAAa,KAAOvW,EAC5FtQ,GAAIjI,KAAKmZ,oBACTzY,WAAY,CACR8B,OAAQq/B,EACR7/B,KAAM8/B,EACN1/B,KAAM2/B,EACNt/B,YAAau/B,EACbt/B,YAAau/B,KAI7C,CAAuB,CAEH,MAAMC,EAAYliC,KAAKsgC,yBAA2BtgC,KAAKsgC,wBAAwB4B,UACzE9S,EAAcV,EAAOrsB,cAAgB,oBACrCywB,EAAS,IAEf,GAAIoP,EAAW,CACX,MACMC,EADUniC,KAAK+T,oBACWjM,KAAK9H,KAAK+W,aAAa/W,KAAKsgC,wBAAwB8B,WACpF,GAAID,IAAoBA,EAAgB5hC,QAAQgiB,WAAW,mBAAqB4f,EAAgB5hC,QAAQgiB,WAAW,oBAC/G,MAAO,CACHhiB,QAAS,mBAAmByB,KAAQI,IACpC4F,KAAM,gBAAgBhG,EAAO,UAAUI,EAAO,IAG9E,CAEoB,MAAO,CACH7B,QAAS,GAAGuyB,IAAS1D,KAAeptB,KAAQI,IAC5C4F,KAAM,gBAAgBhG,EAAO,UAAUI,EAAO,IAEtE,GAEYyB,SAAW6qB,IACP,IAAInuB,EAAU28B,EAAW38B,QAMzB,MALkB,oBAAdkuB,QAAqDa,IAAlBZ,EAAOzqB,OAC1C1D,EAAU,GAAG28B,EAAW38B,WAAWmuB,EAAOzqB,SACrB,iBAAdwqB,QAAoDa,IAApBZ,EAAOtqB,WAC9C7D,EAAU,GAAG28B,EAAW38B,WAAWmuB,EAAOtqB,YAEvC,CAAE7D,UAASyH,KAAMk1B,EAAW98B,OAEvC6E,OAASypB,IACL,IAAInuB,EAAU28B,EAAW38B,QAIzB,MAHkB,iBAAdkuB,QAAoDa,IAApBZ,EAAOnpB,WACvChF,EAAU,GAAG28B,EAAW38B,WAAWmuB,EAAOnpB,YAEvC,CAAEhF,UAASyH,KAAMk1B,EAAW98B,OAEvC2F,cAAgB2oB,IAAM,CAClBnuB,QAAS,GAAG28B,EAAW38B,WAAWmuB,EAAOzoB,SAAW,sBACpD+B,KAAM,GAAGk1B,EAAW98B,SAASsuB,EAAOzoB,SAAW,wBAEnDG,OAASsoB,IACL,IAAInuB,EAAU28B,EAAW38B,QAMzB,MALmB,mBAAdkuB,GAAgD,mBAAdA,IAAmCC,EAAOhoB,SAExD,eAAd+nB,QAA+Ca,IAAjBZ,EAAO7nB,QAC5CtG,EAAU,GAAG28B,EAAW38B,WAAWmuB,EAAO7nB,SAF1CtG,EAAU,GAAG28B,EAAW38B,WAAWmuB,EAAOhoB,WAIvC,CAAEnG,UAASyH,KAAMk1B,EAAW98B,QAIrCywB,EAAU6Q,EAASzN,GACzB,GAAIpD,EAAS,CACT,MAAMza,EAASya,EAAQnC,GAEvB,OAAI3T,MAAMwX,QAAQnc,GACPA,EAIJ,CACH7V,QAAS6V,EAAO7V,QAChBK,KAAMqzB,EACN5zB,KAAM68B,EAAW78B,KACjB2H,KAAMoO,EAAOpO,KACbC,GAAIjI,KAAKmZ,oBACTzY,WAAYguB,EAE5B,CAEQ,OAAO,IACf,CAEI,oBAAA+R,GACI,IAAKzgC,KAAK+W,cAAgB/W,KAAKsgC,wBAAyB,OAExD,MAAMrM,WAAEA,EAAUxF,UAAEA,EAASyO,WAAEA,EAAUkF,UAAEA,EAASF,UAAEA,GAAcliC,KAAKsgC,wBACnE5R,EAAS1uB,KAAKwhC,qBAEdjhC,EAAUP,KAAKyhC,0BAA0BxN,EAAYxF,EAAWyO,EAAYxO,GAElF,GAAInuB,EAAS,CACT,GAAI2hC,QAA2B5S,IAAd8S,EAEb,GAAIrnB,MAAMwX,QAAQhyB,GAAU,CACxB,MAAM8K,EAAUrL,KAAK+T,oBACJ1I,EAAQvD,KAAK9H,KAAK+W,aAG1BqiB,OAAOgJ,EAAW,KAAM7hC,GAEjC+M,WAAW6B,YAAYnP,KAAKqP,eAAgBhE,GAC5CrL,KAAKiX,qBACLjX,KAAK8U,aAAY,GACjBd,MAAMC,UAAU,GAAG1T,EAAQgP,uCAAwC,UACvF,KAAuB,CAEH,MAAMlE,EAAUrL,KAAK+T,oBACrB1I,EAAQvD,KAAK9H,KAAK+W,aAAaqrB,GAAa7hC,EAC5C+M,WAAW6B,YAAYnP,KAAKqP,eAAgBhE,GAC5CrL,KAAKiX,qBACLjX,KAAK8U,aAAY,GACjBd,MAAMC,UAAU,+BAAgC,UACpE,MAGgBjU,KAAK8hB,WAAW9hB,KAAK+W,YAAaxW,GAGtCkT,aAAagB,KAAK,kBAClBzU,KAAKsgC,wBAA0B,KAG/B7gC,SAASC,eAAe,2BAA2B0N,YAAc,aAC7E,CACA,CAEI,WAAAi1B,CAAY7mB,GACR,IAAKxb,KAAK+W,YAAa,OAEvB,MACM7W,EADUF,KAAK+T,oBACIjM,KAAK9H,KAAK+W,aAEnC,IAAK7W,IAAaA,EAASsb,GAAQ,OAEnC,MAAMjb,EAAUL,EAASsb,GAGzB,GAAIjb,EAAQG,YAAcH,EAAQK,KAAM,CAEpC,MAAMs8B,EAAal9B,KAAKm9B,sBAAsB58B,GAC9C,GAAI28B,GAAcA,EAAWz8B,aAEzB,YADAT,KAAKsiC,yBAAyB9mB,EAAOjb,EAAS28B,EAG9D,CAGQ,MAAMA,EAAal9B,KAAKm9B,sBAAsB58B,GAC1C28B,GAAcA,EAAWz8B,aACzBT,KAAKsiC,yBAAyB9mB,EAAOjb,EAAS28B,GAKlDlpB,MAAMC,UAAU,YAAY1T,EAAQA,kBAAkBA,EAAQK,OAAQ,OAAQ,IACtF,CAEI,qBAAAu8B,CAAsB58B,GAElB,GAAIA,EAAQA,QAAQ4P,SAAS,YAAa,CACtC,MAAMoyB,EAAetiC,SAASC,SAAS8B,KACvC,GAAIugC,EAEA,GAAIhiC,EAAQA,QAAQ4P,SAAS,6BAA+B5P,EAAQA,QAAQ4P,SAAS,MAAO,CAExF,GADc5P,EAAQA,QAAQ6a,MAAM,MAAMpU,IAAIw7B,GAAKA,EAAEtuB,QAC3C3E,OAAS,EAAG,CAClB,MAAMkzB,EAAyBF,EAAariC,SAAS8C,uBACrD,GAAIy/B,EACA,MAAO,CAAEhU,UAAW,4BAA6BgU,EAE7E,CACA,MAEqB,IAAKliC,EAAQA,QAAQ4P,SAAS,sBAAwB5P,EAAQA,QAAQ4P,SAAS,oBAC3E5P,EAAQA,QAAQ4P,SAAS,QAAU5P,EAAQA,QAAQ4P,SAAS,cAAe,CAEhF,GADc5P,EAAQA,QAAQ6a,MAAM,MAAMpU,IAAIw7B,GAAKA,EAAEtuB,QAC3C3E,OAAS,EAAG,CAClB,MAAMmzB,EAAeH,EAAariC,SAASyC,WAC3C,GAAI+/B,EACA,MAAO,CAAEjU,UAAW,gBAAiBiU,EAEjE,CACA,MAEqB,GAAIniC,EAAQA,QAAQ4P,SAAS,4BAA6B,CAC3D,MAAMwyB,EAAoBJ,EAAariC,SAASqC,iBAChD,GAAIogC,EACA,MAAO,CAAElU,UAAW,sBAAuBkU,EAEnE,MAEqB,GAAIpiC,EAAQA,QAAQ4P,SAAS,sBACxB5P,EAAQA,QAAQ4P,SAAS,oBAAsB5P,EAAQA,QAAQ4P,SAAS,cAAgB,CAC9F,MAAMyyB,EAAgBL,EAAariC,SAAS+B,YAC5C,GAAI2gC,EACA,MAAO,CAAEnU,UAAW,iBAAkBmU,EAE9D,CAEA,CAEQ,MAAMp4B,EAAWvK,SAASC,SAASK,EAAQK,MAC3C,IAAK4J,EAAU,OAAO,KAGtB,IAAK,MAAOikB,EAAWyO,KAAe9yB,OAAOC,QAAQG,EAAStK,UAC1D,GAAIg9B,EAAW38B,UAAYA,EAAQA,QAC/B,MAAO,CAAEkuB,eAAcyO,GAK/B,IAAK,MAAOzO,EAAWyO,KAAe9yB,OAAOC,QAAQG,EAAStK,UAC1D,GAAIg9B,EAAWz8B,cAAgBF,EAAQA,QAAQgiB,WAAW2a,EAAW38B,QAAQ6a,MAAM,KAAK,IACpF,MAAO,CAAEqT,eAAcyO,GAI/B,OAAO,IACf,CAEI,wBAAAoF,CAAyB9mB,EAAOjb,EAAS28B,GACrCl9B,KAAKsgC,wBAA0B,CAC3BrM,WAAY1zB,EAAQK,KACpB6tB,UAAWyO,EAAWzO,UACtByO,aACAkF,UAAW5mB,EACX0mB,WAAW,GAIVziC,SAASC,eAAe,mBACzBM,KAAKugC,uBAITvgC,KAAK6iC,8BAA8B3F,EAAY38B,EAAQG,YAGvDjB,SAASC,eAAe,uBAAuB0N,YAAc,SAAS8vB,EAAW98B,OACjFX,SAASC,eAAe,2BAA2B0N,YAAc,iBAGjEqG,aAAaC,KAAK,iBAC1B,CAEI,6BAAAmvB,CAA8B3F,EAAY4F,GACtC,MAAM9hB,EAAYvhB,SAASC,eAAe,mBAC1CshB,EAAUC,UAAY,GAGtB7W,OAAOC,QAAQ6yB,EAAWx8B,YAAY4J,QAAQ,EAAEs2B,EAAWC,MACvD,MAAMC,EAAarhC,SAASgX,cAAc,OAC1CqqB,EAAW9d,UAAY,aAEvB,MAAM/V,EAAQxN,SAASgX,cAAc,SAIrC,IAAIf,EAGJ,GANAzI,EAAMG,YAAcpN,KAAK+gC,oBAAoBH,GAC7C3zB,EAAMmoB,aAAa,MAAO,SAASwL,KAKb,WAAlBC,EAASjgC,KAAmB,CAE5B8U,EAAQjW,SAASgX,cAAc,UAC/Bf,EAAMzN,GAAK,SAAS24B,IACpBlrB,EAAMtV,KAAOwgC,EAGbC,EAASv+B,QAAQgI,QAAQkvB,IACrB,MAAM4H,EAAgB3hC,SAASgX,cAAc,UAC7C2qB,EAAc7uB,MAAQinB,EACtB4H,EAAch0B,YAAyB,sBAAXosB,EACtB,8CACA,oCACN9jB,EAAMiN,YAAYye,KAItB,MAAM2B,EAAgBD,QAAgDxT,IAA9BwT,EAAelC,GACjDkC,EAAelC,GACfC,EAAShgC,QACf6U,EAAMnD,MAAQwwB,QAAwDA,EAAgBlC,EAAShgC,OAC/G,KAAmB,CAEH6U,EAAQjW,SAASgX,cAAc,SAC/Bf,EAAM9U,KAAyB,WAAlBigC,EAASjgC,KAAoB,SAAW,OACrD8U,EAAMzN,GAAK,SAAS24B,IACpBlrB,EAAMtV,KAAOwgC,EAGb,MAAMmC,EAAgBD,QAAgDxT,IAA9BwT,EAAelC,GACjDkC,EAAelC,GACfC,EAAShgC,QACf6U,EAAMnD,MAAQwwB,QAAwDA,EAAgB,GAElFlC,EAAS//B,cACT4U,EAAM5U,YAAc+/B,EAAS//B,aAGX,WAAlB+/B,EAASjgC,YACY0uB,IAAjBuR,EAAS3+B,MAAmBwT,EAAMxT,IAAM2+B,EAAS3+B,UAChCotB,IAAjBuR,EAAS1+B,MAAmBuT,EAAMvT,IAAM0+B,EAAS1+B,UAC/BmtB,IAAlBuR,EAAS38B,OAAoBwR,EAAMxR,KAAO28B,EAAS38B,MAE3E,CAEY,MAAM+8B,EAAOxhC,SAASgX,cAAc,SACpCwqB,EAAK7zB,YAAcpN,KAAKkhC,iBAAiBN,EAAWC,GAEpDC,EAAWne,YAAY1V,GACvB6zB,EAAWne,YAAYjN,GACvBorB,EAAWne,YAAYse,GACvBjgB,EAAU2B,YAAYme,GAGtBprB,EAAM/V,iBAAiB,QAAS,KAC5BK,KAAKqhC,2BAIa,WAAlB3rB,EAAM4rB,SACN5rB,EAAM/V,iBAAiB,SAAU,KAC7BK,KAAKqhC,6BAMjBrhC,KAAKqhC,wBACb,CAEI,oBAAAxD,GAEyBp+B,SAAS0hB,iBAAiB,iBAElC7W,QAAQ01B,IACjB,MAAMvR,EAAYuR,EAAK3e,QAAQ9gB,QAC/B,IAAKkuB,EAAW,OAGhB,IAAIyO,EAAa,KAIjB,IAAK,MAAO8F,EAAQx4B,KAAaJ,OAAOC,QAAQpK,SAASC,UACrD,GAAIsK,EAAStK,SAASuuB,GAAY,CAC9ByO,EAAa1yB,EAAStK,SAASuuB,GAE/B,KACpB,CAGY,GAAIyO,EAAY,CACZ,IAAI+F,GAAa,EAKbA,GAFA/F,EAAWz7B,aAEEy7B,EAAWz7B,cAAgBzB,KAAK2H,mBAOjDq4B,EAAKvc,MAAM3Y,QAAUm4B,EAAa,OAAS,MAC3D,IAI2BxjC,SAAS0hB,iBAAiB,aAClC7W,QAAQE,IACf,MACM21B,EADkB31B,EAAS2W,iBAAiB,+CACV5R,OAAS,EACjD/E,EAASiZ,MAAM3Y,QAAUq1B,EAAkB,QAAU,QAEjE,CAEI,qBAAA3B,GACIx+B,KAAKkjC,yBACLzvB,aAAaC,KAAK,oBAC1B,CAEI,sBAAAwvB,GAEIljC,KAAKmjC,qBAGL,MAAMC,EAAc3jC,SAASC,eAAe,oBACxC0jC,IACAA,EAAYC,QAAU,IAAMrjC,KAAKsjC,mBAIrC,MAAMC,EAAc9jC,SAASC,eAAe,kBACxC6jC,IACAA,EAAYC,QAAW3jC,GAAMG,KAAKyjC,cAAc5jC,EAAEP,OAAOiT,OAErE,CAEI,kBAAA4wB,GACI,MAAMO,EAAiBjkC,SAASC,eAAe,kBAC/C,IAAKgkC,EAAgB,OAErB,MAAMC,EAAa1jC,SAAS6H,KAAKW,OAAOX,KACxC47B,EAAeziB,UAAY,GAE3B0iB,EAAWr5B,QAAQs5B,IACf,MAAMC,EAAYpkC,SAASgX,cAAc,OACzCotB,EAAU7gB,UAAY,aACtB6gB,EAAUR,QAAU,IAAMrjC,KAAK8jC,mBAAmBF,EAAQl7B,KAE1Dm7B,EAAU5iB,UAAY,2CACM2iB,EAAQl7B,oDACRk7B,EAAQtjC,kCAGpCojC,EAAe/gB,YAAYkhB,IAEvC,CAEI,eAAAP,GACI,MAAMS,EAAkBtkC,SAASC,eAAe,mBAC1C0jC,EAAc3jC,SAASC,eAAe,oBAExCqkC,GAAmBX,IACnBW,EAAgBtgB,MAAM3Y,QAAU,QAChCs4B,EAAY3f,MAAM3Y,QAAU,OAG5B9K,KAAKgkC,wBAEjB,CAEI,qBAAAA,GACI,MAAM9I,EAAgBz7B,SAASC,eAAe,iBACzCw7B,IAELA,EAAcja,UAAY,GAG1B7W,OAAOC,QAAQpK,SAAS6H,MAAMwC,QAAQ,EAAE2pB,EAAY4G,MAChD,GAAmB,WAAf5G,EAAyB,OAM7B,GAHA/0B,QAAQmS,IAAI,uBAAwB4iB,EAAY4G,IAG3CA,IAAiBA,EAAaz6B,OAASy6B,EAAa/yB,KAErD,YADA5I,QAAQ+kC,KAAK,yCAAyChQ,IAAc4G,GAIxE,MAAMC,EAAkBr7B,SAASgX,cAAc,OAC/CqkB,EAAgB9X,UAAY,eAE5B,MAAMkhB,EAAgBzkC,SAASgX,cAAc,OAC7CytB,EAAclhB,UAAY,sBAC1BkhB,EAAcb,QAAU,IAAMrjC,KAAKmkC,2BAA2BlQ,GAE9DiQ,EAAcjjB,UAAY,oDAEZ4Z,EAAaz6B,6DACUy6B,EAAav6B,aAAe,wHAKjE,MAAM8jC,EAAiB3kC,SAASgX,cAAc,OAC9C2tB,EAAephB,UAAY,iCAC3BohB,EAAen8B,GAAK,gBAAgBgsB,IAGhClZ,MAAMwX,QAAQsI,EAAa/yB,OAC3B+yB,EAAa/yB,KAAKwC,QAAQs5B,IACtB,GAAIA,GAAWA,EAAQl7B,IAAK,CACxB,MAAMm7B,EAAYpkC,SAASgX,cAAc,OACzCotB,EAAU7gB,UAAY,aACtB6gB,EAAUR,QAAU,IAAMrjC,KAAK8jC,mBAAmBF,EAAQl7B,KAE1Dm7B,EAAU5iB,UAAY,uDACM2iB,EAAQl7B,gEACRk7B,EAAQtjC,aAAe,qCAGnD8jC,EAAezhB,YAAYkhB,EACnD,IAIY/I,EAAgBnY,YAAYuhB,GAC5BpJ,EAAgBnY,YAAYyhB,GAC5BlJ,EAAcvY,YAAYmY,KAEtC,CAEI,0BAAAqJ,CAA2BlQ,GACvB,MAAMvd,EAAUjX,SAASC,eAAe,gBAAgBu0B,KACxD,IAAKvd,EAED,YADAxX,QAAQ+kC,KAAK,4DAA4DhQ,KAI7E,MAAM1Q,EAAS7M,EAAQ2tB,uBAEvB,GAAI3tB,GAAW6M,EAAQ,CAGnB,GAFoB7M,EAAQrB,UAAUqL,SAAS,aAE9B,CACbhK,EAAQrB,UAAUE,OAAO,aACzBgO,EAAOlO,UAAUE,OAAO,aAExB,MAAMiO,EAAUD,EAAOzC,cAAc,qBACjC0C,IACAA,EAAQC,MAAMC,UAAY,gBAE9C,KAAmB,CACHhN,EAAQrB,UAAUzW,IAAI,aACtB2kB,EAAOlO,UAAUzW,IAAI,aAErB,MAAM4kB,EAAUD,EAAOzC,cAAc,qBACjC0C,IACAA,EAAQC,MAAMC,UAAY,eAE9C,CACA,CACA,CAEI,aAAA+f,CAAca,GACV,MAAMC,EAAOD,EAAWh5B,cAAc4I,OAGnBzU,SAAS0hB,iBAAiB,8BAElC7W,QAAQo2B,IACf,MAAM/H,EAAU+H,EAAO5f,cAAc,aAAa1T,YAAY9B,cACxDk5B,EAAU9D,EAAO5f,cAAc,aAAa1T,YAAY9B,cAExD8f,EAAUuN,EAAQxoB,SAASo0B,IAASC,EAAQr0B,SAASo0B,GAC3D7D,EAAOjd,MAAM3Y,QAAUsgB,EAAU,OAAS,SAI3B3rB,SAAS0hB,iBAAiB,iBAClC7W,QAAQE,IACf,MACMi6B,EADcj6B,EAAS2W,iBAAiB,6CACX5R,OAAS,EAE5C,GAAa,KAATg1B,EAEA/5B,EAASiZ,MAAM3Y,QAAU,aAKzB,GAFAN,EAASiZ,MAAM3Y,QAAU25B,EAAiB,QAAU,OAEhDA,EAAgB,CAChB,MAAM/tB,EAAUlM,EAASsW,cAAc,yBACjCyC,EAAS/Y,EAASsW,cAAc,wBAClCpK,GAAW6M,IACX7M,EAAQrB,UAAUE,OAAO,aACzBgO,EAAOlO,UAAUE,OAAO,aAEhD,GAGA,CAEI,kBAAAuuB,CAAmBnL,GACfllB,aAAagB,KAAK,qBAClBzU,KAAK04B,UAAUC,EACvB,CAEI,oBAAA5X,CAAqBrL,GACjB,MAAM8O,EAAY,UACZC,EAAiB/O,EAAMgP,eACvBnS,EAAQmD,EAAMnD,MACdoS,EAAWpS,EAAMgK,MAAM,EAAGkI,GAAkBD,EAAYjS,EAAMgK,MAAMkI,GAC1E/O,EAAMnD,MAAQoS,EACdjP,EAAMkP,kBAAkBH,EAAiBD,EAAkBC,EAAiBD,GAC5E9O,EAAMvB,QAGNuB,EAAMmP,cAAc,IAAIC,MAAM,QAAS,CAAEC,SAAS,IAC1D,CAGI,gBAAAwZ,GAEI,MAAM7I,EAAcpoB,WAAW0B,WAAWhP,KAAKqP,gBAC3CqmB,GACAG,eAAegB,UAAUnB,GAI7B11B,KAAKq/B,oBAAsB,CACvBvJ,gBAAiB,CACbjuB,MAAO,IAAIlJ,IAAIk3B,eAAeC,gBAAgBjuB,OAC9CS,OAAQ,IAAI3J,IAAIk3B,eAAeC,gBAAgBxtB,SAEnDytB,cAAeF,eAAeE,eAGlC/1B,KAAK0kC,uBACL1kC,KAAK2kC,6BACLlxB,aAAaC,KAAK,eAC1B,CAEI,oBAAAgxB,GAEI,MAAME,EAAYnlC,SAASC,eAAe,oBACtCklC,IACAA,EAAU3jB,UAAY,GACtBjU,YAAYnF,MAAMyC,QAAQ4C,IACtB,MAAM23B,EAAa7kC,KAAK8kC,iBAAiB,QAAS53B,GAClD03B,EAAUjiB,YAAYkiB,MAK9B,MAAME,EAAatlC,SAASC,eAAe,qBACvCqlC,IACAA,EAAW9jB,UAAY,GACvBjU,YAAY1E,OAAOgC,QAAQ4C,IACvB,MAAM23B,EAAa7kC,KAAK8kC,iBAAiB,SAAU53B,GACnD63B,EAAWpiB,YAAYkiB,MAK/B7kC,KAAKglC,wBAAwB,SAC7BhlC,KAAKglC,wBAAwB,UAG7B,MAAMC,EAAoBxlC,SAASC,eAAe,wBAC9CulC,IACAA,EAAkB5a,QAAUwL,eAAeE,eAI/C/1B,KAAKklC,4BACLllC,KAAKmlC,sBACb,CAEI,gBAAAL,CAAiBrjC,EAAayL,GAC1B,MAAM8yB,EAAOvgC,SAASgX,cAAc,OACpCupB,EAAKhd,UAAY,cACjBgd,EAAK/e,UAAY,mDACuBxf,KAAeyL,EAAOA,OAAO3B,QAAQ,gBAAiB,gDAC/D9J,wCACLyL,EAAOA,4CACRzL,KAAeyL,EAAOA,OAAO3B,QAAQ,gBAAiB,mDAC7C2B,EAAOD,0BAGzC,MAAMm4B,EAAWpF,EAAKlf,cAAc,0BACpCskB,EAASzlC,iBAAiB,SAAU,KAChCk2B,eAAeO,aAAa30B,EAAayL,EAAOA,QAChDlN,KAAKklC,4BACLllC,KAAKmlC,uBACLnF,EAAK3qB,UAAUC,OAAO,WAAY8vB,EAAS/a,WAY/C,OANc2V,EAAKlf,cAAc,iBAC3BnhB,iBAAiB,QAAS,KAC5BylC,EAAS/a,SAAW+a,EAAS/a,QAC7B+a,EAASvgB,cAAc,IAAIC,MAAM,aAG9Bkb,CACf,CAEI,0BAAA2E,GAE8B,CAAC,iBAAkB,gBAAiB,kBAAmB,iBAAkB,uBAAwB,kBACzGr6B,QAAQrC,IACtB,MAAM8a,EAAUtjB,SAASC,eAAeuI,GACpC8a,GACAA,EAAQsiB,YAAYtiB,EAAQuiB,WAAU,MAK9ClmC,SAASC,MAAM,iBAAkB,QAAS,2BAA4B,KAClE,IACIw2B,eAAeU,iBAAiB,SAChCv2B,KAAKglC,wBAAwB,SAC7BhlC,KAAKklC,4BACLllC,KAAKmlC,sBAGrB,CAAc,MAAOhmC,GACDA,aAAiB2N,wBACjBkH,MAAMC,UAAU,UAAU9U,EAAM8G,UAAW,UAE3C+N,MAAMC,UAAU,qCAAsC,SACtD/U,QAAQC,MAAM,qCAAsCA,GAExE,IAGQC,SAASC,MAAM,gBAAiB,QAAS,0BAA2B,KAChEw2B,eAAeC,gBAAgBjuB,MAAMyuB,QACrCt2B,KAAKglC,wBAAwB,SAC7BhlC,KAAKklC,4BACLllC,KAAKmlC,yBAMT/lC,SAASC,MAAM,kBAAmB,QAAS,4BAA6B,KACpE,IACIw2B,eAAeU,iBAAiB,UAChCv2B,KAAKglC,wBAAwB,UAC7BhlC,KAAKklC,4BACLllC,KAAKmlC,sBAGrB,CAAc,MAAOhmC,GACDA,aAAiB2N,wBACjBkH,MAAMC,UAAU,UAAU9U,EAAM8G,UAAW,UAE3C+N,MAAMC,UAAU,sCAAuC,SACvD/U,QAAQC,MAAM,sCAAuCA,GAEzE,IAGQC,SAASC,MAAM,iBAAkB,QAAS,2BAA4B,KAClEw2B,eAAeC,gBAAgBxtB,OAAOguB,QACtCt2B,KAAKglC,wBAAwB,UAC7BhlC,KAAKklC,4BACLllC,KAAKmlC,yBAMT/lC,SAASC,MAAM,uBAAwB,SAAU,yBAA2BQ,IACxEg2B,eAAeE,cAAgBl2B,EAAEP,OAAO+qB,QACxCrqB,KAAKmlC,yBAMT/lC,SAASC,MAAM,iBAAkB,QAAS,eAAgB,KACtDW,KAAKulC,0BAEjB,CAEI,uBAAAP,CAAwBvjC,GACDhC,SAAS0hB,iBAAiB,2BAA2B1f,OAC7D6I,QAAQ86B,IACf,MAAMv4B,EAAau4B,EAAS/jB,QAAQnU,OAC9BsvB,EAAa3G,eAAea,iBAAiBj1B,EAAaoL,GAChEu4B,EAAS/a,QAAUmS,EACnB4I,EAAShwB,QAAQ,gBAAgBC,UAAUC,OAAO,WAAYknB,IAE1E,CAEI,yBAAA0I,GACI,MAAMM,EAAa3P,eAAeW,eAAe,SAC3CiP,EAAc5P,eAAeW,eAAe,UAE5CkP,EAAejmC,SAASC,eAAe,oBACvCimC,EAAgBlmC,SAASC,eAAe,qBAE1CgmC,IACAA,EAAat4B,YAAc,GAAGo4B,cAG9BG,IACAA,EAAcv4B,YAAc,GAAGq4B,aAE3C,CAEI,oBAAAN,GACI,MAAMS,EAAenmC,SAASC,eAAe,qBACvCmmC,EAAgBpmC,SAASC,eAAe,sBAG9C,GAAIkmC,EACA,IACI,MAAME,EAAajQ,eAAeG,cAAc,SAChD4P,EAAax4B,YAAc04B,GAAc,2BACzD,CAAc,MAAO3mC,GACDA,aAAiB2N,yBACjB84B,EAAax4B,YAAc,6BAC3B4G,MAAMC,UAAU,wBAAwB9U,EAAM8G,UAAW,WAEzD2/B,EAAax4B,YAAc,2BAC3BlO,QAAQC,MAAM,wCAAyCA,GAE3E,CAIQ,GAAI0mC,EACA,IACI,MAAME,EAAclQ,eAAeG,cAAc,UACjD6P,EAAcz4B,YAAc24B,GAAe,4BAC3D,CAAc,MAAO5mC,GACDA,aAAiB2N,yBACjB+4B,EAAcz4B,YAAc,6BAC5B4G,MAAMC,UAAU,yBAAyB9U,EAAM8G,UAAW,WAE1D4/B,EAAcz4B,YAAc,2BAC5BlO,QAAQC,MAAM,yCAA0CA,GAE5E,CAEA,CAEI,sBAAAomC,GACI,IAAIO,EAAa,GACbC,EAAc,GAGlB,IACID,EAAajQ,eAAeG,cAAc,QACtD,CAAU,MAAO72B,GACL,OAAIA,aAAiB2N,6BACjBkH,MAAMC,UAAU,sBAAsB9U,EAAM8G,UAAW,UAGvD+N,MAAMC,UAAU,iCAAkC,cAClD/U,QAAQC,MAAM,gCAAiCA,GAG/D,CAEQ,IACI4mC,EAAclQ,eAAeG,cAAc,SACvD,CAAU,MAAO72B,GACL,OAAIA,aAAiB2N,6BACjBkH,MAAMC,UAAU,uBAAuB9U,EAAM8G,UAAW,UAGxD+N,MAAMC,UAAU,kCAAmC,cACnD/U,QAAQC,MAAM,iCAAkCA,GAGhE,CAEQ,IAAK2mC,IAAeC,EAEhB,YADA/xB,MAAMC,UAAU,8EAA+E,WAKnG,IADuBjU,KAAK+T,oBAGxB,YADAC,MAAMC,UAAU,sBAAuB,SAK3C,MAAMyhB,EAAcpoB,WAAW0B,WAAWhP,KAAKqP,gBAC/C,IAAKqmB,EAED,YADA1hB,MAAMC,UAAU,mBAAoB,SAIxC,IAAI+xB,EAAa,EAQjB,GALKtQ,EAAYxtB,UACbwtB,EAAYxtB,QAAU,IAItB49B,EAAY,CACZ,MAAMG,EAAiB,+BAGjBvqB,EAAQoqB,EAAWpqB,MAAM,8BACzBtD,EAAgBsD,EAAQA,EAAM,GAAK,GAEzCga,EAAYxtB,QAAQ+9B,GAAkB,CAClC7lC,KAAM6lC,EACN3lC,YAAa,qCACbJ,SAAUkY,EACV1M,SAAS,IAAIC,MAAOC,cACpBgD,cAAc,IAAIjD,MAAOC,eAE7Bo6B,GACZ,CAGQ,GAAID,EAAa,CACb,MAAMG,EAAkB,gCAGlBxqB,EAAQqqB,EAAYrqB,MAAM,8BAC1ByqB,EAAiBzqB,EAAQA,EAAM,GAAK,GAE1Cga,EAAYxtB,QAAQg+B,GAAmB,CACnC9lC,KAAM8lC,EACN5lC,YAAa,sCACbJ,SAAUimC,EACVz6B,SAAS,IAAIC,MAAOC,cACpBgD,cAAc,IAAIjD,MAAOC,eAE7Bo6B,GACZ,CAGQnQ,eAAec,UAAUjB,GAGzBpoB,WAAW6B,YAAYnP,KAAKqP,eAAgBqmB,GAG5C11B,KAAKmP,cACLnP,KAAK8U,aAAY,GAGS,oBAAf8B,YAA8BA,WAAWoH,sBAChDpH,WAAWoH,uBAIfhe,KAAKq/B,oBAAsB,CACvBvJ,gBAAiB,CACbjuB,MAAO,IAAIlJ,IAAIk3B,eAAeC,gBAAgBjuB,OAC9CS,OAAQ,IAAI3J,IAAIk3B,eAAeC,gBAAgBxtB,SAEnDytB,cAAeF,eAAeE,eAIlC/1B,KAAKs/B,eAAgB,EAGrB7rB,aAAagB,KAAK,gBAClBT,MAAMC,UAAU,aAAa+xB,kBAA2BA,EAAa,EAAI,KAAO,oDAAqD,UAC7I,CAGI,UAAAxO,GACI,MACM3mB,EADWvD,WAAWkC,cACLqB,OAAS,UAElB,SAAVA,EACApR,SAAS2mC,gBAAgBhR,aAAa,aAAc,QAEpD31B,SAAS2mC,gBAAgBC,gBAAgB,cAG7CrmC,KAAK23B,wBAAwB9mB,EACrC,CAEI,WAAA8C,GACI,MAAMnK,EAAW8D,WAAWkC,cAEtB82B,EAA4B,UADb98B,EAASqH,OAAS,WACI,UAAY,OAEvDrH,EAASqH,MAAQy1B,EACjBh5B,WAAWoC,aAAalG,GAExBxJ,KAAKw3B,aAEL,MAAM+O,EAAyB,SAAbD,EAAsB,YAAc,aACtDtyB,MAAMC,UAAU,eAAesyB,IAAa,UACpD,CAEI,uBAAA5O,CAAwB9mB,GACpB,MAAM21B,EAAiB/mC,SAASC,eAAe,kBACzC+mC,EAAkBhnC,SAASC,eAAe,mBAC1CgnC,EAAYF,GAAgB1lB,cAAc,KAE5C0lB,GAAkBC,GAAmBC,IACvB,SAAV71B,GACA61B,EAAU1jB,UAAY,aACtByjB,EAAgBr5B,YAAc,eAE9Bs5B,EAAU1jB,UAAY,cACtByjB,EAAgBr5B,YAAc,aAG9C,GV9oGArN,OAAOsS,IAAMA,EAEbjT,SAASZ,GAAG,gBAAiB,KAC3ByT,EAAYvE,OACZwI,EAAYxI,OACZkJ,EAAWlJ,OACX6I,EAAU7I,OACVymB,EAAgBzmB"}